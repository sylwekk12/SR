
acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a234  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000000  0800a418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009d4  20000088  0800a4a0  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a5c  0800a4a0  00020a5c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002148b  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000047eb  00000000  00000000  00041543  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000018e0  00000000  00000000  00045d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016b0  00000000  00000000  00047610  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c389  00000000  00000000  00048cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000793d  00000000  00000000  00055049  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005c986  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006774  00000000  00000000  0005ca04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a3a4 	.word	0x0800a3a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	0800a3a4 	.word	0x0800a3a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <HAL_Init+0x3c>)
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x3c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 f938 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f80f 	bl	8000518 <HAL_InitTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e001      	b.n	800050a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000506:	f009 f9ed 	bl	80098e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40022000 	.word	0x40022000

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_InitTick+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <HAL_InitTick+0x44>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	099b      	lsrs	r3, r3, #6
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f94c 	bl	80007ce <HAL_SYSTICK_Config>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e005      	b.n	800054e <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f000 f916 	bl	800077a <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000020 	.word	0x20000020
 800055c:	10624dd3 	.word	0x10624dd3

08000560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick++;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x18>)
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	200000bc 	.word	0x200000bc

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200000bc 	.word	0x200000bc

08000594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800059c:	f7ff ffee 	bl	800057c <HAL_GetTick>
 80005a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ac:	d002      	beq.n	80005b4 <HAL_Delay+0x20>
  {
    wait++;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b4:	bf00      	nop
 80005b6:	f7ff ffe1 	bl	800057c <HAL_GetTick>
 80005ba:	4602      	mov	r2, r0
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	1ad2      	subs	r2, r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d3f7      	bcc.n	80005b6 <HAL_Delay+0x22>
  {
  }
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800063e:	4909      	ldr	r1, [pc, #36]	; (8000664 <NVIC_EnableIRQ+0x30>)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	095b      	lsrs	r3, r3, #5
 8000646:	79fa      	ldrb	r2, [r7, #7]
 8000648:	f002 021f 	and.w	r2, r2, #31
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e100 	.word	0xe000e100

08000668 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da0b      	bge.n	8000694 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	490d      	ldr	r1, [pc, #52]	; (80006b4 <NVIC_SetPriority+0x4c>)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 030f 	and.w	r3, r3, #15
 8000684:	3b04      	subs	r3, #4
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000692:	e009      	b.n	80006a8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	4908      	ldr	r1, [pc, #32]	; (80006b8 <NVIC_SetPriority+0x50>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	2201      	movs	r2, #1
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	401a      	ands	r2, r3
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000702:	2101      	movs	r1, #1
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	1e59      	subs	r1, r3, #1
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff90 	bl	8000668 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff2f 	bl	80005d0 <NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff44 	bl	8000618 <NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff90 	bl	80006bc <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5f 	bl	8000668 <NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff37 	bl	8000634 <NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffa2 	bl	8000720 <SysTick_Config>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f6:	e17f      	b.n	8000af8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 8171 	beq.w	8000af2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_Init+0x38>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b12      	cmp	r3, #18
 800081e:	d123      	bne.n	8000868 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	08da      	lsrs	r2, r3, #3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3208      	adds	r2, #8
 8000828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	220f      	movs	r2, #15
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	691a      	ldr	r2, [r3, #16]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4313      	orrs	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3208      	adds	r2, #8
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f003 0203 	and.w	r2, r3, #3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d00b      	beq.n	80008bc <HAL_GPIO_Init+0xd4>
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d007      	beq.n	80008bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b0:	2b11      	cmp	r3, #17
 80008b2:	d003      	beq.n	80008bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b12      	cmp	r3, #18
 80008ba:	d130      	bne.n	800091e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f2:	2201      	movs	r2, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	091b      	lsrs	r3, r3, #4
 8000908:	f003 0201 	and.w	r2, r3, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	2b03      	cmp	r3, #3
 8000928:	d118      	bne.n	800095c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80ac 	beq.w	8000af2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4a5e      	ldr	r2, [pc, #376]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 800099c:	4b5d      	ldr	r3, [pc, #372]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b2:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <HAL_GPIO_Init+0x330>)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x242>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4e      	ldr	r2, [pc, #312]	; (8000b1c <HAL_GPIO_Init+0x334>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x23e>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4d      	ldr	r2, [pc, #308]	; (8000b20 <HAL_GPIO_Init+0x338>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x23a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4c      	ldr	r2, [pc, #304]	; (8000b24 <HAL_GPIO_Init+0x33c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x236>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4b      	ldr	r2, [pc, #300]	; (8000b28 <HAL_GPIO_Init+0x340>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x232>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4a      	ldr	r2, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x344>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x22e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a49      	ldr	r2, [pc, #292]	; (8000b30 <HAL_GPIO_Init+0x348>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x22a>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3c:	4936      	ldr	r1, [pc, #216]	; (8000b18 <HAL_GPIO_Init+0x330>)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a98:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aec:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f47f ae78 	bne.w	80007f8 <HAL_GPIO_Init+0x10>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000c00 	.word	0x48000c00
 8000b28:	48001000 	.word	0x48001000
 8000b2c:	48001400 	.word	0x48001400
 8000b30:	48001800 	.word	0x48001800
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b48:	787b      	ldrb	r3, [r7, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	b08d      	sub	sp, #52	; 0x34
 8000b6c:	af0a      	add	r7, sp, #40	; 0x28
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e048      	b.n	8000c0c <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d106      	bne.n	8000b94 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f009 f838 	bl	8009c04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2203      	movs	r2, #3
 8000b98:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 fc63 	bl	800646c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	687e      	ldr	r6, [r7, #4]
 8000bae:	466d      	mov	r5, sp
 8000bb0:	f106 0410 	add.w	r4, r6, #16
 8000bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bc4:	1d33      	adds	r3, r6, #4
 8000bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc8:	6838      	ldr	r0, [r7, #0]
 8000bca:	f005 fbfc 	bl	80063c6 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f005 fc5a 	bl	800648e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	687e      	ldr	r6, [r7, #4]
 8000be2:	466d      	mov	r5, sp
 8000be4:	f106 0410 	add.w	r4, r6, #16
 8000be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bf8:	1d33      	adds	r3, r6, #4
 8000bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bfc:	6838      	ldr	r0, [r7, #0]
 8000bfe:	f005 fd69 	bl	80066d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c14 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af04      	add	r7, sp, #16
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4603      	mov	r3, r0
 8000c24:	70fb      	strb	r3, [r7, #3]
 8000c26:	460b      	mov	r3, r1
 8000c28:	70bb      	strb	r3, [r7, #2]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d101      	bne.n	8000c3c <HAL_HCD_HC_Init+0x28>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e07f      	b.n	8000d3c <HAL_HCD_HC_Init+0x128>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c44:	78fa      	ldrb	r2, [r7, #3]
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	333d      	adds	r3, #61	; 0x3d
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c58:	78fa      	ldrb	r2, [r7, #3]
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3338      	adds	r3, #56	; 0x38
 8000c68:	787a      	ldrb	r2, [r7, #1]
 8000c6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000c6c:	78fa      	ldrb	r2, [r7, #3]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3340      	adds	r3, #64	; 0x40
 8000c7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c7e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000c80:	78fa      	ldrb	r2, [r7, #3]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3339      	adds	r3, #57	; 0x39
 8000c90:	78fa      	ldrb	r2, [r7, #3]
 8000c92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000c94:	78fa      	ldrb	r2, [r7, #3]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	440b      	add	r3, r1
 8000ca2:	333f      	adds	r3, #63	; 0x3f
 8000ca4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ca8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	78bb      	ldrb	r3, [r7, #2]
 8000cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cb2:	b2d8      	uxtb	r0, r3
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	440b      	add	r3, r1
 8000cc0:	333a      	adds	r3, #58	; 0x3a
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000cc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	da0a      	bge.n	8000ce4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cce:	78fa      	ldrb	r2, [r7, #3]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	333b      	adds	r3, #59	; 0x3b
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e009      	b.n	8000cf8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	333b      	adds	r3, #59	; 0x3b
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	333c      	adds	r3, #60	; 0x3c
 8000d08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d0c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	787c      	ldrb	r4, [r7, #1]
 8000d14:	78ba      	ldrb	r2, [r7, #2]
 8000d16:	78f9      	ldrb	r1, [r7, #3]
 8000d18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4623      	mov	r3, r4
 8000d2a:	f005 fe45 	bl	80069b8 <USB_HC_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd90      	pop	{r4, r7, pc}

08000d44 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d101      	bne.n	8000d62 <HAL_HCD_HC_Halt+0x1e>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e00f      	b.n	8000d82 <HAL_HCD_HC_Halt+0x3e>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	78fa      	ldrb	r2, [r7, #3]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 f82b 	bl	8006dce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	70fb      	strb	r3, [r7, #3]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70bb      	strb	r3, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	333b      	adds	r3, #59	; 0x3b
 8000db6:	78ba      	ldrb	r2, [r7, #2]
 8000db8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000dba:	78fa      	ldrb	r2, [r7, #3]
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	333f      	adds	r3, #63	; 0x3f
 8000dca:	787a      	ldrb	r2, [r7, #1]
 8000dcc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000dce:	7c3b      	ldrb	r3, [r7, #16]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10a      	bne.n	8000dea <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dd4:	78fa      	ldrb	r2, [r7, #3]
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	3342      	adds	r3, #66	; 0x42
 8000de4:	2203      	movs	r2, #3
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e009      	b.n	8000dfe <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3342      	adds	r3, #66	; 0x42
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000dfe:	787b      	ldrb	r3, [r7, #1]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	f200 80d6 	bhi.w	8000fb2 <HAL_HCD_HC_SubmitRequest+0x226>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000f9d 	.word	0x08000f9d
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	08000f13 	.word	0x08000f13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e1c:	7c3b      	ldrb	r3, [r7, #16]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f040 80c9 	bne.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f040 80c5 	bne.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e2c:	8b3b      	ldrh	r3, [r7, #24]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d109      	bne.n	8000e46 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3351      	adds	r3, #81	; 0x51
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3351      	adds	r3, #81	; 0x51
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10a      	bne.n	8000e72 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	3342      	adds	r3, #66	; 0x42
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000e70:	e0a1      	b.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e72:	78fa      	ldrb	r2, [r7, #3]
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	3342      	adds	r3, #66	; 0x42
 8000e82:	2202      	movs	r2, #2
 8000e84:	701a      	strb	r2, [r3, #0]
      break;
 8000e86:	e096      	b.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d120      	bne.n	8000ed0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e8e:	78fa      	ldrb	r2, [r7, #3]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3351      	adds	r3, #81	; 0x51
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ea4:	78fa      	ldrb	r2, [r7, #3]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3342      	adds	r3, #66	; 0x42
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000eb8:	e07e      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3342      	adds	r3, #66	; 0x42
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
      break;
 8000ece:	e073      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	3350      	adds	r3, #80	; 0x50
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3342      	adds	r3, #66	; 0x42
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
      break;
 8000efa:	e05d      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000efc:	78fa      	ldrb	r2, [r7, #3]
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	3342      	adds	r3, #66	; 0x42
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
      break;
 8000f10:	e052      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f12:	78bb      	ldrb	r3, [r7, #2]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d120      	bne.n	8000f5a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f18:	78fa      	ldrb	r2, [r7, #3]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	3351      	adds	r3, #81	; 0x51
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10a      	bne.n	8000f44 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3342      	adds	r3, #66	; 0x42
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f42:	e039      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f44:	78fa      	ldrb	r2, [r7, #3]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	3342      	adds	r3, #66	; 0x42
 8000f54:	2202      	movs	r2, #2
 8000f56:	701a      	strb	r2, [r3, #0]
      break;
 8000f58:	e02e      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3350      	adds	r3, #80	; 0x50
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f70:	78fa      	ldrb	r2, [r7, #3]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3342      	adds	r3, #66	; 0x42
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
      break;
 8000f84:	e018      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f86:	78fa      	ldrb	r2, [r7, #3]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	3342      	adds	r3, #66	; 0x42
 8000f96:	2202      	movs	r2, #2
 8000f98:	701a      	strb	r2, [r3, #0]
      break;
 8000f9a:	e00d      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3342      	adds	r3, #66	; 0x42
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
      break;
 8000fb0:	e002      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8000fb6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3344      	adds	r3, #68	; 0x44
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	8b39      	ldrh	r1, [r7, #24]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4403      	add	r3, r0
 8000fdc:	3348      	adds	r3, #72	; 0x48
 8000fde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	335c      	adds	r3, #92	; 0x5c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	334c      	adds	r3, #76	; 0x4c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3339      	adds	r3, #57	; 0x39
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	335d      	adds	r3, #93	; 0x5d
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	3338      	adds	r3, #56	; 0x38
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f005 fdaf 	bl	8006ba8 <USB_HC_StartXfer>
 800104a:	4603      	mov	r3, r0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f005 faef 	bl	800664e <USB_GetMode>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	f040 80f2 	bne.w	800125c <HAL_HCD_IRQHandler+0x208>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f005 fad3 	bl	8006628 <USB_ReadInterrupts>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80e8 	beq.w	800125a <HAL_HCD_IRQHandler+0x206>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f005 faca 	bl	8006628 <USB_ReadInterrupts>
 8001094:	4603      	mov	r3, r0
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800109e:	d104      	bne.n	80010aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f005 faba 	bl	8006628 <USB_ReadInterrupts>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010be:	d104      	bne.n	80010ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 faaa 	bl	8006628 <USB_ReadInterrupts>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010de:	d104      	bne.n	80010ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 fa9a 	bl	8006628 <USB_ReadInterrupts>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d103      	bne.n	8001106 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2202      	movs	r2, #2
 8001104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f005 fa8c 	bl	8006628 <USB_ReadInterrupts>
 8001110:	4603      	mov	r3, r0
 8001112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800111a:	d118      	bne.n	800114e <HAL_HCD_IRQHandler+0xfa>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001130:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f008 fde0 	bl	8009cf8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fb6e 	bl	8006820 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800114c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f005 fa68 	bl	8006628 <USB_ReadInterrupts>
 8001158:	4603      	mov	r3, r0
 800115a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800115e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001162:	d102      	bne.n	800116a <HAL_HCD_IRQHandler+0x116>
    {
      HCD_Port_IRQHandler(hhcd);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f001 f8d1 	bl	800230c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f005 fa5a 	bl	8006628 <USB_ReadInterrupts>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b08      	cmp	r3, #8
 800117c:	d106      	bne.n	800118c <HAL_HCD_IRQHandler+0x138>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f008 fd9e 	bl	8009cc0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2208      	movs	r2, #8
 800118a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fa49 	bl	8006628 <USB_ReadInterrupts>
 8001196:	4603      	mov	r3, r0
 8001198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011a0:	d138      	bne.n	8001214 <HAL_HCD_IRQHandler+0x1c0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f005 fe00 	bl	8006dac <USB_HC_ReadInterrupt>
 80011ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	e025      	b.n	8001200 <HAL_HCD_IRQHandler+0x1ac>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d018      	beq.n	80011fa <HAL_HCD_IRQHandler+0x1a6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	015a      	lsls	r2, r3, #5
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011de:	d106      	bne.n	80011ee <HAL_HCD_IRQHandler+0x19a>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f8cf 	bl	800138a <HCD_HC_IN_IRQHandler>
 80011ec:	e005      	b.n	80011fa <HAL_HCD_IRQHandler+0x1a6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fc69 	bl	8001acc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	429a      	cmp	r2, r3
 8001208:	d8d4      	bhi.n	80011b4 <HAL_HCD_IRQHandler+0x160>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f005 fa05 	bl	8006628 <USB_ReadInterrupts>
 800121e:	4603      	mov	r3, r0
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b10      	cmp	r3, #16
 8001226:	d101      	bne.n	800122c <HAL_HCD_IRQHandler+0x1d8>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <HAL_HCD_IRQHandler+0x1da>
 800122c:	2300      	movs	r3, #0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d014      	beq.n	800125c <HAL_HCD_IRQHandler+0x208>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	6992      	ldr	r2, [r2, #24]
 800123c:	f022 0210 	bic.w	r2, r2, #16
 8001240:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 ffb6 	bl	80021b4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	6992      	ldr	r2, [r2, #24]
 8001252:	f042 0210 	orr.w	r2, r2, #16
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	e000      	b.n	800125c <HAL_HCD_IRQHandler+0x208>
      return;
 800125a:	bf00      	nop
    }
  }
}
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_HCD_Start+0x16>
 8001274:	2302      	movs	r3, #2
 8001276:	e013      	b.n	80012a0 <HAL_HCD_Start+0x3e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f005 f8e0 	bl	800644a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f005 fb2d 	bl	80068f0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_HCD_Stop+0x16>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e00d      	b.n	80012da <HAL_HCD_Stop+0x32>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 fe88 	bl	8006fe0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f005 fad2 	bl	8006898 <USB_ResetPort>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800130a:	78fa      	ldrb	r2, [r7, #3]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	335c      	adds	r3, #92	; 0x5c
 800131a:	781b      	ldrb	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001334:	78fa      	ldrb	r2, [r7, #3]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	334c      	adds	r3, #76	; 0x4c
 8001344:	681b      	ldr	r3, [r3, #0]
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f005 fb18 	bl	8006994 <USB_GetCurrentFrame>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f005 faf3 	bl	8006966 <USB_GetHostSpeed>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	015a      	lsls	r2, r3, #5
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d11a      	bne.n	80013f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	015a      	lsls	r2, r3, #5
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4413      	add	r3, r2
 80013c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013c6:	461a      	mov	r2, r3
 80013c8:	2304      	movs	r3, #4
 80013ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	015a      	lsls	r2, r3, #5
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4413      	add	r3, r2
 80013d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013d8:	4619      	mov	r1, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	015a      	lsls	r2, r3, #5
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	60cb      	str	r3, [r1, #12]
 80013ee:	e097      	b.n	8001520 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	2b20      	cmp	r3, #32
 8001404:	d109      	bne.n	800141a <HCD_HC_IN_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4413      	add	r3, r2
 800140e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001412:	461a      	mov	r2, r3
 8001414:	2320      	movs	r3, #32
 8001416:	6093      	str	r3, [r2, #8]
 8001418:	e082      	b.n	8001520 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	015a      	lsls	r2, r3, #5
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4413      	add	r3, r2
 8001422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b08      	cmp	r3, #8
 800142e:	d135      	bne.n	800149c <HCD_HC_IN_IRQHandler+0x112>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143c:	4619      	mov	r1, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4413      	add	r3, r2
 8001446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	335d      	adds	r3, #93	; 0x5d
 8001462:	2205      	movs	r2, #5
 8001464:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	015a      	lsls	r2, r3, #5
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4413      	add	r3, r2
 800146e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001472:	461a      	mov	r2, r3
 8001474:	2310      	movs	r3, #16
 8001476:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4413      	add	r3, r2
 8001480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001484:	461a      	mov	r2, r3
 8001486:	2308      	movs	r3, #8
 8001488:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f005 fc9a 	bl	8006dce <USB_HC_Halt>
 800149a:	e041      	b.n	8001520 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b2:	d135      	bne.n	8001520 <HCD_HC_IN_IRQHandler+0x196>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014c0:	4619      	mov	r1, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f005 fc74 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f2:	461a      	mov	r2, r3
 80014f4:	2310      	movs	r3, #16
 80014f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	335d      	adds	r3, #93	; 0x5d
 8001508:	2208      	movs	r2, #8
 800150a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001518:	461a      	mov	r2, r3
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001536:	d123      	bne.n	8001580 <HCD_HC_IN_IRQHandler+0x1f6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4413      	add	r3, r2
 8001540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001544:	4619      	mov	r1, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4413      	add	r3, r2
 800154e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f005 fc32 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	015a      	lsls	r2, r3, #5
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4413      	add	r3, r2
 8001572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001576:	461a      	mov	r2, r3
 8001578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800157e:	e2a1      	b.n	8001ac4 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	015a      	lsls	r2, r3, #5
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4413      	add	r3, r2
 8001588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b01      	cmp	r3, #1
 8001594:	f040 80c3 	bne.w	800171e <HCD_HC_IN_IRQHandler+0x394>
    if (hhcd->Init.dma_enable != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01b      	beq.n	80015d8 <HCD_HC_IN_IRQHandler+0x24e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	3348      	adds	r3, #72	; 0x48
 80015b0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	0159      	lsls	r1, r3, #5
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	440b      	add	r3, r1
 80015ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015c4:	1ad1      	subs	r1, r2, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4403      	add	r3, r0
 80015d4:	334c      	adds	r3, #76	; 0x4c
 80015d6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	335d      	adds	r3, #93	; 0x5d
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3358      	adds	r3, #88	; 0x58
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4413      	add	r3, r2
 8001608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160c:	461a      	mov	r2, r3
 800160e:	2301      	movs	r3, #1
 8001610:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	333f      	adds	r3, #63	; 0x3f
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00a      	beq.n	800163e <HCD_HC_IN_IRQHandler+0x2b4>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	333f      	adds	r3, #63	; 0x3f
 8001638:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800163a:	2b02      	cmp	r3, #2
 800163c:	d122      	bne.n	8001684 <HCD_HC_IN_IRQHandler+0x2fa>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	015a      	lsls	r2, r3, #5
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4413      	add	r3, r2
 8001646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800164a:	4619      	mov	r1, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4413      	add	r3, r2
 8001654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f005 fbaf 	bl	8006dce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4413      	add	r3, r2
 8001678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800167c:	461a      	mov	r2, r3
 800167e:	2310      	movs	r3, #16
 8001680:	6093      	str	r3, [r2, #8]
 8001682:	e035      	b.n	80016f0 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	333f      	adds	r3, #63	; 0x3f
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d12a      	bne.n	80016f0 <HCD_HC_IN_IRQHandler+0x366>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a6:	4619      	mov	r1, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016ba:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	335c      	adds	r3, #92	; 0x5c
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	b2d8      	uxtb	r0, r3
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	335c      	adds	r3, #92	; 0x5c
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	4601      	mov	r1, r0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f008 fb12 	bl	8009d14 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3350      	adds	r3, #80	; 0x50
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	f083 0301 	eor.w	r3, r3, #1
 8001706:	b2d8      	uxtb	r0, r3
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	3350      	adds	r3, #80	; 0x50
 8001718:	4602      	mov	r2, r0
 800171a:	701a      	strb	r2, [r3, #0]
}
 800171c:	e1d2      	b.n	8001ac4 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4413      	add	r3, r2
 8001726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b02      	cmp	r3, #2
 8001732:	f040 80f2 	bne.w	800191a <HCD_HC_IN_IRQHandler+0x590>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4413      	add	r3, r2
 800173e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001742:	4619      	mov	r1, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	015a      	lsls	r2, r3, #5
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4413      	add	r3, r2
 800174c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f023 0302 	bic.w	r3, r3, #2
 8001756:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	335d      	adds	r3, #93	; 0x5d
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d10a      	bne.n	8001784 <HCD_HC_IN_IRQHandler+0x3fa>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	335c      	adds	r3, #92	; 0x5c
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e0b0      	b.n	80018e6 <HCD_HC_IN_IRQHandler+0x55c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	335d      	adds	r3, #93	; 0x5d
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10a      	bne.n	80017b0 <HCD_HC_IN_IRQHandler+0x426>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	335c      	adds	r3, #92	; 0x5c
 80017aa:	2205      	movs	r2, #5
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e09a      	b.n	80018e6 <HCD_HC_IN_IRQHandler+0x55c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	335d      	adds	r3, #93	; 0x5d
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d00a      	beq.n	80017dc <HCD_HC_IN_IRQHandler+0x452>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	335d      	adds	r3, #93	; 0x5d
 80017d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d156      	bne.n	800188a <HCD_HC_IN_IRQHandler+0x500>
      hhcd->hc[ch_num].ErrCnt++;
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3358      	adds	r3, #88	; 0x58
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	1c59      	adds	r1, r3, #1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4403      	add	r3, r0
 80017fe:	3358      	adds	r3, #88	; 0x58
 8001800:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	3358      	adds	r3, #88	; 0x58
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d914      	bls.n	8001842 <HCD_HC_IN_IRQHandler+0x4b8>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3358      	adds	r3, #88	; 0x58
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	335c      	adds	r3, #92	; 0x5c
 800183c:	2204      	movs	r2, #4
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e009      	b.n	8001856 <HCD_HC_IN_IRQHandler+0x4cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	335c      	adds	r3, #92	; 0x5c
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4413      	add	r3, r2
 800185e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800186c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001874:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4413      	add	r3, r2
 800187e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e02d      	b.n	80018e6 <HCD_HC_IN_IRQHandler+0x55c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	335d      	adds	r3, #93	; 0x5d
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d122      	bne.n	80018e6 <HCD_HC_IN_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	335c      	adds	r3, #92	; 0x5c
 80018b0:	2202      	movs	r2, #2
 80018b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e0:	461a      	mov	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	461a      	mov	r2, r3
 80018f4:	2302      	movs	r3, #2
 80018f6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	b2d8      	uxtb	r0, r3
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	335c      	adds	r3, #92	; 0x5c
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	4601      	mov	r1, r0
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f008 f9fe 	bl	8009d14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001918:	e0d4      	b.n	8001ac4 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192c:	2b80      	cmp	r3, #128	; 0x80
 800192e:	d13f      	bne.n	80019b0 <HCD_HC_IN_IRQHandler+0x626>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4413      	add	r3, r2
 8001938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193c:	4619      	mov	r1, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4413      	add	r3, r2
 8001946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	3358      	adds	r3, #88	; 0x58
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4403      	add	r3, r0
 8001974:	3358      	adds	r3, #88	; 0x58
 8001976:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	335d      	adds	r3, #93	; 0x5d
 8001988:	2206      	movs	r2, #6
 800198a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fa19 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a8:	461a      	mov	r2, r3
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	6093      	str	r3, [r2, #8]
}
 80019ae:	e089      	b.n	8001ac4 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d17e      	bne.n	8001ac4 <HCD_HC_IN_IRQHandler+0x73a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	333f      	adds	r3, #63	; 0x3f
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d123      	bne.n	8001a24 <HCD_HC_IN_IRQHandler+0x69a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3358      	adds	r3, #88	; 0x58
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fc:	4619      	mov	r1, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f005 f9d6 	bl	8006dce <USB_HC_Halt>
 8001a22:	e046      	b.n	8001ab2 <HCD_HC_IN_IRQHandler+0x728>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	333f      	adds	r3, #63	; 0x3f
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00a      	beq.n	8001a50 <HCD_HC_IN_IRQHandler+0x6c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	333f      	adds	r3, #63	; 0x3f
 8001a4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d130      	bne.n	8001ab2 <HCD_HC_IN_IRQHandler+0x728>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3358      	adds	r3, #88	; 0x58
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d122      	bne.n	8001ab2 <HCD_HC_IN_IRQHandler+0x728>
        hhcd->hc[ch_num].state = HC_NAK;
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	335d      	adds	r3, #93	; 0x5d
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 f98e 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	6093      	str	r3, [r2, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d11a      	bne.n	8001b32 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	015a      	lsls	r2, r3, #5
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b30:	e33c      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d142      	bne.n	8001bce <HCD_HC_OUT_IRQHandler+0x102>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b54:	461a      	mov	r2, r3
 8001b56:	2320      	movs	r3, #32
 8001b58:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	333d      	adds	r3, #61	; 0x3d
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	f040 831d 	bne.w	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
      hhcd->hc[ch_num].do_ping = 0U;
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	333d      	adds	r3, #61	; 0x3d
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	335c      	adds	r3, #92	; 0x5c
 8001b96:	2202      	movs	r2, #2
 8001b98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 f901 	bl	8006dce <USB_HC_Halt>
}
 8001bcc:	e2ee      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be0:	2b40      	cmp	r3, #64	; 0x40
 8001be2:	d140      	bne.n	8001c66 <HCD_HC_OUT_IRQHandler+0x19a>
    hhcd->hc[ch_num].state = HC_NYET;
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	335d      	adds	r3, #93	; 0x5d
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	333d      	adds	r3, #61	; 0x3d
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	3358      	adds	r3, #88	; 0x58
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 f8be 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2340      	movs	r3, #64	; 0x40
 8001c62:	6093      	str	r3, [r2, #8]
}
 8001c64:	e2a2      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c7c:	d123      	bne.n	8001cc6 <HCD_HC_OUT_IRQHandler+0x1fa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f005 f88f 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	015a      	lsls	r2, r3, #5
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc2:	6093      	str	r3, [r2, #8]
}
 8001cc4:	e272      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d136      	bne.n	8001d4a <HCD_HC_OUT_IRQHandler+0x27e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3358      	adds	r3, #88	; 0x58
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f005 f856 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2301      	movs	r3, #1
 8001d32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	335d      	adds	r3, #93	; 0x5d
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
}
 8001d48:	e230      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d12c      	bne.n	8001dba <HCD_HC_OUT_IRQHandler+0x2ee>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2308      	movs	r3, #8
 8001d70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	4619      	mov	r1, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 f815 	bl	8006dce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	335d      	adds	r3, #93	; 0x5d
 8001db4:	2205      	movs	r2, #5
 8001db6:	701a      	strb	r2, [r3, #0]
}
 8001db8:	e1f8      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d156      	bne.n	8001e7e <HCD_HC_OUT_IRQHandler+0x3b2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	3358      	adds	r3, #88	; 0x58
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	335d      	adds	r3, #93	; 0x5d
 8001df4:	2203      	movs	r2, #3
 8001df6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	333d      	adds	r3, #61	; 0x3d
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d114      	bne.n	8001e38 <HCD_HC_OUT_IRQHandler+0x36c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	440b      	add	r3, r1
 8001e1c:	333c      	adds	r3, #60	; 0x3c
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HCD_HC_OUT_IRQHandler+0x36c>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	333d      	adds	r3, #61	; 0x3d
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	4619      	mov	r1, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 ffb2 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	461a      	mov	r2, r3
 8001e78:	2310      	movs	r3, #16
 8001e7a:	6093      	str	r3, [r2, #8]
}
 8001e7c:	e196      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d12c      	bne.n	8001eee <HCD_HC_OUT_IRQHandler+0x422>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 ff84 	bl	8006dce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	335d      	adds	r3, #93	; 0x5d
 8001ed6:	2206      	movs	r2, #6
 8001ed8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	6093      	str	r3, [r2, #8]
}
 8001eec:	e15e      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f04:	d136      	bne.n	8001f74 <HCD_HC_OUT_IRQHandler+0x4a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	4619      	mov	r1, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 ff4b 	bl	8006dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2310      	movs	r3, #16
 8001f48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	461a      	mov	r2, r3
 8001f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	335d      	adds	r3, #93	; 0x5d
 8001f6e:	2208      	movs	r2, #8
 8001f70:	701a      	strb	r2, [r3, #0]
}
 8001f72:	e11b      	b.n	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	f040 8110 	bne.w	80021ac <HCD_HC_OUT_IRQHandler+0x6e0>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	4619      	mov	r1, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f023 0302 	bic.w	r3, r3, #2
 8001fac:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	335d      	adds	r3, #93	; 0x5d
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d12c      	bne.n	800201e <HCD_HC_OUT_IRQHandler+0x552>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	335c      	adds	r3, #92	; 0x5c
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK)
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	333f      	adds	r3, #63	; 0x3f
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	f040 80c5 	bne.w	800217a <HCD_HC_OUT_IRQHandler+0x6ae>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3351      	adds	r3, #81	; 0x51
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2d8      	uxtb	r0, r3
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	3351      	adds	r3, #81	; 0x51
 8002018:	4602      	mov	r2, r0
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e0ad      	b.n	800217a <HCD_HC_OUT_IRQHandler+0x6ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	335d      	adds	r3, #93	; 0x5d
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d10a      	bne.n	800204a <HCD_HC_OUT_IRQHandler+0x57e>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	335c      	adds	r3, #92	; 0x5c
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e097      	b.n	800217a <HCD_HC_OUT_IRQHandler+0x6ae>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	335d      	adds	r3, #93	; 0x5d
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d10a      	bne.n	8002076 <HCD_HC_OUT_IRQHandler+0x5aa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	335c      	adds	r3, #92	; 0x5c
 8002070:	2202      	movs	r2, #2
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e081      	b.n	800217a <HCD_HC_OUT_IRQHandler+0x6ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335d      	adds	r3, #93	; 0x5d
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d10a      	bne.n	80020a2 <HCD_HC_OUT_IRQHandler+0x5d6>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	335c      	adds	r3, #92	; 0x5c
 800209c:	2205      	movs	r2, #5
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e06b      	b.n	800217a <HCD_HC_OUT_IRQHandler+0x6ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	335d      	adds	r3, #93	; 0x5d
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d00a      	beq.n	80020ce <HCD_HC_OUT_IRQHandler+0x602>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	335d      	adds	r3, #93	; 0x5d
 80020c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d155      	bne.n	800217a <HCD_HC_OUT_IRQHandler+0x6ae>
      hhcd->hc[ch_num].ErrCnt++;
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	3358      	adds	r3, #88	; 0x58
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	1c59      	adds	r1, r3, #1
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4403      	add	r3, r0
 80020f0:	3358      	adds	r3, #88	; 0x58
 80020f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3358      	adds	r3, #88	; 0x58
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d914      	bls.n	8002134 <HCD_HC_OUT_IRQHandler+0x668>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	3358      	adds	r3, #88	; 0x58
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	335c      	adds	r3, #92	; 0x5c
 800212e:	2204      	movs	r2, #4
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e009      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x67c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	335c      	adds	r3, #92	; 0x5c
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800215e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002166:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	461a      	mov	r2, r3
 8002188:	2302      	movs	r3, #2
 800218a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	b2d8      	uxtb	r0, r3
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	4601      	mov	r1, r0
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f007 fdb4 	bl	8009d14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	0c5b      	lsrs	r3, r3, #17
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d003      	beq.n	80021f8 <HCD_RXQLVL_IRQHandler+0x44>
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	f000 8082 	beq.w	80022fa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80021f6:	e083      	b.n	8002300 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d07f      	beq.n	80022fe <HCD_RXQLVL_IRQHandler+0x14a>
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	3344      	adds	r3, #68	; 0x44
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d074      	beq.n	80022fe <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3344      	adds	r3, #68	; 0x44
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	b292      	uxth	r2, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f004 f9d1 	bl	80065d6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	3344      	adds	r3, #68	; 0x44
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	18d1      	adds	r1, r2, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4403      	add	r3, r0
 8002258:	3344      	adds	r3, #68	; 0x44
 800225a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	334c      	adds	r3, #76	; 0x4c
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	18d1      	adds	r1, r2, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4403      	add	r3, r0
 8002280:	334c      	adds	r3, #76	; 0x4c
 8002282:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HCD_RXQLVL_IRQHandler+0x154>)
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d031      	beq.n	80022fe <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	3350      	adds	r3, #80	; 0x50
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2d8      	uxtb	r0, r3
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	3350      	adds	r3, #80	; 0x50
 80022f4:	4602      	mov	r2, r0
 80022f6:	701a      	strb	r2, [r3, #0]
      break;
 80022f8:	e001      	b.n	80022fe <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80022fa:	bf00      	nop
 80022fc:	e000      	b.n	8002300 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80022fe:	bf00      	nop
  }
}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	1ff80000 	.word	0x1ff80000

0800230c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002338:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b02      	cmp	r3, #2
 8002342:	d113      	bne.n	800236c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d10a      	bne.n	8002364 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	6992      	ldr	r2, [r2, #24]
 8002358:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800235c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f007 fcbc 	bl	8009cdc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b08      	cmp	r3, #8
 8002374:	d148      	bne.n	8002408 <HCD_Port_IRQHandler+0xfc>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d129      	bne.n	80023dc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d113      	bne.n	80023b8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002396:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800239a:	d106      	bne.n	80023aa <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2102      	movs	r1, #2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f004 fa3c 	bl	8006820 <USB_InitFSLSPClkSel>
 80023a8:	e011      	b.n	80023ce <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2101      	movs	r1, #1
 80023b0:	4618      	mov	r0, r3
 80023b2:	f004 fa35 	bl	8006820 <USB_InitFSLSPClkSel>
 80023b6:	e00a      	b.n	80023ce <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d106      	bne.n	80023ce <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c6:	461a      	mov	r2, r3
 80023c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80023cc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f007 fcae 	bl	8009d30 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f007 fc81 	bl	8009cdc <HAL_HCD_Connect_Callback>
 80023da:	e015      	b.n	8002408 <HCD_Port_IRQHandler+0xfc>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f007 fcb5 	bl	8009d4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023e8:	461a      	mov	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023f6:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	6992      	ldr	r2, [r2, #24]
 8002402:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002406:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	2b20      	cmp	r3, #32
 8002410:	d103      	bne.n	800241a <HCD_Port_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f043 0320 	orr.w	r3, r3, #32
 8002418:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6013      	str	r3, [r2, #0]
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e080      	b.n	8002542 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d106      	bne.n	800245a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f006 fdcf 	bl	8008ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2224      	movs	r2, #36	; 0x24
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6852      	ldr	r2, [r2, #4]
 800247a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	6892      	ldr	r2, [r2, #8]
 800248a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800248e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	e006      	b.n	80024b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6892      	ldr	r2, [r2, #8]
 80024b0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d104      	bne.n	80024c8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024da:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	68d2      	ldr	r2, [r2, #12]
 80024e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6911      	ldr	r1, [r2, #16]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6952      	ldr	r2, [r2, #20]
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6992      	ldr	r2, [r2, #24]
 80024fe:	0212      	lsls	r2, r2, #8
 8002500:	430a      	orrs	r2, r1
 8002502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	69d1      	ldr	r1, [r2, #28]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6a12      	ldr	r2, [r2, #32]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b20      	cmp	r3, #32
 800255e:	d138      	bne.n	80025d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800256a:	2302      	movs	r3, #2
 800256c:	e032      	b.n	80025d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2224      	movs	r2, #36	; 0x24
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800259c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	6811      	ldr	r1, [r2, #0]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d139      	bne.n	800266a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002600:	2302      	movs	r3, #2
 8002602:	e033      	b.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002632:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param  hlcd: LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
  uint32_t counter = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]

  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_LCD_Init+0x1a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0a8      	b.n	80027e4 <HAL_LCD_Init+0x16c>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if(hlcd->State == HAL_LCD_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_LCD_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f006 fd52 	bl	8009150 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e00a      	b.n	80026e0 <HAL_LCD_Init+0x68>
  {
    hlcd->Instance->RAM[counter] = 0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3304      	adds	r3, #4
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	2200      	movs	r2, #0
 80026d8:	605a      	str	r2, [r3, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3301      	adds	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	d9f1      	bls.n	80026ca <HAL_LCD_Init+0x52>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	6892      	ldr	r2, [r2, #8]
 80026f0:	f042 0204 	orr.w	r2, r2, #4
 80026f4:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
   MODIFY_REG(hlcd->Instance->FCR, \
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_LCD_Init+0x174>)
 8002702:	400b      	ands	r3, r1
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	6848      	ldr	r0, [r1, #4]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	6889      	ldr	r1, [r1, #8]
 800270c:	4308      	orrs	r0, r1
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8002712:	4308      	orrs	r0, r1
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002718:	4308      	orrs	r0, r1
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	69c9      	ldr	r1, [r1, #28]
 800271e:	4308      	orrs	r0, r1
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	6a09      	ldr	r1, [r1, #32]
 8002724:	4308      	orrs	r0, r1
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	6989      	ldr	r1, [r1, #24]
 800272a:	4308      	orrs	r0, r1
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002730:	4301      	orrs	r1, r0
 8002732:	430b      	orrs	r3, r1
 8002734:	6053      	str	r3, [r2, #4]
       hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f85a 	bl	80027f0 <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	f022 01fe 	bic.w	r1, r2, #254	; 0xfe
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68d0      	ldr	r0, [r2, #12]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6912      	ldr	r2, [r2, #16]
 8002752:	4310      	orrs	r0, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6952      	ldr	r2, [r2, #20]
 8002758:	4310      	orrs	r0, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800275e:	4302      	orrs	r2, r0
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]
    (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
    (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002774:	f7fd ff02 	bl	800057c <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]

  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800277a:	e00c      	b.n	8002796 <HAL_LCD_Init+0x11e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 800277c:	f7fd fefe 	bl	800057c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278a:	d904      	bls.n	8002796 <HAL_LCD_Init+0x11e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2208      	movs	r2, #8
 8002790:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e026      	b.n	80027e4 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d1eb      	bne.n	800277c <HAL_LCD_Init+0x104>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80027a4:	f7fd feea 	bl	800057c <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]

  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80027aa:	e00c      	b.n	80027c6 <HAL_LCD_Init+0x14e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80027ac:	f7fd fee6 	bl	800057c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ba:	d904      	bls.n	80027c6 <HAL_LCD_Init+0x14e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2210      	movs	r2, #16
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e00e      	b.n	80027e4 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d1eb      	bne.n	80027ac <HAL_LCD_Init+0x134>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	fc00000e 	.word	0xfc00000e

080027f0 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80027fc:	f7fd febe 	bl	800057c <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002802:	e00c      	b.n	800281e <LCD_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8002804:	f7fd feba 	bl	800057c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002812:	d904      	bls.n	800281e <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e007      	b.n	800282e <LCD_WaitForSynchro+0x3e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b20      	cmp	r3, #32
 800282a:	d1eb      	bne.n	8002804 <LCD_WaitForSynchro+0x14>
    }
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800283c:	4a05      	ldr	r2, [pc, #20]	; (8002854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40007000 	.word	0x40007000

08002858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_PWREx_GetVoltageRange+0x18>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40007000 	.word	0x40007000

08002874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002882:	d130      	bne.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002884:	4b23      	ldr	r3, [pc, #140]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800288c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002890:	d038      	beq.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002892:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800289c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2232      	movs	r2, #50	; 0x32
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	3301      	adds	r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b8:	e002      	b.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3b01      	subs	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028cc:	d102      	bne.n	80028d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f2      	bne.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e0:	d110      	bne.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e00f      	b.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d007      	beq.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40007000 	.word	0x40007000
 8002918:	20000020 	.word	0x20000020
 800291c:	431bde83 	.word	0x431bde83

08002920 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002924:	4a05      	ldr	r2, [pc, #20]	; (800293c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800292e:	6053      	str	r3, [r2, #4]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40007000 	.word	0x40007000

08002940 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af02      	add	r7, sp, #8
 8002946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7fd fe18 	bl	800057c <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e06f      	b.n	8002a38 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_QSPI_Init+0x28>
 8002964:	2302      	movs	r3, #2
 8002966:	e067      	b.n	8002a38 <HAL_QSPI_Init+0xf8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f006 fde9 	bl	800955c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800298a:	f241 3188 	movw	r1, #5000	; 0x1388
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f858 	bl	8002a44 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6892      	ldr	r2, [r2, #8]
 80029a6:	3a01      	subs	r2, #1
 80029a8:	0212      	lsls	r2, r2, #8
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2120      	movs	r1, #32
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f850 	bl	8002a60 <QSPI_WaitFlagStateUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d131      	bne.n	8002a2e <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029d8:	f023 0310 	bic.w	r3, r3, #16
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	6849      	ldr	r1, [r1, #4]
 80029e0:	0608      	lsls	r0, r1, #24
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68c9      	ldr	r1, [r1, #12]
 80029e6:	4301      	orrs	r1, r0
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_QSPI_Init+0x100>)
 80029f8:	400b      	ands	r3, r1
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	6909      	ldr	r1, [r1, #16]
 80029fe:	0408      	lsls	r0, r1, #16
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	6949      	ldr	r1, [r1, #20]
 8002a04:	4308      	orrs	r0, r1
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	6989      	ldr	r1, [r1, #24]
 8002a0a:	4301      	orrs	r1, r0
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002a36:	7afb      	ldrb	r3, [r7, #11]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	ffe0f8fe 	.word	0xffe0f8fe

08002a44 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a70:	e01a      	b.n	8002aa8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d016      	beq.n	8002aa8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7fd fd7f 	bl	800057c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d802      	bhi.n	8002a90 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2204      	movs	r2, #4
 8002a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e00e      	b.n	8002ac6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf14      	ite	ne
 8002ab6:	2301      	movne	r3, #1
 8002ab8:	2300      	moveq	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1d6      	bne.n	8002a72 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e353      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae2:	4ba3      	ldr	r3, [pc, #652]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aec:	4ba0      	ldr	r3, [pc, #640]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80df 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_RCC_OscConfig+0x4a>
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	f040 8086 	bne.w	8002c1e <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f040 8082 	bne.w	8002c1e <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b1a:	4b95      	ldr	r3, [pc, #596]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_RCC_OscConfig+0x62>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e32b      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1a      	ldr	r2, [r3, #32]
 8002b36:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <HAL_RCC_OscConfig+0x7c>
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4a:	e005      	b.n	8002b58 <HAL_RCC_OscConfig+0x88>
 8002b4c:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d923      	bls.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fccb 	bl	80034fc <RCC_SetFlashLatencyFromMSIRange>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e30c      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b70:	4a7f      	ldr	r2, [pc, #508]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b72:	4b7f      	ldr	r3, [pc, #508]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	497c      	ldr	r1, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b7e:	4b7c      	ldr	r3, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8e:	4978      	ldr	r1, [pc, #480]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b90:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
 8002ba2:	e022      	b.n	8002bea <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba4:	4a72      	ldr	r2, [pc, #456]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002ba6:	4b72      	ldr	r3, [pc, #456]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	496f      	ldr	r1, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc2:	496b      	ldr	r1, [pc, #428]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002bc4:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fc8e 	bl	80034fc <RCC_SetFlashLatencyFromMSIRange>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e2cf      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bea:	f000 fbb3 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8002bee:	4601      	mov	r1, r0
 8002bf0:	4b5f      	ldr	r3, [pc, #380]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	4a5e      	ldr	r2, [pc, #376]	; (8002d74 <HAL_RCC_OscConfig+0x2a4>)
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	fa21 f303 	lsr.w	r3, r1, r3
 8002c06:	4a5c      	ldr	r2, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x2a8>)
 8002c08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd fc84 	bl	8000518 <HAL_InitTick>
 8002c10:	4603      	mov	r3, r0
 8002c12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d052      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	e2b5      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d032      	beq.n	8002c8c <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c26:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c28:	4b51      	ldr	r3, [pc, #324]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c32:	f7fd fca3 	bl	800057c <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c3a:	f7fd fc9f 	bl	800057c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e29e      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c4c:	4b48      	ldr	r3, [pc, #288]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c58:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c5a:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f043 0308 	orr.w	r3, r3, #8
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4942      	ldr	r1, [pc, #264]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c66:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c76:	493e      	ldr	r1, [pc, #248]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c78:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
 8002c8a:	e01a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c8c:	4a38      	ldr	r2, [pc, #224]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c98:	f7fd fc70 	bl	800057c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca0:	f7fd fc6c 	bl	800057c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e26b      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1d0>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d072      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x210>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d062      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2e2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d15e      	bne.n	8002db2 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e248      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0x240>
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0x27c>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x264>
 8002d1a:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0x27c>
 8002d34:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x2a0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01a      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fd fc12 	bl	800057c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5a:	e00f      	b.n	8002d7c <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fd fc0e 	bl	800057c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d908      	bls.n	8002d7c <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e20d      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	0800a3c0 	.word	0x0800a3c0
 8002d78:	20000020 	.word	0x20000020
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7c:	4bae      	ldr	r3, [pc, #696]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0e9      	beq.n	8002d5c <HAL_RCC_OscConfig+0x28c>
 8002d88:	e014      	b.n	8002db4 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fd fbf7 	bl	800057c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d92:	f7fd fbf3 	bl	800057c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b64      	cmp	r3, #100	; 0x64
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1f2      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da4:	4ba4      	ldr	r3, [pc, #656]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2c2>
 8002db0:	e000      	b.n	8002db4 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d060      	beq.n	8002e82 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d005      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x302>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	d119      	bne.n	8002e00 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd2:	4b99      	ldr	r3, [pc, #612]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x31a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1cf      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4993      	ldr	r1, [pc, #588]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002dec:	4b92      	ldr	r3, [pc, #584]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfe:	e040      	b.n	8002e82 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d023      	beq.n	8002e50 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4a8b      	ldr	r2, [pc, #556]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e0a:	4b8b      	ldr	r3, [pc, #556]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fd fbb2 	bl	800057c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fd fbae 	bl	800057c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1ad      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e2e:	4b82      	ldr	r3, [pc, #520]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	497f      	ldr	r1, [pc, #508]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e3c:	4b7e      	ldr	r3, [pc, #504]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
 8002e4e:	e018      	b.n	8002e82 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e50:	4a79      	ldr	r2, [pc, #484]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e52:	4b79      	ldr	r3, [pc, #484]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fd fb8e 	bl	800057c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fd fb8a 	bl	800057c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e189      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e76:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03c      	beq.n	8002f08 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01c      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4a68      	ldr	r2, [pc, #416]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e98:	4b67      	ldr	r3, [pc, #412]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fd fb69 	bl	800057c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fd fb65 	bl	800057c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e164      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ec0:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0ef      	beq.n	8002eae <HAL_RCC_OscConfig+0x3de>
 8002ece:	e01b      	b.n	8002f08 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed0:	4a59      	ldr	r2, [pc, #356]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002ed2:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fd fb4c 	bl	800057c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fd fb48 	bl	800057c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e147      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002efa:	4b4f      	ldr	r3, [pc, #316]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ef      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a5 	beq.w	8003060 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4a44      	ldr	r2, [pc, #272]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002f28:	4b43      	ldr	r3, [pc, #268]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6593      	str	r3, [r2, #88]	; 0x58
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_OscConfig+0x56c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x56c>)
 8002f50:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_RCC_OscConfig+0x56c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fd fb0f 	bl	800057c <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fd fb0b 	bl	800057c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e10a      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_OscConfig+0x56c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d108      	bne.n	8002f9a <HAL_RCC_OscConfig+0x4ca>
 8002f88:	4a2b      	ldr	r2, [pc, #172]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f98:	e024      	b.n	8002fe4 <HAL_RCC_OscConfig+0x514>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d110      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4f4>
 8002fa2:	4a25      	ldr	r2, [pc, #148]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb2:	4a21      	ldr	r2, [pc, #132]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002fb4:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc2:	e00f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x514>
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d016      	beq.n	800301a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fd fac6 	bl	800057c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fd fac2 	bl	800057c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0bf      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x568>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ed      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x524>
 8003018:	e019      	b.n	800304e <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fd faaf 	bl	800057c <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003020:	e00e      	b.n	8003040 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fd faab 	bl	800057c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d905      	bls.n	8003040 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0a8      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003040:	4b54      	ldr	r3, [pc, #336]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e9      	bne.n	8003022 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4a4f      	ldr	r2, [pc, #316]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 8003056:	4b4f      	ldr	r3, [pc, #316]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 808f 	beq.w	8003188 <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b0c      	cmp	r3, #12
 800306e:	f000 8089 	beq.w	8003184 <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	2b02      	cmp	r3, #2
 8003078:	d156      	bne.n	8003128 <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4a46      	ldr	r2, [pc, #280]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 800307c:	4b45      	ldr	r3, [pc, #276]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fd fa79 	bl	800057c <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308e:	f7fd fa75 	bl	800057c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e074      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a0:	4b3c      	ldr	r3, [pc, #240]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ac:	4939      	ldr	r1, [pc, #228]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	3b01      	subs	r3, #1
 80030b4:	011a      	lsls	r2, r3, #4
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	045b      	lsls	r3, r3, #17
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	3b01      	subs	r3, #1
 80030d6:	055b      	lsls	r3, r3, #21
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	3b01      	subs	r3, #1
 80030e2:	065b      	lsls	r3, r3, #25
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 80030f6:	4b27      	ldr	r3, [pc, #156]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003100:	f7fd fa3c 	bl	800057c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003108:	f7fd fa38 	bl	800057c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e037      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311a:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x638>
 8003126:	e02f      	b.n	8003188 <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 800312a:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003132:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003134:	4b17      	ldr	r3, [pc, #92]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fd fa0e 	bl	800057c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd fa0a 	bl	800057c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e009      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCC_OscConfig+0x6c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x694>
 8003182:	e001      	b.n	8003188 <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0c6      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_RCC_ClockConfig+0x1ac>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0207 	and.w	r2, r3, #7
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d210      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4962      	ldr	r1, [pc, #392]	; (8003344 <HAL_RCC_ClockConfig+0x1ac>)
 80031bc:	4b61      	ldr	r3, [pc, #388]	; (8003344 <HAL_RCC_ClockConfig+0x1ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 0207 	bic.w	r2, r3, #7
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b5e      	ldr	r3, [pc, #376]	; (8003344 <HAL_RCC_ClockConfig+0x1ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0207 	and.w	r2, r3, #7
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0ae      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d04c      	beq.n	8003282 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f0:	4b55      	ldr	r3, [pc, #340]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d121      	bne.n	8003240 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e09c      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003208:	4b4f      	ldr	r3, [pc, #316]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d115      	bne.n	8003240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e090      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d107      	bne.n	8003230 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003220:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e084      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003230:	4b45      	ldr	r3, [pc, #276]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e07c      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003240:	4941      	ldr	r1, [pc, #260]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003252:	f7fd f993 	bl	800057c <HAL_GetTick>
 8003256:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003258:	e00a      	b.n	8003270 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325a:	f7fd f98f 	bl	800057c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e064      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003270:	4b35      	ldr	r3, [pc, #212]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 020c 	and.w	r2, r3, #12
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	429a      	cmp	r2, r3
 8003280:	d1eb      	bne.n	800325a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328e:	492e      	ldr	r1, [pc, #184]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a0:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_RCC_ClockConfig+0x1ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0207 	and.w	r2, r3, #7
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d910      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4925      	ldr	r1, [pc, #148]	; (8003344 <HAL_RCC_ClockConfig+0x1ac>)
 80032b0:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCC_ClockConfig+0x1ac>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 0207 	bic.w	r2, r3, #7
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCC_ClockConfig+0x1ac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0207 	and.w	r2, r3, #7
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e034      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	491a      	ldr	r1, [pc, #104]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4913      	ldr	r1, [pc, #76]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4601      	mov	r1, r0
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	fa21 f303 	lsr.w	r3, r1, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800332e:	2000      	movs	r0, #0
 8003330:	f7fd f8f2 	bl	8000518 <HAL_InitTick>
 8003334:	4603      	mov	r3, r0
 8003336:	72fb      	strb	r3, [r7, #11]

  return status;
 8003338:	7afb      	ldrb	r3, [r7, #11]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	0800a3c0 	.word	0x0800a3c0
 8003350:	20000020 	.word	0x20000020

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336c:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x34>
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d121      	bne.n	80033c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d11e      	bne.n	80033c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003388:	4b3c      	ldr	r3, [pc, #240]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003394:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e005      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033a4:	4b35      	ldr	r3, [pc, #212]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b0:	4a33      	ldr	r2, [pc, #204]	; (8003480 <HAL_RCC_GetSysClockFreq+0x12c>)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10d      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033cc:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_GetSysClockFreq+0x130>)
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e004      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_RCC_GetSysClockFreq+0x134>)
 80033da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	d145      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	3301      	adds	r3, #1
 80033f8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d002      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0xb2>
 8003400:	2b03      	cmp	r3, #3
 8003402:	d00d      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0xcc>
 8003404:	e019      	b.n	800343a <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003406:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_RCC_GetSysClockFreq+0x130>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 8003410:	68d2      	ldr	r2, [r2, #12]
 8003412:	0a12      	lsrs	r2, r2, #8
 8003414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
      break;
 800341e:	e019      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_RCC_GetSysClockFreq+0x134>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 800342a:	68d2      	ldr	r2, [r2, #12]
 800342c:	0a12      	lsrs	r2, r2, #8
 800342e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	617b      	str	r3, [r7, #20]
      break;
 8003438:	e00c      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	0a12      	lsrs	r2, r2, #8
 8003448:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
      break;
 8003452:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_GetSysClockFreq+0x128>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0e5b      	lsrs	r3, r3, #25
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800346e:	69bb      	ldr	r3, [r7, #24]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3724      	adds	r7, #36	; 0x24
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40021000 	.word	0x40021000
 8003480:	0800a3d8 	.word	0x0800a3d8
 8003484:	00f42400 	.word	0x00f42400
 8003488:	007a1200 	.word	0x007a1200

0800348c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000020 	.word	0x20000020

080034a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034a8:	f7ff fff0 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034ac:	4601      	mov	r1, r0
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	0800a3d0 	.word	0x0800a3d0

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034d4:	f7ff ffda 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034d8:	4601      	mov	r1, r0
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0adb      	lsrs	r3, r3, #11
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	0800a3d0 	.word	0x0800a3d0

080034fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003514:	f7ff f9a0 	bl	8002858 <HAL_PWREx_GetVoltageRange>
 8003518:	6178      	str	r0, [r7, #20]
 800351a:	e014      	b.n	8003546 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800351c:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351e:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003526:	6593      	str	r3, [r2, #88]	; 0x58
 8003528:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003534:	f7ff f990 	bl	8002858 <HAL_PWREx_GetVoltageRange>
 8003538:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d10b      	bne.n	8003566 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d919      	bls.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2ba0      	cmp	r3, #160	; 0xa0
 8003558:	d902      	bls.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800355a:	2302      	movs	r3, #2
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	e013      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003560:	2301      	movs	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e010      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d902      	bls.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800356c:	2303      	movs	r3, #3
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e00a      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d102      	bne.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003578:	2302      	movs	r3, #2
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	e004      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b70      	cmp	r3, #112	; 0x70
 8003582:	d101      	bne.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003584:	2301      	movs	r3, #1
 8003586:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003588:	490b      	ldr	r1, [pc, #44]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0207 	bic.w	r2, r3, #7
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0207 	and.w	r2, r3, #7
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d001      	beq.n	80035aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40022000 	.word	0x40022000

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c4:	2300      	movs	r3, #0
 80035c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d03f      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e0:	d01c      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80035e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e6:	d802      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80035ec:	e01f      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80035ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f2:	d003      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80035f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035f8:	d01c      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80035fa:	e018      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035fc:	4a85      	ldr	r2, [pc, #532]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035fe:	4b85      	ldr	r3, [pc, #532]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003606:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003608:	e015      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f000 ff41 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800361a:	e00c      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3320      	adds	r3, #32
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f001 f828 	bl	8004678 <RCCEx_PLLSAI2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362c:	e003      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	74fb      	strb	r3, [r7, #19]
      break;
 8003632:	e000      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800363c:	4975      	ldr	r1, [pc, #468]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800363e:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003652:	e001      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d03f      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800366c:	d01c      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800366e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003672:	d802      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003678:	e01f      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800367a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800367e:	d003      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003680:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003684:	d01c      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003686:	e018      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003688:	4a62      	ldr	r2, [pc, #392]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800368a:	4b62      	ldr	r3, [pc, #392]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003692:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003694:	e015      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fefb 	bl	8004498 <RCCEx_PLLSAI1_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036a6:	e00c      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3320      	adds	r3, #32
 80036ac:	2100      	movs	r1, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 ffe2 	bl	8004678 <RCCEx_PLLSAI2_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036b8:	e003      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	74fb      	strb	r3, [r7, #19]
      break;
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036c8:	4952      	ldr	r1, [pc, #328]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ca:	4b52      	ldr	r3, [pc, #328]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036de:	e001      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a0 	beq.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003706:	2300      	movs	r3, #0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370c:	4a41      	ldr	r2, [pc, #260]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800370e:	4b41      	ldr	r3, [pc, #260]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003716:	6593      	str	r3, [r2, #88]	; 0x58
 8003718:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003724:	2301      	movs	r3, #1
 8003726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003728:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800372a:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003734:	f7fc ff22 	bl	800057c <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800373a:	e009      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373c:	f7fc ff1e 	bl	800057c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d902      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	74fb      	strb	r3, [r7, #19]
        break;
 800374e:	e005      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ef      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d15c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003762:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01f      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	429a      	cmp	r2, r3
 800377e:	d019      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800378c:	4a21      	ldr	r2, [pc, #132]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fc fedd 	bl	800057c <HAL_GetTick>
 80037c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c4:	e00b      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fc fed9 	bl	800057c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d902      	bls.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	74fb      	strb	r3, [r7, #19]
            break;
 80037dc:	e006      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ec      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f2:	4908      	ldr	r1, [pc, #32]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800380a:	e009      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	74bb      	strb	r3, [r7, #18]
 8003810:	e006      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003820:	7c7b      	ldrb	r3, [r7, #17]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4a9e      	ldr	r2, [pc, #632]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003828:	4b9d      	ldr	r3, [pc, #628]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003830:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383e:	4998      	ldr	r1, [pc, #608]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003840:	4b97      	ldr	r3, [pc, #604]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003860:	498f      	ldr	r1, [pc, #572]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003862:	4b8f      	ldr	r3, [pc, #572]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f023 020c 	bic.w	r2, r3, #12
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003882:	4987      	ldr	r1, [pc, #540]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003884:	4b86      	ldr	r3, [pc, #536]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a4:	497e      	ldr	r1, [pc, #504]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a6:	4b7e      	ldr	r3, [pc, #504]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038c6:	4976      	ldr	r1, [pc, #472]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c8:	4b75      	ldr	r3, [pc, #468]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038e8:	496d      	ldr	r1, [pc, #436]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ea:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800390a:	4965      	ldr	r1, [pc, #404]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390c:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800392c:	495c      	ldr	r1, [pc, #368]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800392e:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800394e:	4954      	ldr	r1, [pc, #336]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003970:	494b      	ldr	r1, [pc, #300]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003972:	4b4b      	ldr	r3, [pc, #300]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003992:	4943      	ldr	r1, [pc, #268]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d028      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b4:	493a      	ldr	r1, [pc, #232]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b6:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d4:	4a32      	ldr	r2, [pc, #200]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d6:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039de:	60d3      	str	r3, [r2, #12]
 80039e0:	e011      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fd50 	bl	8004498 <RCCEx_PLLSAI1_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d028      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a12:	4923      	ldr	r1, [pc, #140]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a14:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a32:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a34:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3c:	60d3      	str	r3, [r2, #12]
 8003a3e:	e011      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fd21 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d02b      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a70:	490b      	ldr	r1, [pc, #44]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a90:	4a03      	ldr	r2, [pc, #12]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a92:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9a:	60d3      	str	r3, [r2, #12]
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fcef 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02f      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad4:	492b      	ldr	r1, [pc, #172]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad6:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2102      	movs	r1, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fccc 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d014      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	74bb      	strb	r3, [r7, #18]
 8003b0e:	e011      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3320      	adds	r3, #32
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fda9 	bl	8004678 <RCCEx_PLLSAI2_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b2a:	7cfb      	ldrb	r3, [r7, #19]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b40:	4910      	ldr	r1, [pc, #64]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b9a:	d137      	bne.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003b9c:	4bb8      	ldr	r3, [pc, #736]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	617b      	str	r3, [r7, #20]

    switch(srcclk)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bae:	d014      	beq.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb4:	d01e      	beq.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003bbc:	f000 bc53 	b.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003bc0:	4baf      	ldr	r3, [pc, #700]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	f040 8446 	bne.w	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8003bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd4:	61fb      	str	r3, [r7, #28]
      break;
 8003bd6:	f000 bc41 	b.w	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003bda:	4ba9      	ldr	r3, [pc, #676]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	f040 843b 	bne.w	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
        frequency = LSI_VALUE;
 8003bea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003bee:	61fb      	str	r3, [r7, #28]
      break;
 8003bf0:	f000 bc36 	b.w	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bf4:	4ba2      	ldr	r3, [pc, #648]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c00:	f040 8430 	bne.w	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8003c04:	4b9f      	ldr	r3, [pc, #636]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c06:	61fb      	str	r3, [r7, #28]
      break;
 8003c08:	f000 bc2c 	b.w	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c0c:	4b9c      	ldr	r3, [pc, #624]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d023      	beq.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d02e      	beq.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d139      	bne.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c24:	4b96      	ldr	r3, [pc, #600]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d116      	bne.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c30:	4b93      	ldr	r3, [pc, #588]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8003c3c:	4b90      	ldr	r3, [pc, #576]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	e005      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8003c48:	4b8d      	ldr	r3, [pc, #564]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	4a8c      	ldr	r2, [pc, #560]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003c5c:	e01f      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
      break;
 8003c62:	e01c      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c64:	4b86      	ldr	r3, [pc, #536]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d102      	bne.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8003c72:	4b86      	ldr	r3, [pc, #536]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003c74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003c76:	e012      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
      break;
 8003c7c:	e00f      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c7e:	4b80      	ldr	r3, [pc, #512]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8003c8c:	4b80      	ldr	r3, [pc, #512]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003c8e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003c90:	e005      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
      break;
 8003c9c:	bf00      	nop
    }

    switch(PeriphClk)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca4:	f000 8337 	beq.w	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8003ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cac:	d825      	bhi.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	f000 81df 	beq.w	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d80f      	bhi.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	f000 8128 	beq.w	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d803      	bhi.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f000 80ec 	beq.w	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003cc8:	e3cd      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	f000 8169 	beq.w	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	f000 819a 	beq.w	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8003cd6:	e3c6      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	f000 82b3 	beq.w	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d803      	bhi.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	f000 81fd 	beq.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8003ce8:	e3bd      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003cea:	2b80      	cmp	r3, #128	; 0x80
 8003cec:	f000 82cd 	beq.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf4:	f000 82ec 	beq.w	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8003cf8:	e3b5      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfe:	f000 822d 	beq.w	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8003d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d06:	d811      	bhi.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0c:	d021      	beq.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8003d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d12:	d804      	bhi.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	f000 833e 	beq.w	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8003d1c:	e3a3      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	d01d      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d28:	d021      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003d2a:	e39c      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d30:	f000 8277 	beq.w	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d804      	bhi.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3e:	f000 8371 	beq.w	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8003d42:	e390      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d48:	d011      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d4e:	d00e      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003d50:	e389      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003d52:	69b9      	ldr	r1, [r7, #24]
 8003d54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d58:	f000 fd68 	bl	800482c <RCCEx_GetSAIxPeriphCLKFreq>
 8003d5c:	61f8      	str	r0, [r7, #28]
      break;
 8003d5e:	e382      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003d60:	69b9      	ldr	r1, [r7, #24]
 8003d62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d66:	f000 fd61 	bl	800482c <RCCEx_GetSAIxPeriphCLKFreq>
 8003d6a:	61f8      	str	r0, [r7, #28]
      break;
 8003d6c:	e37b      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003d6e:	4b44      	ldr	r3, [pc, #272]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003d78:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d80:	d023      	beq.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8003d82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d86:	d003      	beq.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d8c:	d04a      	beq.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8003d8e:	e086      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d17b      	bne.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8003da8:	4b35      	ldr	r3, [pc, #212]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	e005      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003db4:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	4a31      	ldr	r2, [pc, #196]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc6:	61fb      	str	r3, [r7, #28]
          break;
 8003dc8:	e064      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003dca:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dd6:	d15f      	bne.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003dd8:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de4:	d158      	bne.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	3301      	adds	r3, #1
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003dfa:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e04:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	fb02 f203 	mul.w	r2, r2, r3
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	0d5b      	lsrs	r3, r3, #21
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	61fb      	str	r3, [r7, #28]
          break;
 8003e22:	e039      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e30:	d134      	bne.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3e:	d12d      	bne.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5e:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	fb02 f203 	mul.w	r2, r2, r3
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	0d5b      	lsrs	r3, r3, #21
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	3301      	adds	r3, #1
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	61fb      	str	r3, [r7, #28]
          break;
 8003e7c:	e00e      	b.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	0003d090 	.word	0x0003d090
 8003e88:	0800a3d8 	.word	0x0800a3d8
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200
          break;
 8003e94:	bf00      	nop
 8003e96:	e2e6      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003e98:	bf00      	nop
 8003e9a:	e2e4      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003e9c:	bf00      	nop
        break;
 8003e9e:	e2e2      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003ea0:	4bac      	ldr	r3, [pc, #688]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d827      	bhi.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003ed1 	.word	0x08003ed1
 8003ec0:	08003ed9 	.word	0x08003ed9
 8003ec4:	08003eed 	.word	0x08003eed
          frequency = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7ff fb02 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
          break;
 8003ece:	e01d      	b.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ed0:	f7ff fa40 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003ed4:	61f8      	str	r0, [r7, #28]
          break;
 8003ed6:	e019      	b.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ed8:	4b9e      	ldr	r3, [pc, #632]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee4:	d10f      	bne.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8003ee6:	4b9c      	ldr	r3, [pc, #624]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003ee8:	61fb      	str	r3, [r7, #28]
          break;
 8003eea:	e00c      	b.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003eec:	4b99      	ldr	r3, [pc, #612]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8003efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003efe:	61fb      	str	r3, [r7, #28]
          break;
 8003f00:	e003      	b.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8003f02:	bf00      	nop
 8003f04:	e2af      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f06:	bf00      	nop
 8003f08:	e2ad      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f0a:	bf00      	nop
        break;
 8003f0c:	e2ab      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003f0e:	4b91      	ldr	r3, [pc, #580]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	d83a      	bhi.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08003f97 	.word	0x08003f97
 8003f30:	08003f97 	.word	0x08003f97
 8003f34:	08003f97 	.word	0x08003f97
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f97 	.word	0x08003f97
 8003f40:	08003f97 	.word	0x08003f97
 8003f44:	08003f97 	.word	0x08003f97
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f97 	.word	0x08003f97
 8003f50:	08003f97 	.word	0x08003f97
 8003f54:	08003f97 	.word	0x08003f97
 8003f58:	08003f81 	.word	0x08003f81
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7ff faa2 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8003f60:	61f8      	str	r0, [r7, #28]
          break;
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f64:	f7ff f9f6 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003f68:	61f8      	str	r0, [r7, #28]
          break;
 8003f6a:	e019      	b.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f6c:	4b79      	ldr	r3, [pc, #484]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d10f      	bne.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8003f7a:	4b77      	ldr	r3, [pc, #476]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003f7c:	61fb      	str	r3, [r7, #28]
          break;
 8003f7e:	e00c      	b.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f80:	4b74      	ldr	r3, [pc, #464]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	61fb      	str	r3, [r7, #28]
          break;
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8003f96:	bf00      	nop
 8003f98:	e265      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f9a:	bf00      	nop
 8003f9c:	e263      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f9e:	bf00      	nop
        break;
 8003fa0:	e261      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003fa2:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fac:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d802      	bhi.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8003fbc:	e024      	b.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d012      	beq.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8003fc6:	e01f      	b.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7ff fa6c 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	61f8      	str	r0, [r7, #28]
          break;
 8003fce:	e01b      	b.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fd0:	f7ff f9c0 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003fd4:	61f8      	str	r0, [r7, #28]
          break;
 8003fd6:	e017      	b.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fd8:	4b5e      	ldr	r3, [pc, #376]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe4:	d10d      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003fe8:	61fb      	str	r3, [r7, #28]
          break;
 8003fea:	e00a      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fec:	4b59      	ldr	r3, [pc, #356]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d105      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffe:	61fb      	str	r3, [r7, #28]
          break;
 8004000:	e001      	b.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004002:	bf00      	nop
 8004004:	e22f      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004006:	bf00      	nop
        break;
 8004008:	e22d      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800400a:	4b52      	ldr	r3, [pc, #328]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004014:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d00d      	beq.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d802      	bhi.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8004024:	e024      	b.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800402a:	2bc0      	cmp	r3, #192	; 0xc0
 800402c:	d012      	beq.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 800402e:	e01f      	b.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004030:	f7ff fa38 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8004034:	61f8      	str	r0, [r7, #28]
          break;
 8004036:	e01b      	b.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004038:	f7ff f98c 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 800403c:	61f8      	str	r0, [r7, #28]
          break;
 800403e:	e017      	b.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004040:	4b44      	ldr	r3, [pc, #272]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404c:	d10d      	bne.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 800404e:	4b42      	ldr	r3, [pc, #264]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004050:	61fb      	str	r3, [r7, #28]
          break;
 8004052:	e00a      	b.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004054:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d105      	bne.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	61fb      	str	r3, [r7, #28]
          break;
 8004068:	e001      	b.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 800406a:	bf00      	nop
 800406c:	e1fb      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800406e:	bf00      	nop
        break;
 8004070:	e1f9      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004072:	4b38      	ldr	r3, [pc, #224]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004084:	d010      	beq.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d802      	bhi.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8004090:	e026      	b.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8004092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004096:	d00b      	beq.n	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409c:	d012      	beq.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 800409e:	e01f      	b.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7ff fa00 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 80040a4:	61f8      	str	r0, [r7, #28]
          break;
 80040a6:	e01b      	b.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80040a8:	f7ff f954 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80040ac:	61f8      	str	r0, [r7, #28]
          break;
 80040ae:	e017      	b.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040b0:	4b28      	ldr	r3, [pc, #160]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040bc:	d10d      	bne.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80040c0:	61fb      	str	r3, [r7, #28]
          break;
 80040c2:	e00a      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040c4:	4b23      	ldr	r3, [pc, #140]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d105      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 80040d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d6:	61fb      	str	r3, [r7, #28]
          break;
 80040d8:	e001      	b.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 80040da:	bf00      	nop
 80040dc:	e1c3      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80040de:	bf00      	nop
        break;
 80040e0:	e1c1      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040ec:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f4:	d010      	beq.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fa:	d802      	bhi.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8004100:	e026      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8004102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004106:	d00b      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800410c:	d012      	beq.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800410e:	e01f      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004110:	f7ff f9c8 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
          break;
 8004116:	e01b      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004118:	f7ff f91c 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 800411c:	61f8      	str	r0, [r7, #28]
          break;
 800411e:	e017      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	d10d      	bne.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800412e:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004130:	61fb      	str	r3, [r7, #28]
          break;
 8004132:	e00a      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8004142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004146:	61fb      	str	r3, [r7, #28]
          break;
 8004148:	e001      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800414a:	bf00      	nop
 800414c:	e18b      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800414e:	bf00      	nop
        break;
 8004150:	e189      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800415c:	4bae      	ldr	r3, [pc, #696]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004166:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800416e:	d02f      	beq.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004170:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004174:	d003      	beq.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800417a:	d004      	beq.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 800417c:	e050      	b.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 800417e:	f7ff f8e9 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8004182:	61f8      	str	r0, [r7, #28]
          break;
 8004184:	e04c      	b.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8004186:	4ba4      	ldr	r3, [pc, #656]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d043      	beq.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004192:	4ba1      	ldr	r3, [pc, #644]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	3301      	adds	r3, #1
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80041a6:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b0:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	fb02 f203 	mul.w	r2, r2, r3
 80041ba:	4b97      	ldr	r3, [pc, #604]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	0e5b      	lsrs	r3, r3, #25
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	3301      	adds	r3, #1
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	61fb      	str	r3, [r7, #28]
          break;
 80041ce:	e024      	b.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80041d0:	4b91      	ldr	r3, [pc, #580]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80041dc:	4b8e      	ldr	r3, [pc, #568]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	3301      	adds	r3, #1
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80041f0:	4b89      	ldr	r3, [pc, #548]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fa:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	fb02 f203 	mul.w	r2, r2, r3
 8004204:	4b84      	ldr	r3, [pc, #528]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	0e5b      	lsrs	r3, r3, #25
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	61fb      	str	r3, [r7, #28]
          break;
 8004218:	e001      	b.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 800421a:	bf00      	nop
 800421c:	e123      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800421e:	bf00      	nop
        break;
 8004220:	e121      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004222:	4b7d      	ldr	r3, [pc, #500]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800422c:	617b      	str	r3, [r7, #20]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d103      	bne.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004234:	f7ff f94c 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8004238:	61f8      	str	r0, [r7, #28]
        break;
 800423a:	e114      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 800423c:	f7ff f88a 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8004240:	61f8      	str	r0, [r7, #28]
        break;
 8004242:	e110      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004244:	4b74      	ldr	r3, [pc, #464]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800424e:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	d009      	beq.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d000      	beq.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8004262:	e011      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004264:	f7ff f91e 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8004268:	61f8      	str	r0, [r7, #28]
          break;
 800426a:	e00d      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 800426c:	f7ff f872 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8004270:	61f8      	str	r0, [r7, #28]
          break;
 8004272:	e009      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004274:	4b68      	ldr	r3, [pc, #416]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004280:	d101      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8004282:	4b66      	ldr	r3, [pc, #408]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004284:	61fb      	str	r3, [r7, #28]
          break;
 8004286:	bf00      	nop
        break;
 8004288:	e0ed      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800428a:	4b63      	ldr	r3, [pc, #396]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004294:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429c:	d009      	beq.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d000      	beq.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80042a8:	e011      	b.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042aa:	f7ff f8fb 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 80042ae:	61f8      	str	r0, [r7, #28]
          break;
 80042b0:	e00d      	b.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 80042b2:	f7ff f84f 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80042b6:	61f8      	str	r0, [r7, #28]
          break;
 80042b8:	e009      	b.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042ba:	4b57      	ldr	r3, [pc, #348]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c6:	d101      	bne.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 80042c8:	4b54      	ldr	r3, [pc, #336]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80042ca:	61fb      	str	r3, [r7, #28]
          break;
 80042cc:	bf00      	nop
        break;
 80042ce:	e0ca      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80042d0:	4b51      	ldr	r3, [pc, #324]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042da:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80042e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d000      	beq.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 80042ee:	e011      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7ff f8d8 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 80042f4:	61f8      	str	r0, [r7, #28]
          break;
 80042f6:	e00d      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 80042f8:	f7ff f82c 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80042fc:	61f8      	str	r0, [r7, #28]
          break;
 80042fe:	e009      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004300:	4b45      	ldr	r3, [pc, #276]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430c:	d101      	bne.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 800430e:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004310:	61fb      	str	r3, [r7, #28]
          break;
 8004312:	bf00      	nop
        break;
 8004314:	e0a7      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004316:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004320:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004328:	d010      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800432a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800432e:	d802      	bhi.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8004334:	e02f      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8004336:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800433a:	d012      	beq.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800433c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004340:	d019      	beq.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004342:	e028      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004344:	f7ff f8ae 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8004348:	61f8      	str	r0, [r7, #28]
          break;
 800434a:	e024      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800434c:	4b32      	ldr	r3, [pc, #200]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d118      	bne.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
            frequency = LSI_VALUE;
 800435a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800435e:	61fb      	str	r3, [r7, #28]
          break;
 8004360:	e014      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004362:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d10f      	bne.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004372:	61fb      	str	r3, [r7, #28]
          break;
 8004374:	e00c      	b.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004376:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d107      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8004384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004388:	61fb      	str	r3, [r7, #28]
          break;
 800438a:	e003      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 800438c:	bf00      	nop
 800438e:	e06a      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004390:	bf00      	nop
 8004392:	e068      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004394:	bf00      	nop
        break;
 8004396:	e066      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80043a2:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043aa:	d010      	beq.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80043ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b0:	d802      	bhi.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 80043b6:	e034      	b.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 80043b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043bc:	d012      	beq.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80043be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043c2:	d019      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 80043c4:	e02d      	b.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043c6:	f7ff f86d 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 80043ca:	61f8      	str	r0, [r7, #28]
          break;
 80043cc:	e029      	b.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d118      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
            frequency = LSI_VALUE;
 80043dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80043e0:	61fb      	str	r3, [r7, #28]
          break;
 80043e2:	e014      	b.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f0:	d10f      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 80043f2:	4b0a      	ldr	r3, [pc, #40]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80043f4:	61fb      	str	r3, [r7, #28]
          break;
 80043f6:	e00c      	b.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d10c      	bne.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8004406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440a:	61fb      	str	r3, [r7, #28]
          break;
 800440c:	e008      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 800440e:	bf00      	nop
 8004410:	e029      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004412:	bf00      	nop
 8004414:	e027      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	00f42400 	.word	0x00f42400
          break;
 8004420:	bf00      	nop
        break;
 8004422:	e020      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800442e:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443a:	d004      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 800443c:	e00d      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800443e:	f7ff f831 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8004442:	61f8      	str	r0, [r7, #28]
          break;
 8004444:	e009      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004452:	d101      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8004456:	61fb      	str	r3, [r7, #28]
          break;
 8004458:	bf00      	nop
        break;
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 800445c:	bf00      	nop
 800445e:	e002      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004464:	bf00      	nop
    }
  }

  return(frequency);
 8004466:	69fb      	ldr	r3, [r7, #28]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000
 8004474:	00f42400 	.word	0x00f42400

08004478 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800447c:	4a05      	ldr	r2, [pc, #20]	; (8004494 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000

08004498 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044a6:	4b73      	ldr	r3, [pc, #460]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d018      	beq.n	80044e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044b2:	4b70      	ldr	r3, [pc, #448]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0203 	and.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d10d      	bne.n	80044de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
       ||
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044ca:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
       ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d044      	beq.n	8004568 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	e041      	b.n	8004568 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d00c      	beq.n	8004506 <RCCEx_PLLSAI1_Config+0x6e>
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d013      	beq.n	8004518 <RCCEx_PLLSAI1_Config+0x80>
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d120      	bne.n	8004536 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044f4:	4b5f      	ldr	r3, [pc, #380]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11d      	bne.n	800453c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004504:	e01a      	b.n	800453c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004506:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450e:	2b00      	cmp	r3, #0
 8004510:	d116      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004516:	e013      	b.n	8004540 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004518:	4b56      	ldr	r3, [pc, #344]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10f      	bne.n	8004544 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004524:	4b53      	ldr	r3, [pc, #332]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004534:	e006      	b.n	8004544 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
      break;
 800453a:	e004      	b.n	8004546 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800453c:	bf00      	nop
 800453e:	e002      	b.n	8004546 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004544:	bf00      	nop
    }

    if(status == HAL_OK)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10d      	bne.n	8004568 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800454c:	4849      	ldr	r0, [pc, #292]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800454e:	4b49      	ldr	r3, [pc, #292]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	3b01      	subs	r3, #1
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	430b      	orrs	r3, r1
 8004564:	4313      	orrs	r3, r2
 8004566:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d17d      	bne.n	800466a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800456e:	4a41      	ldr	r2, [pc, #260]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004570:	4b40      	ldr	r3, [pc, #256]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457a:	f7fb ffff 	bl	800057c <HAL_GetTick>
 800457e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004580:	e009      	b.n	8004596 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004582:	f7fb fffb 	bl	800057c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d902      	bls.n	8004596 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	73fb      	strb	r3, [r7, #15]
        break;
 8004594:	e005      	b.n	80045a2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004596:	4b37      	ldr	r3, [pc, #220]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ef      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d160      	bne.n	800466a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d111      	bne.n	80045d2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ae:	4831      	ldr	r0, [pc, #196]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045b0:	4b30      	ldr	r3, [pc, #192]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6892      	ldr	r2, [r2, #8]
 80045c0:	0211      	lsls	r1, r2, #8
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68d2      	ldr	r2, [r2, #12]
 80045c6:	0912      	lsrs	r2, r2, #4
 80045c8:	0452      	lsls	r2, r2, #17
 80045ca:	430a      	orrs	r2, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	6103      	str	r3, [r0, #16]
 80045d0:	e027      	b.n	8004622 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d112      	bne.n	80045fe <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045d8:	4826      	ldr	r0, [pc, #152]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6892      	ldr	r2, [r2, #8]
 80045ea:	0211      	lsls	r1, r2, #8
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6912      	ldr	r2, [r2, #16]
 80045f0:	0852      	lsrs	r2, r2, #1
 80045f2:	3a01      	subs	r2, #1
 80045f4:	0552      	lsls	r2, r2, #21
 80045f6:	430a      	orrs	r2, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	6103      	str	r3, [r0, #16]
 80045fc:	e011      	b.n	8004622 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045fe:	481d      	ldr	r0, [pc, #116]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004600:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004608:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6892      	ldr	r2, [r2, #8]
 8004610:	0211      	lsls	r1, r2, #8
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6952      	ldr	r2, [r2, #20]
 8004616:	0852      	lsrs	r2, r2, #1
 8004618:	3a01      	subs	r2, #1
 800461a:	0652      	lsls	r2, r2, #25
 800461c:	430a      	orrs	r2, r1
 800461e:	4313      	orrs	r3, r2
 8004620:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004622:	4a14      	ldr	r2, [pc, #80]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800462c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fb ffa5 	bl	800057c <HAL_GetTick>
 8004632:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004634:	e009      	b.n	800464a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004636:	f7fb ffa1 	bl	800057c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d902      	bls.n	800464a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	73fb      	strb	r3, [r7, #15]
          break;
 8004648:	e005      	b.n	8004656 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ef      	beq.n	8004636 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800465c:	4905      	ldr	r1, [pc, #20]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	4313      	orrs	r3, r2
 8004668:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000

08004678 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004686:	4b68      	ldr	r3, [pc, #416]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d018      	beq.n	80046c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004692:	4b65      	ldr	r3, [pc, #404]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0203 	and.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d10d      	bne.n	80046be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
       ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046aa:	4b5f      	ldr	r3, [pc, #380]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
       ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d044      	beq.n	8004748 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	e041      	b.n	8004748 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d00c      	beq.n	80046e6 <RCCEx_PLLSAI2_Config+0x6e>
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d013      	beq.n	80046f8 <RCCEx_PLLSAI2_Config+0x80>
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d120      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046d4:	4b54      	ldr	r3, [pc, #336]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11d      	bne.n	800471c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e4:	e01a      	b.n	800471c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046e6:	4b50      	ldr	r3, [pc, #320]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d116      	bne.n	8004720 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f6:	e013      	b.n	8004720 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046f8:	4b4b      	ldr	r3, [pc, #300]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004704:	4b48      	ldr	r3, [pc, #288]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004714:	e006      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
      break;
 800471a:	e004      	b.n	8004726 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800471c:	bf00      	nop
 800471e:	e002      	b.n	8004726 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004724:	bf00      	nop
    }

    if(status == HAL_OK)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10d      	bne.n	8004748 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800472c:	483e      	ldr	r0, [pc, #248]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 800472e:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	3b01      	subs	r3, #1
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	430b      	orrs	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d167      	bne.n	800481e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800474e:	4a36      	ldr	r2, [pc, #216]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004750:	4b35      	ldr	r3, [pc, #212]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475a:	f7fb ff0f 	bl	800057c <HAL_GetTick>
 800475e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004760:	e009      	b.n	8004776 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004762:	f7fb ff0b 	bl	800057c <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d902      	bls.n	8004776 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	73fb      	strb	r3, [r7, #15]
        break;
 8004774:	e005      	b.n	8004782 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004776:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1ef      	bne.n	8004762 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d14a      	bne.n	800481e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d111      	bne.n	80047b2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800478e:	4826      	ldr	r0, [pc, #152]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6892      	ldr	r2, [r2, #8]
 80047a0:	0211      	lsls	r1, r2, #8
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68d2      	ldr	r2, [r2, #12]
 80047a6:	0912      	lsrs	r2, r2, #4
 80047a8:	0452      	lsls	r2, r2, #17
 80047aa:	430a      	orrs	r2, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	6143      	str	r3, [r0, #20]
 80047b0:	e011      	b.n	80047d6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b2:	481d      	ldr	r0, [pc, #116]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047b4:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6892      	ldr	r2, [r2, #8]
 80047c4:	0211      	lsls	r1, r2, #8
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6912      	ldr	r2, [r2, #16]
 80047ca:	0852      	lsrs	r2, r2, #1
 80047cc:	3a01      	subs	r2, #1
 80047ce:	0652      	lsls	r2, r2, #25
 80047d0:	430a      	orrs	r2, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047d6:	4a14      	ldr	r2, [pc, #80]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7fb fecb 	bl	800057c <HAL_GetTick>
 80047e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047e8:	e009      	b.n	80047fe <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047ea:	f7fb fec7 	bl	800057c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d902      	bls.n	80047fe <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	73fb      	strb	r3, [r7, #15]
          break;
 80047fc:	e005      	b.n	800480a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ef      	beq.n	80047ea <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004810:	4905      	ldr	r1, [pc, #20]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004814:	695a      	ldr	r2, [r3, #20]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000

0800482c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004848:	d10c      	bne.n	8004864 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800484a:	4b62      	ldr	r3, [pc, #392]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004854:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800485c:	d112      	bne.n	8004884 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800485e:	4b5e      	ldr	r3, [pc, #376]	; (80049d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e00f      	b.n	8004884 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486a:	d10b      	bne.n	8004884 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800486c:	4b59      	ldr	r3, [pc, #356]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004876:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800487e:	d101      	bne.n	8004884 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004880:	4b55      	ldr	r3, [pc, #340]	; (80049d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8004882:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 809c 	bne.w	80049c4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004896:	d003      	beq.n	80048a0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800489e:	d12d      	bne.n	80048fc <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80048a0:	4b4c      	ldr	r3, [pc, #304]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 808b 	beq.w	80049c4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048ae:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	3301      	adds	r3, #1
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048cc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80048d4:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 80048e0:	2311      	movs	r3, #17
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e001      	b.n	80048ea <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 80048e6:	2307      	movs	r3, #7
 80048e8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	fb02 f203 	mul.w	r2, r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80048fa:	e063      	b.n	80049c4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d12c      	bne.n	800495c <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8004902:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d05a      	beq.n	80049c4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	3301      	adds	r3, #1
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004922:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 8004940:	2311      	movs	r3, #17
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e001      	b.n	800494a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 8004946:	2307      	movs	r3, #7
 8004948:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	fb02 f203 	mul.w	r2, r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e033      	b.n	80049c4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004962:	d003      	beq.n	800496c <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496a:	d12b      	bne.n	80049c4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d025      	beq.n	80049c4 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004978:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	3301      	adds	r3, #1
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004996:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 80049aa:	2311      	movs	r3, #17
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e001      	b.n	80049b4 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 80049b0:	2307      	movs	r3, #7
 80049b2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	fb02 f203 	mul.w	r2, r2, r3
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80049c4:	69fb      	ldr	r3, [r7, #28]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	001fff68 	.word	0x001fff68

080049dc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e14a      	b.n	8004c84 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f004 fe74 	bl	80096f0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f94d 	bl	8004ca8 <SAI_Disable>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e135      	b.n	8004c84 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d007      	beq.n	8004a38 <HAL_SAI_Init+0x5c>
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d302      	bcc.n	8004a32 <HAL_SAI_Init+0x56>
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d006      	beq.n	8004a3e <HAL_SAI_Init+0x62>
 8004a30:	e008      	b.n	8004a44 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
      break;
 8004a36:	e008      	b.n	8004a4a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a38:	2310      	movs	r3, #16
 8004a3a:	61fb      	str	r3, [r7, #28]
      break;
 8004a3c:	e005      	b.n	8004a4a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	61fb      	str	r3, [r7, #28]
      break;
 8004a42:	e002      	b.n	8004a4a <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
      break;
 8004a48:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d81d      	bhi.n	8004a8e <HAL_SAI_Init+0xb2>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <HAL_SAI_Init+0x7c>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a69 	.word	0x08004a69
 8004a5c:	08004a6f 	.word	0x08004a6f
 8004a60:	08004a77 	.word	0x08004a77
 8004a64:	08004a7f 	.word	0x08004a7f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
      break;
 8004a6c:	e012      	b.n	8004a94 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a72:	617b      	str	r3, [r7, #20]
      break;
 8004a74:	e00e      	b.n	8004a94 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a7a:	617b      	str	r3, [r7, #20]
      break;
 8004a7c:	e00a      	b.n	8004a94 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a82:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
      break;
 8004a8c:	e002      	b.n	8004a94 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
      break;
 8004a92:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7c      	ldr	r2, [pc, #496]	; (8004c8c <HAL_SAI_Init+0x2b0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_SAI_Init+0xcc>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7b      	ldr	r2, [pc, #492]	; (8004c90 <HAL_SAI_Init+0x2b4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d103      	bne.n	8004ab0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004aa8:	4a7a      	ldr	r2, [pc, #488]	; (8004c94 <HAL_SAI_Init+0x2b8>)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e002      	b.n	8004ab6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004ab0:	4a79      	ldr	r2, [pc, #484]	; (8004c98 <HAL_SAI_Init+0x2bc>)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d038      	beq.n	8004b30 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a72      	ldr	r2, [pc, #456]	; (8004c8c <HAL_SAI_Init+0x2b0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_SAI_Init+0xf6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a70      	ldr	r2, [pc, #448]	; (8004c90 <HAL_SAI_Init+0x2b4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d105      	bne.n	8004ade <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004ad2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ad6:	f7ff f857 	bl	8003b88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ada:	6138      	str	r0, [r7, #16]
 8004adc:	e004      	b.n	8004ae8 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004ade:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ae2:	f7ff f851 	bl	8003b88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	461a      	mov	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a66      	ldr	r2, [pc, #408]	; (8004c9c <HAL_SAI_Init+0x2c0>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	08da      	lsrs	r2, r3, #3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	4b62      	ldr	r3, [pc, #392]	; (8004c9c <HAL_SAI_Init+0x2c0>)
 8004b12:	fba3 2301 	umull	r2, r3, r3, r1
 8004b16:	08da      	lsrs	r2, r3, #3
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	1aca      	subs	r2, r1, r3
 8004b22:	2a08      	cmp	r2, #8
 8004b24:	d904      	bls.n	8004b30 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_SAI_Init+0x164>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d109      	bne.n	8004b54 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_SAI_Init+0x170>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e001      	b.n	8004b50 <HAL_SAI_Init+0x174>
 8004b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e008      	b.n	8004b66 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d102      	bne.n	8004b62 <HAL_SAI_Init+0x186>
 8004b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b60:	e000      	b.n	8004b64 <HAL_SAI_Init+0x188>
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6819      	ldr	r1, [r3, #0]
 8004b70:	4b4b      	ldr	r3, [pc, #300]	; (8004ca0 <HAL_SAI_Init+0x2c4>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	6811      	ldr	r1, [r2, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6850      	ldr	r0, [r2, #4]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b88:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b8e:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b94:	4310      	orrs	r0, r2
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4310      	orrs	r0, r2
                          ckstr_bits | syncen_bits |                             \
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8004ba2:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6912      	ldr	r2, [r2, #16]
 8004ba8:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6952      	ldr	r2, [r2, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bae:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6a12      	ldr	r2, [r2, #32]
 8004bb4:	0512      	lsls	r2, r2, #20
 8004bb6:	4302      	orrs	r2, r0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004bca:	f023 030f 	bic.w	r3, r3, #15
 8004bce:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	6851      	ldr	r1, [r2, #4]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6990      	ldr	r0, [r2, #24]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004be2:	4310      	orrs	r0, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004be8:	4302      	orrs	r2, r0
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6899      	ldr	r1, [r3, #8]
 8004bf8:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <HAL_SAI_Init+0x2c8>)
 8004bfa:	400b      	ands	r3, r1
 8004bfc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	6891      	ldr	r1, [r2, #8]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c0c:	1e50      	subs	r0, r2, #1
                           hsai->FrameInit.FSOffset |
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6d12      	ldr	r2, [r2, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c12:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSDefinition |
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6c92      	ldr	r2, [r2, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004c18:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSPolarity   |
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004c1e:	4310      	orrs	r0, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c24:	3a01      	subs	r2, #1
 8004c26:	0212      	lsls	r2, r2, #8
                           hsai->FrameInit.FSPolarity   |
 8004c28:	4302      	orrs	r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68d9      	ldr	r1, [r3, #12]
 8004c38:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004c3c:	400b      	ands	r3, r1
 8004c3e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	68d1      	ldr	r1, [r2, #12]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004c52:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004c58:	0412      	lsls	r2, r2, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c5a:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c60:	3a01      	subs	r2, #1
 8004c62:	0212      	lsls	r2, r2, #8
 8004c64:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c66:	430a      	orrs	r2, r1
 8004c68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40015404 	.word	0x40015404
 8004c90:	40015424 	.word	0x40015424
 8004c94:	40015400 	.word	0x40015400
 8004c98:	40015800 	.word	0x40015800
 8004c9c:	cccccccd 	.word	0xcccccccd
 8004ca0:	ff05c010 	.word	0xff05c010
 8004ca4:	fff88000 	.word	0xfff88000

08004ca8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004ca8:	b490      	push	{r4, r7}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004cb0:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <SAI_Disable+0x60>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <SAI_Disable+0x64>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	0b1b      	lsrs	r3, r3, #12
 8004cbc:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004cd0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004cd2:	2c00      	cmp	r4, #0
 8004cd4:	d10a      	bne.n	8004cec <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cea:	e007      	b.n	8004cfc <SAI_Disable+0x54>
    }
    count--;
 8004cec:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1ea      	bne.n	8004cd2 <SAI_Disable+0x2a>

  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc90      	pop	{r4, r7}
 8004d06:	4770      	bx	lr
 8004d08:	20000020 	.word	0x20000020
 8004d0c:	95cbec1b 	.word	0x95cbec1b

08004d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e07a      	b.n	8004e18 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f004 fd8d 	bl	800985c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d58:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d62:	d902      	bls.n	8004d6a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e002      	b.n	8004d70 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d78:	d007      	beq.n	8004d8a <HAL_SPI_Init+0x7a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d82:	d002      	beq.n	8004d8a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10b      	bne.n	8004daa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d9a:	d903      	bls.n	8004da4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
 8004da2:	e002      	b.n	8004daa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6851      	ldr	r1, [r2, #4]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6892      	ldr	r2, [r2, #8]
 8004db6:	4311      	orrs	r1, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6912      	ldr	r2, [r2, #16]
 8004dbc:	4311      	orrs	r1, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6952      	ldr	r2, [r2, #20]
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6992      	ldr	r2, [r2, #24]
 8004dc8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004dcc:	4311      	orrs	r1, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	69d2      	ldr	r2, [r2, #28]
 8004dd2:	4311      	orrs	r1, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6a12      	ldr	r2, [r2, #32]
 8004dd8:	4311      	orrs	r1, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6992      	ldr	r2, [r2, #24]
 8004dea:	0c12      	lsrs	r2, r2, #16
 8004dec:	f002 0104 	and.w	r1, r2, #4
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004df4:	4311      	orrs	r1, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfa:	4311      	orrs	r1, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	68d2      	ldr	r2, [r2, #12]
 8004e00:	4311      	orrs	r1, r2
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_SPI_Transmit+0x22>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e14e      	b.n	80050e0 <HAL_SPI_Transmit+0x2c0>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e4a:	f7fb fb97 	bl	800057c <HAL_GetTick>
 8004e4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d002      	beq.n	8004e66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
 8004e62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e64:	e133      	b.n	80050ce <HAL_SPI_Transmit+0x2ae>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_SPI_Transmit+0x52>
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e76:	e12a      	b.n	80050ce <HAL_SPI_Transmit+0x2ae>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec2:	d107      	bne.n	8004ed4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d007      	beq.n	8004ef2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004efa:	d94b      	bls.n	8004f94 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_SPI_Transmit+0xea>
 8004f04:	8afb      	ldrh	r3, [r7, #22]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d13e      	bne.n	8004f88 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f12:	8812      	ldrh	r2, [r2, #0]
 8004f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f2e:	e02b      	b.n	8004f88 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d112      	bne.n	8004f64 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f46:	8812      	ldrh	r2, [r2, #0]
 8004f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f62:	e011      	b.n	8004f88 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f64:	f7fb fb0a 	bl	800057c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	1ad2      	subs	r2, r2, r3
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d303      	bcc.n	8004f7c <HAL_SPI_Transmit+0x15c>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d102      	bne.n	8004f82 <HAL_SPI_Transmit+0x162>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f86:	e0a2      	b.n	80050ce <HAL_SPI_Transmit+0x2ae>
    while (hspi->TxXferCount > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1ce      	bne.n	8004f30 <HAL_SPI_Transmit+0x110>
 8004f92:	e07c      	b.n	800508e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_Transmit+0x182>
 8004f9c:	8afb      	ldrh	r3, [r7, #22]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d170      	bne.n	8005084 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d912      	bls.n	8004fd2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fb4:	8812      	ldrh	r2, [r2, #0]
 8004fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	1c9a      	adds	r2, r3, #2
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b02      	subs	r3, #2
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fd0:	e058      	b.n	8005084 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fdc:	7812      	ldrb	r2, [r2, #0]
 8004fde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ff8:	e044      	b.n	8005084 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d12b      	bne.n	8005060 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b01      	cmp	r3, #1
 8005010:	d912      	bls.n	8005038 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800501a:	8812      	ldrh	r2, [r2, #0]
 800501c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b02      	subs	r3, #2
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005036:	e025      	b.n	8005084 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005042:	7812      	ldrb	r2, [r2, #0]
 8005044:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800505e:	e011      	b.n	8005084 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005060:	f7fb fa8c 	bl	800057c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	1ad2      	subs	r2, r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d303      	bcc.n	8005078 <HAL_SPI_Transmit+0x258>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d102      	bne.n	800507e <HAL_SPI_Transmit+0x25e>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005082:	e024      	b.n	80050ce <HAL_SPI_Transmit+0x2ae>
    while (hspi->TxXferCount > 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1b5      	bne.n	8004ffa <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fc8c 	bl	80059b0 <SPI_EndRxTxTransaction>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_SPI_Transmit+0x2ae>
  {
    errorcode = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050de:	7ffb      	ldrb	r3, [r7, #31]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005104:	d112      	bne.n	800512c <HAL_SPI_Receive+0x44>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10e      	bne.n	800512c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2204      	movs	r2, #4
 8005112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f905 	bl	8005332 <HAL_SPI_TransmitReceive>
 8005128:	4603      	mov	r3, r0
 800512a:	e0fe      	b.n	800532a <HAL_SPI_Receive+0x242>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_SPI_Receive+0x52>
 8005136:	2302      	movs	r3, #2
 8005138:	e0f7      	b.n	800532a <HAL_SPI_Receive+0x242>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005142:	f7fb fa1b 	bl	800057c <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d002      	beq.n	800515a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005154:	2302      	movs	r3, #2
 8005156:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005158:	e0de      	b.n	8005318 <HAL_SPI_Receive+0x230>
  }

  if ((pData == NULL) || (Size == 0U))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_Receive+0x7e>
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800516a:	e0d5      	b.n	8005318 <HAL_SPI_Receive+0x230>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2204      	movs	r2, #4
 8005170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b6:	d908      	bls.n	80051ca <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	6852      	ldr	r2, [r2, #4]
 80051c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	e007      	b.n	80051da <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	6852      	ldr	r2, [r2, #4]
 80051d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051d8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e2:	d107      	bne.n	80051f4 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d007      	beq.n	8005212 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521a:	d866      	bhi.n	80052ea <HAL_SPI_Receive+0x202>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800521c:	e02f      	b.n	800527e <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b01      	cmp	r3, #1
 800522a:	d116      	bne.n	800525a <HAL_SPI_Receive+0x172>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	320c      	adds	r2, #12
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005258:	e011      	b.n	800527e <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525a:	f7fb f98f 	bl	800057c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d303      	bcc.n	8005272 <HAL_SPI_Receive+0x18a>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d102      	bne.n	8005278 <HAL_SPI_Receive+0x190>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800527c:	e04c      	b.n	8005318 <HAL_SPI_Receive+0x230>
    while (hspi->RxXferCount > 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1c9      	bne.n	800521e <HAL_SPI_Receive+0x136>
 800528a:	e034      	b.n	80052f6 <HAL_SPI_Receive+0x20e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b01      	cmp	r3, #1
 8005298:	d115      	bne.n	80052c6 <HAL_SPI_Receive+0x1de>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	68d2      	ldr	r2, [r2, #12]
 80052a4:	b292      	uxth	r2, r2
 80052a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	1c9a      	adds	r2, r3, #2
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80052c4:	e011      	b.n	80052ea <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052c6:	f7fb f959 	bl	800057c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d303      	bcc.n	80052de <HAL_SPI_Receive+0x1f6>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d102      	bne.n	80052e4 <HAL_SPI_Receive+0x1fc>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <HAL_SPI_Receive+0x202>
        {
          errorcode = HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052e8:	e016      	b.n	8005318 <HAL_SPI_Receive+0x230>
    while (hspi->RxXferCount > 0U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ca      	bne.n	800528c <HAL_SPI_Receive+0x1a4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fb00 	bl	8005900 <SPI_EndRxTransaction>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_SPI_Receive+0x224>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_SPI_Receive+0x230>
  {
    errorcode = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005328:	7dfb      	ldrb	r3, [r7, #23]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b08a      	sub	sp, #40	; 0x28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005340:	2301      	movs	r3, #1
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_SPI_TransmitReceive+0x26>
 8005354:	2302      	movs	r3, #2
 8005356:	e1f8      	b.n	800574a <HAL_SPI_TransmitReceive+0x418>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005360:	f7fb f90c 	bl	800057c <HAL_GetTick>
 8005364:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800536c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005378:	887b      	ldrh	r3, [r7, #2]
 800537a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800537c:	7efb      	ldrb	r3, [r7, #27]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d00e      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0x6e>
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005388:	d106      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x66>
 8005392:	7efb      	ldrb	r3, [r7, #27]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d003      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005398:	2302      	movs	r3, #2
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800539e:	e1ca      	b.n	8005736 <HAL_SPI_TransmitReceive+0x404>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0x80>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0x80>
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80053b8:	e1bd      	b.n	8005736 <HAL_SPI_TransmitReceive+0x404>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d003      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2205      	movs	r2, #5
 80053ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	887a      	ldrh	r2, [r7, #2]
 80053de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	887a      	ldrh	r2, [r7, #2]
 80053e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	887a      	ldrh	r2, [r7, #2]
 80053fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005410:	d802      	bhi.n	8005418 <HAL_SPI_TransmitReceive+0xe6>
 8005412:	8a3b      	ldrh	r3, [r7, #16]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d908      	bls.n	800542a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	6852      	ldr	r2, [r2, #4]
 8005422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005426:	605a      	str	r2, [r3, #4]
 8005428:	e007      	b.n	800543a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	6852      	ldr	r2, [r2, #4]
 8005434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d007      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005460:	d97c      	bls.n	800555c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_SPI_TransmitReceive+0x13e>
 800546a:	8a7b      	ldrh	r3, [r7, #18]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d169      	bne.n	8005544 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005478:	8812      	ldrh	r2, [r2, #0]
 800547a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	1c9a      	adds	r2, r3, #2
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005494:	e056      	b.n	8005544 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d11b      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x1aa>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x1aa>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d113      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054bc:	8812      	ldrh	r2, [r2, #0]
 80054be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	1c9a      	adds	r2, r3, #2
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d11c      	bne.n	8005524 <HAL_SPI_TransmitReceive+0x1f2>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d016      	beq.n	8005524 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	68d2      	ldr	r2, [r2, #12]
 8005500:	b292      	uxth	r2, r2
 8005502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	1c9a      	adds	r2, r3, #2
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005520:	2301      	movs	r3, #1
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005524:	f7fb f82a 	bl	800057c <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	1ad2      	subs	r2, r2, r3
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	429a      	cmp	r2, r3
 8005532:	d307      	bcc.n	8005544 <HAL_SPI_TransmitReceive+0x212>
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d003      	beq.n	8005544 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005542:	e0f8      	b.n	8005736 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1a3      	bne.n	8005496 <HAL_SPI_TransmitReceive+0x164>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d19d      	bne.n	8005496 <HAL_SPI_TransmitReceive+0x164>
 800555a:	e0de      	b.n	800571a <HAL_SPI_TransmitReceive+0x3e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_SPI_TransmitReceive+0x23a>
 8005564:	8a7b      	ldrh	r3, [r7, #18]
 8005566:	2b01      	cmp	r3, #1
 8005568:	f040 80ca 	bne.w	8005700 <HAL_SPI_TransmitReceive+0x3ce>
    {
      if (hspi->TxXferCount > 1U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b01      	cmp	r3, #1
 8005574:	d912      	bls.n	800559c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800557e:	8812      	ldrh	r2, [r2, #0]
 8005580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	1c9a      	adds	r2, r3, #2
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b02      	subs	r3, #2
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	87da      	strh	r2, [r3, #62]	; 0x3e
 800559a:	e0b1      	b.n	8005700 <HAL_SPI_TransmitReceive+0x3ce>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a6:	7812      	ldrb	r2, [r2, #0]
 80055a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055c2:	e09d      	b.n	8005700 <HAL_SPI_TransmitReceive+0x3ce>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d134      	bne.n	800563c <HAL_SPI_TransmitReceive+0x30a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d02f      	beq.n	800563c <HAL_SPI_TransmitReceive+0x30a>
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d12c      	bne.n	800563c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d912      	bls.n	8005612 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055f4:	8812      	ldrh	r2, [r2, #0]
 80055f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	1c9a      	adds	r2, r3, #2
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b02      	subs	r3, #2
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005610:	e012      	b.n	8005638 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d147      	bne.n	80056da <HAL_SPI_TransmitReceive+0x3a8>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d041      	beq.n	80056da <HAL_SPI_TransmitReceive+0x3a8>
      {
        if (hspi->RxXferCount > 1U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d923      	bls.n	80056aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	68d2      	ldr	r2, [r2, #12]
 800566c:	b292      	uxth	r2, r2
 800566e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	1c9a      	adds	r2, r3, #2
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b02      	subs	r3, #2
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d81e      	bhi.n	80056d6 <HAL_SPI_TransmitReceive+0x3a4>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	6852      	ldr	r2, [r2, #4]
 80056a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	e015      	b.n	80056d6 <HAL_SPI_TransmitReceive+0x3a4>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	320c      	adds	r2, #12
 80056b4:	7812      	ldrb	r2, [r2, #0]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056d6:	2301      	movs	r3, #1
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056da:	f7fa ff4f 	bl	800057c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d303      	bcc.n	80056f2 <HAL_SPI_TransmitReceive+0x3c0>
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x3c6>
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <HAL_SPI_TransmitReceive+0x3ce>
      {
        errorcode = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80056fe:	e01a      	b.n	8005736 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	f47f af5c 	bne.w	80055c4 <HAL_SPI_TransmitReceive+0x292>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	f47f af55 	bne.w	80055c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f946 	bl	80059b0 <SPI_EndRxTxTransaction>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x404>
  {
    errorcode = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	661a      	str	r2, [r3, #96]	; 0x60
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800574a:	4618      	mov	r0, r3
 800574c:	3728      	adds	r7, #40	; 0x28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	4613      	mov	r3, r2
 8005760:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005762:	e04c      	b.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d048      	beq.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800576c:	f7fa ff06 	bl	800057c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	1ad2      	subs	r2, r2, r3
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d202      	bcs.n	8005782 <SPI_WaitFlagStateUntilTimeout+0x30>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d13d      	bne.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	6852      	ldr	r2, [r2, #4]
 800578c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579a:	d111      	bne.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a4:	d004      	beq.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ae:	d107      	bne.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c8:	d10f      	bne.n	80057ea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e00f      	b.n	800581e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	401a      	ands	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	429a      	cmp	r2, r3
 800581a:	d1a3      	bne.n	8005764 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005834:	e057      	b.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800583c:	d106      	bne.n	800584c <SPI_WaitFifoStateUntilTimeout+0x26>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d048      	beq.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005854:	f7fa fe92 	bl	800057c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	1ad2      	subs	r2, r2, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d202      	bcs.n	800586a <SPI_WaitFifoStateUntilTimeout+0x44>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d13d      	bne.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	6852      	ldr	r2, [r2, #4]
 8005874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005882:	d111      	bne.n	80058a8 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588c:	d004      	beq.n	8005898 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005896:	d107      	bne.n	80058a8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b0:	d10f      	bne.n	80058d2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e008      	b.n	80058f8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	401a      	ands	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d19f      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005914:	d111      	bne.n	800593a <SPI_EndRxTransaction+0x3a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800591e:	d004      	beq.n	800592a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d107      	bne.n	800593a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005938:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2200      	movs	r2, #0
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff ff04 	bl	8005752 <SPI_WaitFlagStateUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005954:	f043 0220 	orr.w	r2, r3, #32
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e023      	b.n	80059a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005968:	d11d      	bne.n	80059a6 <SPI_EndRxTransaction+0xa6>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005972:	d004      	beq.n	800597e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d113      	bne.n	80059a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff ff4b 	bl	8005826 <SPI_WaitFifoStateUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e000      	b.n	80059a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ff2c 	bl	8005826 <SPI_WaitFifoStateUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e027      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2200      	movs	r2, #0
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff feaf 	bl	8005752 <SPI_WaitFlagStateUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e014      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff ff05 	bl	8005826 <SPI_WaitFifoStateUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e000      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e043      	b.n	8005ad6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f004 f82c 	bl	8009ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f82d 	bl	8005ae0 <UART_SetConfig>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e022      	b.n	8005ad6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fb5f 	bl	800615c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	6852      	ldr	r2, [r2, #4]
 8005aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	6892      	ldr	r2, [r2, #8]
 8005ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005abc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	f042 0201 	orr.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fbe6 	bl	80062a0 <UART_CheckIdleState>
 8005ad4:	4603      	mov	r3, r0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ae4:	b088      	sub	sp, #32
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005aee:	2310      	movs	r3, #16
 8005af0:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	4baa      	ldr	r3, [pc, #680]	; (8005dd0 <UART_SetConfig+0x2f0>)
 8005b26:	400b      	ands	r3, r1
 8005b28:	69f9      	ldr	r1, [r7, #28]
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	6852      	ldr	r2, [r2, #4]
 8005b38:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68d2      	ldr	r2, [r2, #12]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4aa1      	ldr	r2, [pc, #644]	; (8005dd4 <UART_SetConfig+0x2f4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	6892      	ldr	r2, [r2, #8]
 8005b68:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a98      	ldr	r2, [pc, #608]	; (8005dd8 <UART_SetConfig+0x2f8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d121      	bne.n	8005bc0 <UART_SetConfig+0xe0>
 8005b7c:	4b97      	ldr	r3, [pc, #604]	; (8005ddc <UART_SetConfig+0x2fc>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d816      	bhi.n	8005bb8 <UART_SetConfig+0xd8>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <UART_SetConfig+0xb0>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005ba1 	.word	0x08005ba1
 8005b94:	08005bad 	.word	0x08005bad
 8005b98:	08005ba7 	.word	0x08005ba7
 8005b9c:	08005bb3 	.word	0x08005bb3
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	76fb      	strb	r3, [r7, #27]
 8005ba4:	e0e4      	b.n	8005d70 <UART_SetConfig+0x290>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	76fb      	strb	r3, [r7, #27]
 8005baa:	e0e1      	b.n	8005d70 <UART_SetConfig+0x290>
 8005bac:	2304      	movs	r3, #4
 8005bae:	76fb      	strb	r3, [r7, #27]
 8005bb0:	e0de      	b.n	8005d70 <UART_SetConfig+0x290>
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	76fb      	strb	r3, [r7, #27]
 8005bb6:	e0db      	b.n	8005d70 <UART_SetConfig+0x290>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	76fb      	strb	r3, [r7, #27]
 8005bbc:	bf00      	nop
 8005bbe:	e0d7      	b.n	8005d70 <UART_SetConfig+0x290>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a86      	ldr	r2, [pc, #536]	; (8005de0 <UART_SetConfig+0x300>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d134      	bne.n	8005c34 <UART_SetConfig+0x154>
 8005bca:	4b84      	ldr	r3, [pc, #528]	; (8005ddc <UART_SetConfig+0x2fc>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	f003 030c 	and.w	r3, r3, #12
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d829      	bhi.n	8005c2c <UART_SetConfig+0x14c>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x100>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c15 	.word	0x08005c15
 8005be4:	08005c2d 	.word	0x08005c2d
 8005be8:	08005c2d 	.word	0x08005c2d
 8005bec:	08005c2d 	.word	0x08005c2d
 8005bf0:	08005c21 	.word	0x08005c21
 8005bf4:	08005c2d 	.word	0x08005c2d
 8005bf8:	08005c2d 	.word	0x08005c2d
 8005bfc:	08005c2d 	.word	0x08005c2d
 8005c00:	08005c1b 	.word	0x08005c1b
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c2d 	.word	0x08005c2d
 8005c10:	08005c27 	.word	0x08005c27
 8005c14:	2300      	movs	r3, #0
 8005c16:	76fb      	strb	r3, [r7, #27]
 8005c18:	e0aa      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	76fb      	strb	r3, [r7, #27]
 8005c1e:	e0a7      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c20:	2304      	movs	r3, #4
 8005c22:	76fb      	strb	r3, [r7, #27]
 8005c24:	e0a4      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c26:	2308      	movs	r3, #8
 8005c28:	76fb      	strb	r3, [r7, #27]
 8005c2a:	e0a1      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	76fb      	strb	r3, [r7, #27]
 8005c30:	bf00      	nop
 8005c32:	e09d      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a6a      	ldr	r2, [pc, #424]	; (8005de4 <UART_SetConfig+0x304>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d120      	bne.n	8005c80 <UART_SetConfig+0x1a0>
 8005c3e:	4b67      	ldr	r3, [pc, #412]	; (8005ddc <UART_SetConfig+0x2fc>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d00f      	beq.n	8005c6c <UART_SetConfig+0x18c>
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d802      	bhi.n	8005c56 <UART_SetConfig+0x176>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <UART_SetConfig+0x180>
 8005c54:	e010      	b.n	8005c78 <UART_SetConfig+0x198>
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d005      	beq.n	8005c66 <UART_SetConfig+0x186>
 8005c5a:	2b30      	cmp	r3, #48	; 0x30
 8005c5c:	d009      	beq.n	8005c72 <UART_SetConfig+0x192>
 8005c5e:	e00b      	b.n	8005c78 <UART_SetConfig+0x198>
 8005c60:	2300      	movs	r3, #0
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e084      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c66:	2302      	movs	r3, #2
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e081      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	e07e      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c72:	2308      	movs	r3, #8
 8005c74:	76fb      	strb	r3, [r7, #27]
 8005c76:	e07b      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	76fb      	strb	r3, [r7, #27]
 8005c7c:	bf00      	nop
 8005c7e:	e077      	b.n	8005d70 <UART_SetConfig+0x290>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a58      	ldr	r2, [pc, #352]	; (8005de8 <UART_SetConfig+0x308>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d120      	bne.n	8005ccc <UART_SetConfig+0x1ec>
 8005c8a:	4b54      	ldr	r3, [pc, #336]	; (8005ddc <UART_SetConfig+0x2fc>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d00f      	beq.n	8005cb8 <UART_SetConfig+0x1d8>
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d802      	bhi.n	8005ca2 <UART_SetConfig+0x1c2>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <UART_SetConfig+0x1cc>
 8005ca0:	e010      	b.n	8005cc4 <UART_SetConfig+0x1e4>
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d005      	beq.n	8005cb2 <UART_SetConfig+0x1d2>
 8005ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ca8:	d009      	beq.n	8005cbe <UART_SetConfig+0x1de>
 8005caa:	e00b      	b.n	8005cc4 <UART_SetConfig+0x1e4>
 8005cac:	2300      	movs	r3, #0
 8005cae:	76fb      	strb	r3, [r7, #27]
 8005cb0:	e05e      	b.n	8005d70 <UART_SetConfig+0x290>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	76fb      	strb	r3, [r7, #27]
 8005cb6:	e05b      	b.n	8005d70 <UART_SetConfig+0x290>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e058      	b.n	8005d70 <UART_SetConfig+0x290>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	76fb      	strb	r3, [r7, #27]
 8005cc2:	e055      	b.n	8005d70 <UART_SetConfig+0x290>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	bf00      	nop
 8005cca:	e051      	b.n	8005d70 <UART_SetConfig+0x290>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a46      	ldr	r2, [pc, #280]	; (8005dec <UART_SetConfig+0x30c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d124      	bne.n	8005d20 <UART_SetConfig+0x240>
 8005cd6:	4b41      	ldr	r3, [pc, #260]	; (8005ddc <UART_SetConfig+0x2fc>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce4:	d012      	beq.n	8005d0c <UART_SetConfig+0x22c>
 8005ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cea:	d802      	bhi.n	8005cf2 <UART_SetConfig+0x212>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <UART_SetConfig+0x220>
 8005cf0:	e012      	b.n	8005d18 <UART_SetConfig+0x238>
 8005cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf6:	d006      	beq.n	8005d06 <UART_SetConfig+0x226>
 8005cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cfc:	d009      	beq.n	8005d12 <UART_SetConfig+0x232>
 8005cfe:	e00b      	b.n	8005d18 <UART_SetConfig+0x238>
 8005d00:	2300      	movs	r3, #0
 8005d02:	76fb      	strb	r3, [r7, #27]
 8005d04:	e034      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d06:	2302      	movs	r3, #2
 8005d08:	76fb      	strb	r3, [r7, #27]
 8005d0a:	e031      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	76fb      	strb	r3, [r7, #27]
 8005d10:	e02e      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d12:	2308      	movs	r3, #8
 8005d14:	76fb      	strb	r3, [r7, #27]
 8005d16:	e02b      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	76fb      	strb	r3, [r7, #27]
 8005d1c:	bf00      	nop
 8005d1e:	e027      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <UART_SetConfig+0x2f4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d123      	bne.n	8005d72 <UART_SetConfig+0x292>
 8005d2a:	4b2c      	ldr	r3, [pc, #176]	; (8005ddc <UART_SetConfig+0x2fc>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d38:	d012      	beq.n	8005d60 <UART_SetConfig+0x280>
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3e:	d802      	bhi.n	8005d46 <UART_SetConfig+0x266>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <UART_SetConfig+0x274>
 8005d44:	e012      	b.n	8005d6c <UART_SetConfig+0x28c>
 8005d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4a:	d006      	beq.n	8005d5a <UART_SetConfig+0x27a>
 8005d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d50:	d009      	beq.n	8005d66 <UART_SetConfig+0x286>
 8005d52:	e00b      	b.n	8005d6c <UART_SetConfig+0x28c>
 8005d54:	2300      	movs	r3, #0
 8005d56:	76fb      	strb	r3, [r7, #27]
 8005d58:	e00a      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	76fb      	strb	r3, [r7, #27]
 8005d5e:	e007      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d60:	2304      	movs	r3, #4
 8005d62:	76fb      	strb	r3, [r7, #27]
 8005d64:	e004      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d66:	2308      	movs	r3, #8
 8005d68:	76fb      	strb	r3, [r7, #27]
 8005d6a:	e001      	b.n	8005d70 <UART_SetConfig+0x290>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	76fb      	strb	r3, [r7, #27]
 8005d70:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <UART_SetConfig+0x2f4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	f040 80ee 	bne.w	8005f5a <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d7e:	7efb      	ldrb	r3, [r7, #27]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d837      	bhi.n	8005df4 <UART_SetConfig+0x314>
 8005d84:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x2ac>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005df5 	.word	0x08005df5
 8005d94:	08005db9 	.word	0x08005db9
 8005d98:	08005df5 	.word	0x08005df5
 8005d9c:	08005dbf 	.word	0x08005dbf
 8005da0:	08005df5 	.word	0x08005df5
 8005da4:	08005df5 	.word	0x08005df5
 8005da8:	08005df5 	.word	0x08005df5
 8005dac:	08005dc7 	.word	0x08005dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005db0:	f7fd fb78 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8005db4:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8005db6:	e020      	b.n	8005dfa <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005db8:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <UART_SetConfig+0x310>)
 8005dba:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8005dbc:	e01d      	b.n	8005dfa <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005dbe:	f7fd fac9 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005dc2:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8005dc4:	e019      	b.n	8005dfa <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dca:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8005dcc:	e015      	b.n	8005dfa <UART_SetConfig+0x31a>
 8005dce:	bf00      	nop
 8005dd0:	efff69f3 	.word	0xefff69f3
 8005dd4:	40008000 	.word	0x40008000
 8005dd8:	40013800 	.word	0x40013800
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40004400 	.word	0x40004400
 8005de4:	40004800 	.word	0x40004800
 8005de8:	40004c00 	.word	0x40004c00
 8005dec:	40005000 	.word	0x40005000
 8005df0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	74fb      	strb	r3, [r7, #19]
        break;
 8005df8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 819e 	beq.w	800613e <UART_SetConfig+0x65e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	441a      	add	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d805      	bhi.n	8005e1e <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d202      	bcs.n	8005e24 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	74fb      	strb	r3, [r7, #19]
 8005e22:	e18c      	b.n	800613e <UART_SetConfig+0x65e>
      }
      else
      {
        switch (clocksource)
 8005e24:	7efb      	ldrb	r3, [r7, #27]
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	f200 8084 	bhi.w	8005f34 <UART_SetConfig+0x454>
 8005e2c:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x354>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005f35 	.word	0x08005f35
 8005e3c:	08005e99 	.word	0x08005e99
 8005e40:	08005f35 	.word	0x08005f35
 8005e44:	08005ecd 	.word	0x08005ecd
 8005e48:	08005f35 	.word	0x08005f35
 8005e4c:	08005f35 	.word	0x08005f35
 8005e50:	08005f35 	.word	0x08005f35
 8005e54:	08005f0b 	.word	0x08005f0b
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005e58:	f7fd fb24 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f04f 0400 	mov.w	r4, #0
 8005e62:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8005e66:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8005e6a:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	f04f 0400 	mov.w	r4, #0
 8005e78:	eb18 0003 	adds.w	r0, r8, r3
 8005e7c:	eb49 0104 	adc.w	r1, r9, r4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f04f 0400 	mov.w	r4, #0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4623      	mov	r3, r4
 8005e8c:	f7fa f99c 	bl	80001c8 <__aeabi_uldivmod>
 8005e90:	4603      	mov	r3, r0
 8005e92:	460c      	mov	r4, r1
 8005e94:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005e96:	e050      	b.n	8005f3a <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	f04f 0400 	mov.w	r4, #0
 8005ea2:	49ad      	ldr	r1, [pc, #692]	; (8006158 <UART_SetConfig+0x678>)
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	eb13 0801 	adds.w	r8, r3, r1
 8005eac:	eb44 0902 	adc.w	r9, r4, r2
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f04f 0400 	mov.w	r4, #0
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	f7fa f982 	bl	80001c8 <__aeabi_uldivmod>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005eca:	e036      	b.n	8005f3a <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ecc:	f7fd fa42 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	021d      	lsls	r5, r3, #8
 8005eda:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8005ede:	0214      	lsls	r4, r2, #8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	18a0      	adds	r0, r4, r2
 8005eee:	eb45 0103 	adc.w	r1, r5, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f04f 0400 	mov.w	r4, #0
 8005efa:	461a      	mov	r2, r3
 8005efc:	4623      	mov	r3, r4
 8005efe:	f7fa f963 	bl	80001c8 <__aeabi_uldivmod>
 8005f02:	4603      	mov	r3, r0
 8005f04:	460c      	mov	r4, r1
 8005f06:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005f08:	e017      	b.n	8005f3a <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	f04f 0400 	mov.w	r4, #0
 8005f14:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005f18:	f144 0100 	adc.w	r1, r4, #0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f04f 0400 	mov.w	r4, #0
 8005f24:	461a      	mov	r2, r3
 8005f26:	4623      	mov	r3, r4
 8005f28:	f7fa f94e 	bl	80001c8 <__aeabi_uldivmod>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005f32:	e002      	b.n	8005f3a <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	74fb      	strb	r3, [r7, #19]
            break;
 8005f38:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f40:	d308      	bcc.n	8005f54 <UART_SetConfig+0x474>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f48:	d204      	bcs.n	8005f54 <UART_SetConfig+0x474>
        {
          huart->Instance->BRR = usartdiv;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	e0f4      	b.n	800613e <UART_SetConfig+0x65e>
        }
        else
        {
          ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	74fb      	strb	r3, [r7, #19]
 8005f58:	e0f1      	b.n	800613e <UART_SetConfig+0x65e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f62:	d17e      	bne.n	8006062 <UART_SetConfig+0x582>
  {
    switch (clocksource)
 8005f64:	7efb      	ldrb	r3, [r7, #27]
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d85b      	bhi.n	8006022 <UART_SetConfig+0x542>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x490>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005fb3 	.word	0x08005fb3
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08006023 	.word	0x08006023
 8005f80:	08005fed 	.word	0x08005fed
 8005f84:	08006023 	.word	0x08006023
 8005f88:	08006023 	.word	0x08006023
 8005f8c:	08006023 	.word	0x08006023
 8005f90:	0800600b 	.word	0x0800600b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005f94:	f7fd fa86 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	005a      	lsls	r2, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	441a      	add	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005fb0:	e03a      	b.n	8006028 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005fb2:	f7fd fa8d 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	005a      	lsls	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005fce:	e02b      	b.n	8006028 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005fda:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6852      	ldr	r2, [r2, #4]
 8005fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005fea:	e01d      	b.n	8006028 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005fec:	f7fd f9b2 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	005a      	lsls	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	b29b      	uxth	r3, r3
 8006006:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006008:	e00e      	b.n	8006028 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	b29b      	uxth	r3, r3
 800601e:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006020:	e002      	b.n	8006028 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	74fb      	strb	r3, [r7, #19]
        break;
 8006026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b0f      	cmp	r3, #15
 800602c:	d916      	bls.n	800605c <UART_SetConfig+0x57c>
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006034:	d212      	bcs.n	800605c <UART_SetConfig+0x57c>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f023 030f 	bic.w	r3, r3, #15
 800603e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	b29b      	uxth	r3, r3
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	b29a      	uxth	r2, r3
 800604c:	897b      	ldrh	r3, [r7, #10]
 800604e:	4313      	orrs	r3, r2
 8006050:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	897a      	ldrh	r2, [r7, #10]
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	e070      	b.n	800613e <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	74fb      	strb	r3, [r7, #19]
 8006060:	e06d      	b.n	800613e <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8006062:	7efb      	ldrb	r3, [r7, #27]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d859      	bhi.n	800611c <UART_SetConfig+0x63c>
 8006068:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <UART_SetConfig+0x590>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006095 	.word	0x08006095
 8006074:	080060b1 	.word	0x080060b1
 8006078:	080060cd 	.word	0x080060cd
 800607c:	0800611d 	.word	0x0800611d
 8006080:	080060e9 	.word	0x080060e9
 8006084:	0800611d 	.word	0x0800611d
 8006088:	0800611d 	.word	0x0800611d
 800608c:	0800611d 	.word	0x0800611d
 8006090:	08006105 	.word	0x08006105
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006094:	f7fd fa06 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8006098:	4602      	mov	r2, r0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	441a      	add	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	617b      	str	r3, [r7, #20]
#endif
        break;
 80060ae:	e038      	b.n	8006122 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80060b0:	f7fd fa0e 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	617b      	str	r3, [r7, #20]
#endif
        break;
 80060ca:	e02a      	b.n	8006122 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80060d6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6852      	ldr	r2, [r2, #4]
 80060de:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80060e6:	e01c      	b.n	8006122 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80060e8:	f7fd f934 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80060ec:	4602      	mov	r2, r0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	b29b      	uxth	r3, r3
 8006100:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006102:	e00e      	b.n	8006122 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	fbb2 f3f3 	udiv	r3, r2, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	617b      	str	r3, [r7, #20]
#endif
        break;
 800611a:	e002      	b.n	8006122 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	74fb      	strb	r3, [r7, #19]
        break;
 8006120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d908      	bls.n	800613a <UART_SetConfig+0x65a>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612e:	d204      	bcs.n	800613a <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e001      	b.n	800613e <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800614a:	7cfb      	ldrb	r3, [r7, #19]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006156:	bf00      	nop
 8006158:	f4240000 	.word	0xf4240000

0800615c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	6852      	ldr	r2, [r2, #4]
 800617a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	6852      	ldr	r2, [r2, #4]
 800619c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	6852      	ldr	r2, [r2, #4]
 80061be:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	6852      	ldr	r2, [r2, #4]
 80061e0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	6892      	ldr	r2, [r2, #8]
 8006202:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800620a:	430a      	orrs	r2, r1
 800620c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	6892      	ldr	r2, [r2, #8]
 8006224:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800622c:	430a      	orrs	r2, r1
 800622e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01a      	beq.n	8006272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	6852      	ldr	r2, [r2, #4]
 8006246:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800625a:	d10a      	bne.n	8006272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	6852      	ldr	r2, [r2, #4]
 8006266:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	6852      	ldr	r2, [r2, #4]
 8006288:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006290:	430a      	orrs	r2, r1
 8006292:	605a      	str	r2, [r3, #4]
  }
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80062b2:	f7fa f963 	bl	800057c <HAL_GetTick>
 80062b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d10e      	bne.n	80062e4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f82c 	bl	8006332 <UART_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e022      	b.n	800632a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d10e      	bne.n	8006310 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f816 	bl	8006332 <UART_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e00c      	b.n	800632a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4613      	mov	r3, r2
 8006340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006342:	e02c      	b.n	800639e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d028      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <UART_WaitOnFlagUntilTimeout+0x30>
 8006352:	f7fa f913 	bl	800057c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	1ad2      	subs	r2, r2, r3
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	429a      	cmp	r2, r3
 8006360:	d91d      	bls.n	800639e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006370:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	6892      	ldr	r2, [r2, #8]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e00f      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	401a      	ands	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	bf0c      	ite	eq
 80063ae:	2301      	moveq	r3, #1
 80063b0:	2300      	movne	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	461a      	mov	r2, r3
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d0c3      	beq.n	8006344 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c6:	b084      	sub	sp, #16
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	f107 0014 	add.w	r0, r7, #20
 80063d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d120      	bne.n	8006420 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006408:	2b01      	cmp	r3, #1
 800640a:	d105      	bne.n	8006418 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    (void)USB_CoreReset(USBx);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f927 	bl	800666c <USB_CoreReset>
 800641e:	e00c      	b.n	800643a <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    (void)USB_CoreReset(USBx);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f91d 	bl	800666c <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006446:	b004      	add	sp, #16
 8006448:	4770      	bx	lr

0800644a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f043 0201 	orr.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f023 0201 	bic.w	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d106      	bne.n	80064ba <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60da      	str	r2, [r3, #12]
 80064b8:	e00b      	b.n	80064d2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	e001      	b.n	80064d2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e003      	b.n	80064da <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064d2:	2032      	movs	r0, #50	; 0x32
 80064d4:	f7fa f85e 	bl	8000594 <HAL_Delay>

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	019b      	lsls	r3, r3, #6
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a09      	ldr	r2, [pc, #36]	; (800652c <USB_FlushTxFifo+0x48>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e006      	b.n	800651e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b20      	cmp	r3, #32
 800651a:	d0f0      	beq.n	80064fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	00030d40 	.word	0x00030d40

08006530 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2210      	movs	r2, #16
 8006540:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a09      	ldr	r2, [pc, #36]	; (8006570 <USB_FlushRxFifo+0x40>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d901      	bls.n	8006554 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e006      	b.n	8006562 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b10      	cmp	r3, #16
 800655e:	d0f0      	beq.n	8006542 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	00030d40 	.word	0x00030d40

08006574 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8006574:	b480      	push	{r7}
 8006576:	b089      	sub	sp, #36	; 0x24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	460b      	mov	r3, r1
 8006584:	71fb      	strb	r3, [r7, #7]
 8006586:	4613      	mov	r3, r2
 8006588:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006592:	88bb      	ldrh	r3, [r7, #4]
 8006594:	3303      	adds	r3, #3
 8006596:	089b      	lsrs	r3, r3, #2
 8006598:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800659a:	2300      	movs	r3, #0
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e00f      	b.n	80065c0 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	031a      	lsls	r2, r3, #12
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ac:	461a      	mov	r2, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	3304      	adds	r3, #4
 80065b8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	3301      	adds	r3, #1
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d3eb      	bcc.n	80065a0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b089      	sub	sp, #36	; 0x24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	3303      	adds	r3, #3
 80065f0:	089b      	lsrs	r3, r3, #2
 80065f2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	e00b      	b.n	8006612 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	601a      	str	r2, [r3, #0]
    pDest++;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	3304      	adds	r3, #4
 800660a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	3301      	adds	r3, #1
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	429a      	cmp	r2, r3
 8006618:	d3ef      	bcc.n	80065fa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800661a:	69fb      	ldr	r3, [r7, #28]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3724      	adds	r7, #36	; 0x24
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4013      	ands	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006640:	68fb      	ldr	r3, [r7, #12]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0301 	and.w	r3, r3, #1
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <USB_CoreReset+0x64>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e01b      	b.n	80066c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	daf2      	bge.n	8006678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f043 0201 	orr.w	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <USB_CoreReset+0x64>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e006      	b.n	80066c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d0f0      	beq.n	80066a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	00030d40 	.word	0x00030d40

080066d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d4:	b084      	sub	sp, #16
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	f107 001c 	add.w	r0, r7, #28
 80066e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066f0:	461a      	mov	r2, r3
 80066f2:	2300      	movs	r3, #0
 80066f4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the FS/LS support mode only */
  if ((cfg.speed == USB_OTG_SPEED_FULL) && (USBx != USB_OTG_FS))
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	2b03      	cmp	r3, #3
 8006712:	d10f      	bne.n	8006734 <USB_HostInit+0x60>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800671a:	d00b      	beq.n	8006734 <USB_HostInit+0x60>
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006722:	461a      	mov	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f043 0304 	orr.w	r3, r3, #4
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e00a      	b.n	800674a <USB_HostInit+0x76>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673a:	461a      	mov	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f023 0304 	bic.w	r3, r3, #4
 8006748:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800674a:	2110      	movs	r1, #16
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fec9 	bl	80064e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff feec 	bl	8006530 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e015      	b.n	800678a <USB_HostInit+0xb6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	461a      	mov	r2, r3
 800676c:	f04f 33ff 	mov.w	r3, #4294967295
 8006770:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677e:	461a      	mov	r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	6a3a      	ldr	r2, [r7, #32]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	429a      	cmp	r2, r3
 8006790:	d8e5      	bhi.n	800675e <USB_HostInit+0x8a>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006792:	2101      	movs	r1, #1
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f8ab 	bl	80068f0 <USB_DriveVbus>

  HAL_Delay(200U);
 800679a:	20c8      	movs	r0, #200	; 0xc8
 800679c:	f7f9 fefa 	bl	8000594 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ac:	615a      	str	r2, [r3, #20]

  if (USBx == USB_OTG_FS)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067b4:	d10a      	bne.n	80067cc <USB_HostInit+0xf8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2280      	movs	r2, #128	; 0x80
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a13      	ldr	r2, [pc, #76]	; (800680c <USB_HostInit+0x138>)
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a12      	ldr	r2, [pc, #72]	; (8006810 <USB_HostInit+0x13c>)
 80067c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80067ca:	e00a      	b.n	80067e2 <USB_HostInit+0x10e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a0f      	ldr	r2, [pc, #60]	; (8006814 <USB_HostInit+0x140>)
 80067d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a0e      	ldr	r2, [pc, #56]	; (8006818 <USB_HostInit+0x144>)
 80067de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	f043 0210 	orr.w	r2, r3, #16
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <USB_HostInit+0x148>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006806:	b004      	add	sp, #16
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	00600080 	.word	0x00600080
 8006810:	004000e0 	.word	0x004000e0
 8006814:	01000200 	.word	0x01000200
 8006818:	00e00300 	.word	0x00e00300
 800681c:	a3200008 	.word	0xa3200008

08006820 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006836:	461a      	mov	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f023 0303 	bic.w	r3, r3, #3
 8006844:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684c:	4619      	mov	r1, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	4313      	orrs	r3, r2
 800685e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d107      	bne.n	8006876 <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686c:	461a      	mov	r2, r3
 800686e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006872:	6053      	str	r3, [r2, #4]
 8006874:	e009      	b.n	800688a <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d106      	bne.n	800688a <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006882:	461a      	mov	r2, r3
 8006884:	f241 7370 	movw	r3, #6000	; 0x1770
 8006888:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068c0:	461a      	mov	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80068ca:	2064      	movs	r0, #100	; 0x64
 80068cc:	f7f9 fe62 	bl	8000594 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068d6:	461a      	mov	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068de:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80068e0:	200a      	movs	r0, #10
 80068e2:	f7f9 fe57 	bl	8000594 <HAL_Delay>

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006914:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <USB_DriveVbus+0x46>
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d107      	bne.n	8006936 <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800692c:	461a      	mov	r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006934:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006940:	d10a      	bne.n	8006958 <USB_DriveVbus+0x68>
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d107      	bne.n	8006958 <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006956:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	0c5b      	lsrs	r3, r3, #17
 8006984:	f003 0303 	and.w	r3, r3, #3
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	b29b      	uxth	r3, r3
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	4608      	mov	r0, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	461a      	mov	r2, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	70fb      	strb	r3, [r7, #3]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70bb      	strb	r3, [r7, #2]
 80069ce:	4613      	mov	r3, r2
 80069d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	461a      	mov	r2, r3
 80069e8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80069ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d86a      	bhi.n	8006acc <USB_HC_Init+0x114>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USB_HC_Init+0x44>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a0d 	.word	0x08006a0d
 8006a00:	08006a8d 	.word	0x08006a8d
 8006a04:	08006a0d 	.word	0x08006a0d
 8006a08:	08006a4d 	.word	0x08006a4d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006a1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da54      	bge.n	8006ad2 <USB_HC_Init+0x11a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a34:	4619      	mov	r1, r3
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a48:	60cb      	str	r3, [r1, #12]
      }
      break;
 8006a4a:	e042      	b.n	8006ad2 <USB_HC_Init+0x11a>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006a5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	da36      	bge.n	8006ad6 <USB_HC_Init+0x11e>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a74:	4619      	mov	r1, r3
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a88:	60cb      	str	r3, [r1, #12]
      }

      break;
 8006a8a:	e024      	b.n	8006ad6 <USB_HC_Init+0x11e>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f240 2325 	movw	r3, #549	; 0x225
 8006a9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006aa0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	da18      	bge.n	8006ada <USB_HC_Init+0x122>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ac8:	60cb      	str	r3, [r1, #12]
      }
      break;
 8006aca:	e006      	b.n	8006ada <USB_HC_Init+0x122>

    default:
      ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad0:	e004      	b.n	8006adc <USB_HC_Init+0x124>
      break;
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <USB_HC_Init+0x124>
      break;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <USB_HC_Init+0x124>
      break;
 8006ada:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aea:	699a      	ldr	r2, [r3, #24]
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	2101      	movs	r1, #1
 8006af4:	fa01 f303 	lsl.w	r3, r1, r3
 8006af8:	4313      	orrs	r3, r2
 8006afa:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006b08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	da03      	bge.n	8006b18 <USB_HC_Init+0x160>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	e001      	b.n	8006b1c <USB_HC_Init+0x164>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006b1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d103      	bne.n	8006b2c <USB_HC_Init+0x174>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e001      	b.n	8006b30 <USB_HC_Init+0x178>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	787b      	ldrb	r3, [r7, #1]
 8006b40:	059b      	lsls	r3, r3, #22
 8006b42:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b46:	78bb      	ldrb	r3, [r7, #2]
 8006b48:	02db      	lsls	r3, r3, #11
 8006b4a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b4e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b54:	049b      	lsls	r3, r3, #18
 8006b56:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b6c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006b6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d110      	bne.n	8006b98 <USB_HC_Init+0x1e0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b82:	4619      	mov	r1, r3
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b96:	600b      	str	r3, [r1, #0]
  }

  return ret;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop

08006ba8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bc0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d018      	beq.n	8006bfc <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	8912      	ldrh	r2, [r2, #8]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	8912      	ldrh	r2, [r2, #8]
 8006bda:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bde:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006be0:	8bfa      	ldrh	r2, [r7, #30]
 8006be2:	8a7b      	ldrh	r3, [r7, #18]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d90b      	bls.n	8006c00 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006be8:	8a7b      	ldrh	r3, [r7, #18]
 8006bea:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006bec:	8bfb      	ldrh	r3, [r7, #30]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	8912      	ldrh	r2, [r2, #8]
 8006bf2:	fb02 f203 	mul.w	r2, r2, r3
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	611a      	str	r2, [r3, #16]
 8006bfa:	e001      	b.n	8006c00 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d006      	beq.n	8006c16 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006c08:	8bfb      	ldrh	r3, [r7, #30]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	8912      	ldrh	r2, [r2, #8]
 8006c0e:	fb02 f203 	mul.w	r2, r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c22:	4618      	mov	r0, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c2c:	8bfb      	ldrh	r3, [r7, #30]
 8006c2e:	04d9      	lsls	r1, r3, #19
 8006c30:	4b5c      	ldr	r3, [pc, #368]	; (8006da4 <USB_HC_StartXfer+0x1fc>)
 8006c32:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c34:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	7a9b      	ldrb	r3, [r3, #10]
 8006c3a:	075b      	lsls	r3, r3, #29
 8006c3c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c42:	6103      	str	r3, [r0, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bf0c      	ite	eq
 8006c54:	2301      	moveq	r3, #1
 8006c56:	2300      	movne	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c68:	4619      	mov	r1, r3
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c7c:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	7c7b      	ldrb	r3, [r7, #17]
 8006c9c:	075b      	lsls	r3, r3, #29
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a3d      	ldr	r2, [pc, #244]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006cb2:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cb4:	4b3c      	ldr	r3, [pc, #240]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cbc:	4a3a      	ldr	r2, [pc, #232]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006cbe:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	78db      	ldrb	r3, [r3, #3]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d006      	beq.n	8006cd6 <USB_HC_StartXfer+0x12e>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006cc8:	4b37      	ldr	r3, [pc, #220]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd0:	4a35      	ldr	r2, [pc, #212]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	e005      	b.n	8006ce2 <USB_HC_StartXfer+0x13a>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006cd6:	4b34      	ldr	r3, [pc, #208]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cde:	4a32      	ldr	r2, [pc, #200]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006ce0:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ce2:	4b31      	ldr	r3, [pc, #196]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cea:	4a2f      	ldr	r2, [pc, #188]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006cec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	; (8006da8 <USB_HC_StartXfer+0x200>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	78db      	ldrb	r3, [r3, #3]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d147      	bne.n	8006d9a <USB_HC_StartXfer+0x1f2>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d043      	beq.n	8006d9a <USB_HC_StartXfer+0x1f2>
    {
      switch (hc->ep_type)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	79db      	ldrb	r3, [r3, #7]
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d830      	bhi.n	8006d7c <USB_HC_StartXfer+0x1d4>
 8006d1a:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <USB_HC_StartXfer+0x178>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d31 	.word	0x08006d31
 8006d24:	08006d55 	.word	0x08006d55
 8006d28:	08006d31 	.word	0x08006d31
 8006d2c:	08006d55 	.word	0x08006d55
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	3303      	adds	r3, #3
 8006d36:	089b      	lsrs	r3, r3, #2
 8006d38:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d3a:	89fa      	ldrh	r2, [r7, #14]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d91c      	bls.n	8006d80 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f043 0220 	orr.w	r2, r3, #32
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	619a      	str	r2, [r3, #24]
          }
          break;
 8006d52:	e015      	b.n	8006d80 <USB_HC_StartXfer+0x1d8>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	3303      	adds	r3, #3
 8006d5a:	089b      	lsrs	r3, r3, #2
 8006d5c:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006d5e:	89fa      	ldrh	r2, [r7, #14]
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d90a      	bls.n	8006d84 <USB_HC_StartXfer+0x1dc>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	619a      	str	r2, [r3, #24]
          }
          break;
 8006d7a:	e003      	b.n	8006d84 <USB_HC_StartXfer+0x1dc>

        default:
          break;
 8006d7c:	bf00      	nop
 8006d7e:	e002      	b.n	8006d86 <USB_HC_StartXfer+0x1de>
          break;
 8006d80:	bf00      	nop
 8006d82:	e000      	b.n	8006d86 <USB_HC_StartXfer+0x1de>
          break;
 8006d84:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68d9      	ldr	r1, [r3, #12]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	785a      	ldrb	r2, [r3, #1]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff fbed 	bl	8006574 <USB_WritePacket>
    }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	1ff80000 	.word	0x1ff80000
 8006da8:	200000a4 	.word	0x200000a4

08006dac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	b29b      	uxth	r3, r3
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b087      	sub	sp, #28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	0c9b      	lsrs	r3, r3, #18
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <USB_HC_Halt+0x3a>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d171      	bne.n	8006eec <USB_HC_Halt+0x11e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e14:	4619      	mov	r1, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e28:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d146      	bne.n	8006ec4 <USB_HC_Halt+0xf6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e42:	4619      	mov	r1, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e56:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e64:	4619      	mov	r1, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e78:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e86:	4619      	mov	r1, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e9a:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ea8:	d81e      	bhi.n	8006ee8 <USB_HC_Halt+0x11a>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec0:	d0ec      	beq.n	8006e9c <USB_HC_Halt+0xce>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ec2:	e086      	b.n	8006fd2 <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ee4:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ee6:	e074      	b.n	8006fd2 <USB_HC_Halt+0x204>
          break;
 8006ee8:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006eea:	e072      	b.n	8006fd2 <USB_HC_Halt+0x204>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef8:	4619      	mov	r1, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f0c:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d146      	bne.n	8006fac <USB_HC_Halt+0x1de>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f3e:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f60:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	4619      	mov	r1, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f82:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	3301      	adds	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f90:	d81e      	bhi.n	8006fd0 <USB_HC_Halt+0x202>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa8:	d0ec      	beq.n	8006f84 <USB_HC_Halt+0x1b6>
 8006faa:	e012      	b.n	8006fd2 <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fcc:	600b      	str	r3, [r1, #0]
 8006fce:	e000      	b.n	8006fd2 <USB_HC_Halt+0x204>
          break;
 8006fd0:	bf00      	nop
    }
  }

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff fa3b 	bl	800646c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ff6:	2110      	movs	r1, #16
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff fa73 	bl	80064e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fa96 	bl	8006530 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	e01f      	b.n	800704a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007020:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007028:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007030:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703e:	461a      	mov	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	3301      	adds	r3, #1
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b0f      	cmp	r3, #15
 800704e:	d9dc      	bls.n	800700a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007050:	2300      	movs	r3, #0
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	e034      	b.n	80070c0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800706c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007074:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800707c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708a:	461a      	mov	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	3301      	adds	r3, #1
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800709c:	d80c      	bhi.n	80070b8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b4:	d0ec      	beq.n	8007090 <USB_StopHost+0xb0>
 80070b6:	e000      	b.n	80070ba <USB_StopHost+0xda>
        break;
 80070b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	3301      	adds	r3, #1
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	2b0f      	cmp	r3, #15
 80070c4:	d9c7      	bls.n	8007056 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070cc:	461a      	mov	r2, r3
 80070ce:	f04f 33ff 	mov.w	r3, #4294967295
 80070d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff f9b4 	bl	800644a <USB_EnableGlobalInt>

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b089      	sub	sp, #36	; 0x24
 80070f0:	af04      	add	r7, sp, #16
 80070f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80070f4:	2302      	movs	r3, #2
 80070f6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80070f8:	2301      	movs	r3, #1
 80070fa:	2202      	movs	r2, #2
 80070fc:	2102      	movs	r1, #2
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fc3a 	bl	8007978 <USBH_FindInterface>
 8007104:	4603      	mov	r3, r0
 8007106:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2bff      	cmp	r3, #255	; 0xff
 800710c:	f000 812a 	beq.w	8007364 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fc13 	bl	8007940 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8007120:	2050      	movs	r0, #80	; 0x50
 8007122:	f003 f869 	bl	800a1f8 <malloc>
 8007126:	4603      	mov	r3, r0
 8007128:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	211a      	movs	r1, #26
 800713a:	fb01 f303 	mul.w	r3, r1, r3
 800713e:	4413      	add	r3, r2
 8007140:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b25b      	sxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	da15      	bge.n	8007178 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	211a      	movs	r1, #26
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	4413      	add	r3, r2
 8007158:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	211a      	movs	r1, #26
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fd21 	bl	8008bc6 <USBH_AllocPipe>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	7819      	ldrb	r1, [r3, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	7858      	ldrb	r0, [r3, #1]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	8952      	ldrh	r2, [r2, #10]
 80071a4:	9202      	str	r2, [sp, #8]
 80071a6:	2203      	movs	r2, #3
 80071a8:	9201      	str	r2, [sp, #4]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	4623      	mov	r3, r4
 80071ae:	4602      	mov	r2, r0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fcd9 	bl	8008b68 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f002 ff40 	bl	800a044 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80071c4:	2300      	movs	r3, #0
 80071c6:	2200      	movs	r2, #0
 80071c8:	210a      	movs	r1, #10
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fbd4 	bl	8007978 <USBH_FindInterface>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2bff      	cmp	r3, #255	; 0xff
 80071d8:	f000 80c4 	beq.w	8007364 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	211a      	movs	r1, #26
 80071e2:	fb01 f303 	mul.w	r3, r1, r3
 80071e6:	4413      	add	r3, r2
 80071e8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da16      	bge.n	8007222 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	211a      	movs	r1, #26
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	4413      	add	r3, r2
 8007200:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007204:	781a      	ldrb	r2, [r3, #0]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	211a      	movs	r1, #26
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	4413      	add	r3, r2
 8007216:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	835a      	strh	r2, [r3, #26]
 8007220:	e015      	b.n	800724e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	211a      	movs	r1, #26
 8007228:	fb01 f303 	mul.w	r3, r1, r3
 800722c:	4413      	add	r3, r2
 800722e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	211a      	movs	r1, #26
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	4413      	add	r3, r2
 8007244:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007248:	881a      	ldrh	r2, [r3, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	211a      	movs	r1, #26
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b25b      	sxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	da16      	bge.n	8007294 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	211a      	movs	r1, #26
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	4413      	add	r3, r2
 8007272:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	211a      	movs	r1, #26
 8007282:	fb01 f303 	mul.w	r3, r1, r3
 8007286:	4413      	add	r3, r2
 8007288:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800728c:	881a      	ldrh	r2, [r3, #0]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	835a      	strh	r2, [r3, #26]
 8007292:	e015      	b.n	80072c0 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	211a      	movs	r1, #26
 800729a:	fb01 f303 	mul.w	r3, r1, r3
 800729e:	4413      	add	r3, r2
 80072a0:	f203 3352 	addw	r3, r3, #850	; 0x352
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	211a      	movs	r1, #26
 80072b0:	fb01 f303 	mul.w	r3, r1, r3
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80072ba:	881a      	ldrh	r2, [r3, #0]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	7b9b      	ldrb	r3, [r3, #14]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 fc7d 	bl	8008bc6 <USBH_AllocPipe>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	7bdb      	ldrb	r3, [r3, #15]
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 fc73 	bl	8008bc6 <USBH_AllocPipe>
 80072e0:	4603      	mov	r3, r0
 80072e2:	461a      	mov	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	7b59      	ldrb	r1, [r3, #13]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	7b98      	ldrb	r0, [r3, #14]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	8b12      	ldrh	r2, [r2, #24]
 8007300:	9202      	str	r2, [sp, #8]
 8007302:	2202      	movs	r2, #2
 8007304:	9201      	str	r2, [sp, #4]
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	4623      	mov	r3, r4
 800730a:	4602      	mov	r2, r0
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 fc2b 	bl	8008b68 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	7b19      	ldrb	r1, [r3, #12]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	7bd8      	ldrb	r0, [r3, #15]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	8b52      	ldrh	r2, [r2, #26]
 800732a:	9202      	str	r2, [sp, #8]
 800732c:	2202      	movs	r2, #2
 800732e:	9201      	str	r2, [sp, #4]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4623      	mov	r3, r4
 8007334:	4602      	mov	r2, r0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fc16 	bl	8008b68 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	7b5b      	ldrb	r3, [r3, #13]
 8007348:	2200      	movs	r2, #0
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f002 fe79 	bl	800a044 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	7b1b      	ldrb	r3, [r3, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f002 fe72 	bl	800a044 <USBH_LL_SetToggle>
      status = USBH_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	bd90      	pop	{r4, r7, pc}

0800736e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00e      	beq.n	80073a6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fc09 	bl	8008ba6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 fc31 	bl	8008c02 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	7b1b      	ldrb	r3, [r3, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00e      	beq.n	80073cc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	7b1b      	ldrb	r3, [r3, #12]
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 fbf6 	bl	8008ba6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	7b1b      	ldrb	r3, [r3, #12]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 fc1e 	bl	8008c02 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	7b5b      	ldrb	r3, [r3, #13]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00e      	beq.n	80073f2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	7b5b      	ldrb	r3, [r3, #13]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 fbe3 	bl	8008ba6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	7b5b      	ldrb	r3, [r3, #13]
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fc0b 	bl	8008c02 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	4618      	mov	r0, r3
 8007408:	f002 fefe 	bl	800a208 <free>
    phost->pActiveClass->pData = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007412:	2200      	movs	r2, #0
 8007414:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007428:	2302      	movs	r3, #2
 800742a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	3340      	adds	r3, #64	; 0x40
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f8b2 	bl	80075a6 <GetLineCoding>
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d105      	bne.n	8007458 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007452:	2102      	movs	r1, #2
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
  }
  return status;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007484:	2b04      	cmp	r3, #4
 8007486:	d877      	bhi.n	8007578 <USBH_CDC_Process+0x114>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <USBH_CDC_Process+0x2c>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074a5 	.word	0x080074a5
 8007494:	080074ab 	.word	0x080074ab
 8007498:	080074db 	.word	0x080074db
 800749c:	0800754f 	.word	0x0800754f
 80074a0:	0800755d 	.word	0x0800755d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
    break;
 80074a8:	e06d      	b.n	8007586 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f897 	bl	80075e4 <SetLineCoding>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80074c8:	e058      	b.n	800757c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d055      	beq.n	800757c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2204      	movs	r2, #4
 80074d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80074d8:	e050      	b.n	800757c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3340      	adds	r3, #64	; 0x40
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f860 	bl	80075a6 <GetLineCoding>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d126      	bne.n	800753e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007502:	791b      	ldrb	r3, [r3, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d13b      	bne.n	8007580 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007514:	429a      	cmp	r2, r3
 8007516:	d133      	bne.n	8007580 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007524:	429a      	cmp	r2, r3
 8007526:	d12b      	bne.n	8007580 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007530:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007532:	429a      	cmp	r2, r3
 8007534:	d124      	bne.n	8007580 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f95a 	bl	80077f0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800753c:	e020      	b.n	8007580 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d01d      	beq.n	8007580 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2204      	movs	r2, #4
 8007548:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800754c:	e018      	b.n	8007580 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f867 	bl	8007622 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f8dc 	bl	8007712 <CDC_ProcessReception>
    break;
 800755a:	e014      	b.n	8007586 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fece 	bl	8008300 <USBH_ClrFeature>
 8007564:	4603      	mov	r3, r0
 8007566:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8007576:	e005      	b.n	8007584 <USBH_CDC_Process+0x120>

  default:
    break;
 8007578:	bf00      	nop
 800757a:	e004      	b.n	8007586 <USBH_CDC_Process+0x122>
    break;
 800757c:	bf00      	nop
 800757e:	e002      	b.n	8007586 <USBH_CDC_Process+0x122>
    break;
 8007580:	bf00      	nop
 8007582:	e000      	b.n	8007586 <USBH_CDC_Process+0x122>
    break;
 8007584:	bf00      	nop

  }

  return status;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	22a1      	movs	r2, #161	; 0xa1
 80075b4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2221      	movs	r2, #33	; 0x21
 80075ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2207      	movs	r2, #7
 80075cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2207      	movs	r2, #7
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 f873 	bl	80086c0 <USBH_CtlReq>
 80075da:	4603      	mov	r3, r0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2221      	movs	r2, #33	; 0x21
 80075f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2207      	movs	r2, #7
 800760a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2207      	movs	r2, #7
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 f854 	bl	80086c0 <USBH_CtlReq>
 8007618:	4603      	mov	r3, r0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af02      	add	r7, sp, #8
 8007628:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007634:	2300      	movs	r3, #0
 8007636:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800763e:	2b01      	cmp	r3, #1
 8007640:	d002      	beq.n	8007648 <CDC_ProcessTransmission+0x26>
 8007642:	2b02      	cmp	r3, #2
 8007644:	d025      	beq.n	8007692 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8007646:	e060      	b.n	800770a <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	8b12      	ldrh	r2, [r2, #24]
 8007650:	4293      	cmp	r3, r2
 8007652:	d90c      	bls.n	800766e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	69d9      	ldr	r1, [r3, #28]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8b1a      	ldrh	r2, [r3, #24]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	7b58      	ldrb	r0, [r3, #13]
 8007660:	2301      	movs	r3, #1
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	4603      	mov	r3, r0
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 fa3b 	bl	8008ae2 <USBH_BulkSendData>
 800766c:	e00c      	b.n	8007688 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	7b58      	ldrb	r0, [r3, #13]
 800767c:	2301      	movs	r3, #1
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4603      	mov	r3, r0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fa2d 	bl	8008ae2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007690:	e03b      	b.n	800770a <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	7b5b      	ldrb	r3, [r3, #13]
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f002 fca9 	bl	8009ff0 <USBH_LL_GetURBState>
 800769e:	4603      	mov	r3, r0
 80076a0:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80076a2:	7afb      	ldrb	r3, [r7, #11]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d128      	bne.n	80076fa <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	8b12      	ldrh	r2, [r2, #24]
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d90e      	bls.n	80076d2 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	8b12      	ldrh	r2, [r2, #24]
 80076bc:	1a9a      	subs	r2, r3, r2
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	8b12      	ldrh	r2, [r2, #24]
 80076ca:	441a      	add	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	61da      	str	r2, [r3, #28]
 80076d0:	e002      	b.n	80076d8 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80076e8:	e00e      	b.n	8007708 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f868 	bl	80077c8 <USBH_CDC_TransmitCallback>
    break;
 80076f8:	e006      	b.n	8007708 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80076fa:	7afb      	ldrb	r3, [r7, #11]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d103      	bne.n	8007708 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007708:	bf00      	nop
  }
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b086      	sub	sp, #24
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007724:	2300      	movs	r3, #0
 8007726:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800772e:	2b03      	cmp	r3, #3
 8007730:	d002      	beq.n	8007738 <CDC_ProcessReception+0x26>
 8007732:	2b04      	cmp	r3, #4
 8007734:	d00e      	beq.n	8007754 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8007736:	e043      	b.n	80077c0 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	6a19      	ldr	r1, [r3, #32]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	8b5a      	ldrh	r2, [r3, #26]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	7b1b      	ldrb	r3, [r3, #12]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 f9f1 	bl	8008b2c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2204      	movs	r2, #4
 800774e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007752:	e035      	b.n	80077c0 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	7b1b      	ldrb	r3, [r3, #12]
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f002 fc48 	bl	8009ff0 <USBH_LL_GetURBState>
 8007760:	4603      	mov	r3, r0
 8007762:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8007764:	7cfb      	ldrb	r3, [r7, #19]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d129      	bne.n	80077be <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	7b1b      	ldrb	r3, [r3, #12]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f002 fbab 	bl	8009ecc <USBH_LL_GetLastXferSize>
 8007776:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	429a      	cmp	r2, r3
 8007780:	d016      	beq.n	80077b0 <CDC_ProcessReception+0x9e>
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	8b5b      	ldrh	r3, [r3, #26]
 8007786:	461a      	mov	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	429a      	cmp	r2, r3
 800778c:	d210      	bcs.n	80077b0 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad2      	subs	r2, r2, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	441a      	add	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2203      	movs	r2, #3
 80077aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80077ae:	e006      	b.n	80077be <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f80f 	bl	80077dc <USBH_CDC_ReceiveCallback>
    break;
 80077be:	bf00      	nop
  }
}
 80077c0:	bf00      	nop
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]

}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007818:	2302      	movs	r3, #2
 800781a:	e019      	b.n	8007850 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	79fa      	ldrb	r2, [r7, #7]
 8007820:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f80f 	bl	8007858 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f002 fa8d 	bl	8009d68 <USBH_LL_Init>

  return USBH_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007864:	e008      	b.n	8007878 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	32e0      	adds	r2, #224	; 0xe0
 800786c:	2100      	movs	r1, #0
 800786e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3301      	adds	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b0e      	cmp	r3, #14
 800787c:	d9f3      	bls.n	8007866 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e009      	b.n	8007898 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4413      	add	r3, r2
 800788a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800788e:	2200      	movs	r2, #0
 8007890:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800789e:	d3f1      	bcc.n	8007884 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2240      	movs	r2, #64	; 0x40
 80078c4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d017      	beq.n	800792e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10f      	bne.n	8007928 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800790e:	1c59      	adds	r1, r3, #1
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	33dc      	adds	r3, #220	; 0xdc
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
 8007926:	e004      	b.n	8007932 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007928:	2302      	movs	r3, #2
 800792a:	73fb      	strb	r3, [r7, #15]
 800792c:	e001      	b.n	8007932 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800792e:	2302      	movs	r3, #2
 8007930:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	429a      	cmp	r2, r3
 800795a:	d204      	bcs.n	8007966 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007964:	e001      	b.n	800796a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007966:	2302      	movs	r3, #2
 8007968:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	4608      	mov	r0, r1
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	4603      	mov	r3, r0
 8007988:	70fb      	strb	r3, [r7, #3]
 800798a:	460b      	mov	r3, r1
 800798c:	70bb      	strb	r3, [r7, #2]
 800798e:	4613      	mov	r3, r2
 8007990:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80079a0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079a2:	e025      	b.n	80079f0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	221a      	movs	r2, #26
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	3308      	adds	r3, #8
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	3302      	adds	r3, #2
 80079b4:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	795b      	ldrb	r3, [r3, #5]
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d002      	beq.n	80079c6 <USBH_FindInterface+0x4e>
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	2bff      	cmp	r3, #255	; 0xff
 80079c4:	d111      	bne.n	80079ea <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80079ca:	78ba      	ldrb	r2, [r7, #2]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d002      	beq.n	80079d6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80079d0:	78bb      	ldrb	r3, [r7, #2]
 80079d2:	2bff      	cmp	r3, #255	; 0xff
 80079d4:	d109      	bne.n	80079ea <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80079da:	787a      	ldrb	r2, [r7, #1]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d002      	beq.n	80079e6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079e0:	787b      	ldrb	r3, [r7, #1]
 80079e2:	2bff      	cmp	r3, #255	; 0xff
 80079e4:	d101      	bne.n	80079ea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	e006      	b.n	80079f8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	3301      	adds	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d9d6      	bls.n	80079a4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80079f6:	23ff      	movs	r3, #255	; 0xff
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 f9e7 	bl	8009de0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8007a12:	2101      	movs	r1, #1
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f002 fafe 	bl	800a016 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af04      	add	r7, sp, #16
 8007a2a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 faec 	bl	8008012 <USBH_IsPortEnabled>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10c      	bne.n	8007a5a <USBH_Process+0x36>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d002      	beq.n	8007a5a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2203      	movs	r2, #3
 8007a58:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b0b      	cmp	r3, #11
 8007a62:	f200 814c 	bhi.w	8007cfe <USBH_Process+0x2da>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <USBH_Process+0x48>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a9d 	.word	0x08007a9d
 8007a70:	08007abf 	.word	0x08007abf
 8007a74:	08007ad3 	.word	0x08007ad3
 8007a78:	08007cd9 	.word	0x08007cd9
 8007a7c:	08007cff 	.word	0x08007cff
 8007a80:	08007b61 	.word	0x08007b61
 8007a84:	08007c8f 	.word	0x08007c8f
 8007a88:	08007b91 	.word	0x08007b91
 8007a8c:	08007bb1 	.word	0x08007bb1
 8007a90:	08007bd1 	.word	0x08007bd1
 8007a94:	08007bff 	.word	0x08007bff
 8007a98:	08007cc1 	.word	0x08007cc1
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 812c 	beq.w	8007d02 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007ab0:	20c8      	movs	r0, #200	; 0xc8
 8007ab2:	f002 fafa 	bl	800a0aa <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f002 f9ed 	bl	8009e96 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007abc:	e121      	b.n	8007d02 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	f040 811e 	bne.w	8007d06 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2202      	movs	r2, #2
 8007ace:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007ad0:	e119      	b.n	8007d06 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8007ad2:	2064      	movs	r0, #100	; 0x64
 8007ad4:	f002 fae9 	bl	800a0aa <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f002 f9b7 	bl	8009e4c <USBH_LL_GetSpeed>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2205      	movs	r2, #5
 8007aec:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007aee:	2100      	movs	r1, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f868 	bl	8008bc6 <USBH_AllocPipe>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8007afe:	2180      	movs	r1, #128	; 0x80
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f860 	bl	8008bc6 <USBH_AllocPipe>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	7919      	ldrb	r1, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007b22:	b292      	uxth	r2, r2
 8007b24:	9202      	str	r2, [sp, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	9201      	str	r2, [sp, #4]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2280      	movs	r2, #128	; 0x80
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f819 	bl	8008b68 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7959      	ldrb	r1, [r3, #5]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007b4a:	b292      	uxth	r2, r2
 8007b4c:	9202      	str	r2, [sp, #8]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	9201      	str	r2, [sp, #4]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4603      	mov	r3, r0
 8007b56:	2200      	movs	r2, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 f805 	bl	8008b68 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007b5e:	e0e3      	b.n	8007d28 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8e7 	bl	8007d34 <USBH_HandleEnum>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 80ce 	bne.w	8007d0a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d103      	bne.n	8007b88 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2208      	movs	r2, #8
 8007b84:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007b86:	e0c0      	b.n	8007d0a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2207      	movs	r2, #7
 8007b8c:	701a      	strb	r2, [r3, #0]
    break;
 8007b8e:	e0bc      	b.n	8007d0a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80b9 	beq.w	8007d0e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2208      	movs	r2, #8
 8007bac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bae:	e0ae      	b.n	8007d0e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fb59 	bl	8008272 <USBH_SetCfg>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 80a5 	bne.w	8007d12 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2209      	movs	r2, #9
 8007bcc:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007bce:	e0a0      	b.n	8007d12 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007bde:	2101      	movs	r1, #1
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fb69 	bl	80082b8 <USBH_SetFeature>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f040 8094 	bne.w	8007d16 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007bf4:	e08f      	b.n	8007d16 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	701a      	strb	r2, [r3, #0]
    break;
 8007bfc:	e08b      	b.n	8007d16 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8088 	beq.w	8007d1a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
 8007c16:	e017      	b.n	8007c48 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	33dc      	adds	r3, #220	; 0xdc
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	791a      	ldrb	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d108      	bne.n	8007c42 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	33dc      	adds	r3, #220	; 0xdc
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	3301      	adds	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0e4      	beq.n	8007c18 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d016      	beq.n	8007c86 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2206      	movs	r2, #6
 8007c6e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c76:	2103      	movs	r1, #3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007c7c:	e04d      	b.n	8007d1a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	220d      	movs	r2, #13
 8007c82:	701a      	strb	r2, [r3, #0]
    break;
 8007c84:	e049      	b.n	8007d1a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	220d      	movs	r2, #13
 8007c8a:	701a      	strb	r2, [r3, #0]
    break;
 8007c8c:	e045      	b.n	8007d1a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00f      	beq.n	8007cb8 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d136      	bne.n	8007d1e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	220b      	movs	r2, #11
 8007cb4:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007cb6:	e032      	b.n	8007d1e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	220d      	movs	r2, #13
 8007cbc:	701a      	strb	r2, [r3, #0]
    break;
 8007cbe:	e02e      	b.n	8007d1e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d02b      	beq.n	8007d22 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
    }
    break;
 8007cd6:	e024      	b.n	8007d22 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fdbd 	bl	8007858 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01e      	beq.n	8007d26 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007cfc:	e013      	b.n	8007d26 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8007cfe:	bf00      	nop
 8007d00:	e012      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d02:	bf00      	nop
 8007d04:	e010      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d06:	bf00      	nop
 8007d08:	e00e      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d0a:	bf00      	nop
 8007d0c:	e00c      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d0e:	bf00      	nop
 8007d10:	e00a      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d12:	bf00      	nop
 8007d14:	e008      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d16:	bf00      	nop
 8007d18:	e006      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d1a:	bf00      	nop
 8007d1c:	e004      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d1e:	bf00      	nop
 8007d20:	e002      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d22:	bf00      	nop
 8007d24:	e000      	b.n	8007d28 <USBH_Process+0x304>
    break;
 8007d26:	bf00      	nop
  }
 return USBH_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop

08007d34 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af04      	add	r7, sp, #16
 8007d3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b07      	cmp	r3, #7
 8007d46:	f200 80f8 	bhi.w	8007f3a <USBH_HandleEnum+0x206>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <USBH_HandleEnum+0x1c>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d71 	.word	0x08007d71
 8007d54:	08007de3 	.word	0x08007de3
 8007d58:	08007dfb 	.word	0x08007dfb
 8007d5c:	08007e71 	.word	0x08007e71
 8007d60:	08007e87 	.word	0x08007e87
 8007d64:	08007ea3 	.word	0x08007ea3
 8007d68:	08007ed7 	.word	0x08007ed7
 8007d6c:	08007f0b 	.word	0x08007f0b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007d70:	2108      	movs	r1, #8
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f9ad 	bl	80080d2 <USBH_Get_DevDesc>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 80df 	bne.w	8007f3e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	7919      	ldrb	r1, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007da4:	b292      	uxth	r2, r2
 8007da6:	9202      	str	r2, [sp, #8]
 8007da8:	2200      	movs	r2, #0
 8007daa:	9201      	str	r2, [sp, #4]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	4603      	mov	r3, r0
 8007db0:	2280      	movs	r2, #128	; 0x80
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fed8 	bl	8008b68 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	7959      	ldrb	r1, [r3, #5]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	9202      	str	r2, [sp, #8]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	9201      	str	r2, [sp, #4]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fec4 	bl	8008b68 <USBH_OpenPipe>

    }
    break;
 8007de0:	e0ad      	b.n	8007f3e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007de2:	2112      	movs	r1, #18
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f974 	bl	80080d2 <USBH_Get_DevDesc>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f040 80a8 	bne.w	8007f42 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007df8:	e0a3      	b.n	8007f42 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa14 	bl	800822a <USBH_SetAddress>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f040 809e 	bne.w	8007f46 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007e0a:	2002      	movs	r0, #2
 8007e0c:	f002 f94d 	bl	800a0aa <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	7919      	ldrb	r1, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007e32:	b292      	uxth	r2, r2
 8007e34:	9202      	str	r2, [sp, #8]
 8007e36:	2200      	movs	r2, #0
 8007e38:	9201      	str	r2, [sp, #4]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2280      	movs	r2, #128	; 0x80
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fe91 	bl	8008b68 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	7959      	ldrb	r1, [r3, #5]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007e5a:	b292      	uxth	r2, r2
 8007e5c:	9202      	str	r2, [sp, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	9201      	str	r2, [sp, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4603      	mov	r3, r0
 8007e66:	2200      	movs	r2, #0
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fe7d 	bl	8008b68 <USBH_OpenPipe>
    }
    break;
 8007e6e:	e06a      	b.n	8007f46 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007e70:	2109      	movs	r1, #9
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f955 	bl	8008122 <USBH_Get_CfgDesc>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d165      	bne.n	8007f4a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2204      	movs	r2, #4
 8007e82:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007e84:	e061      	b.n	8007f4a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f947 	bl	8008122 <USBH_Get_CfgDesc>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d159      	bne.n	8007f4e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2205      	movs	r2, #5
 8007e9e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007ea0:	e055      	b.n	8007f4e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d010      	beq.n	8007ece <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007eb8:	23ff      	movs	r3, #255	; 0xff
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f955 	bl	800816a <USBH_Get_StringDesc>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d145      	bne.n	8007f52 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2206      	movs	r2, #6
 8007eca:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007ecc:	e041      	b.n	8007f52 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2206      	movs	r2, #6
 8007ed2:	705a      	strb	r2, [r3, #1]
    break;
 8007ed4:	e03d      	b.n	8007f52 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d010      	beq.n	8007f02 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007eec:	23ff      	movs	r3, #255	; 0xff
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f93b 	bl	800816a <USBH_Get_StringDesc>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d12d      	bne.n	8007f56 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2207      	movs	r2, #7
 8007efe:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007f00:	e029      	b.n	8007f56 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2207      	movs	r2, #7
 8007f06:	705a      	strb	r2, [r3, #1]
    break;
 8007f08:	e025      	b.n	8007f56 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00f      	beq.n	8007f34 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007f20:	23ff      	movs	r3, #255	; 0xff
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f921 	bl	800816a <USBH_Get_StringDesc>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d115      	bne.n	8007f5a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007f32:	e012      	b.n	8007f5a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
    break;
 8007f38:	e00f      	b.n	8007f5a <USBH_HandleEnum+0x226>

  default:
    break;
 8007f3a:	bf00      	nop
 8007f3c:	e00e      	b.n	8007f5c <USBH_HandleEnum+0x228>
    break;
 8007f3e:	bf00      	nop
 8007f40:	e00c      	b.n	8007f5c <USBH_HandleEnum+0x228>
    break;
 8007f42:	bf00      	nop
 8007f44:	e00a      	b.n	8007f5c <USBH_HandleEnum+0x228>
    break;
 8007f46:	bf00      	nop
 8007f48:	e008      	b.n	8007f5c <USBH_HandleEnum+0x228>
    break;
 8007f4a:	bf00      	nop
 8007f4c:	e006      	b.n	8007f5c <USBH_HandleEnum+0x228>
    break;
 8007f4e:	bf00      	nop
 8007f50:	e004      	b.n	8007f5c <USBH_HandleEnum+0x228>
    break;
 8007f52:	bf00      	nop
 8007f54:	e002      	b.n	8007f5c <USBH_HandleEnum+0x228>
    break;
 8007f56:	bf00      	nop
 8007f58:	e000      	b.n	8007f5c <USBH_HandleEnum+0x228>
    break;
 8007f5a:	bf00      	nop
  }
  return Status;
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop

08007f68 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f804 	bl	8007faa <USBH_HandleSof>
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b0b      	cmp	r3, #11
 8007fba:	d10a      	bne.n	8007fd2 <USBH_HandleSof+0x28>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d005      	beq.n	8007fd2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
  }
}
 8007fd2:	bf00      	nop
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007fea:	bf00      	nop
}
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008006:	bf00      	nop
}
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10f      	bne.n	800805e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008056:	2104      	movs	r1, #4
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
 800805c:	e007      	b.n	800806e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008064:	2b01      	cmp	r3, #1
 8008066:	d102      	bne.n	800806e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 fec8 	bl	8009e16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	791b      	ldrb	r3, [r3, #4]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fdb8 	bl	8008c02 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	795b      	ldrb	r3, [r3, #5]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fdb2 	bl	8008c02 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080b6:	2105      	movs	r1, #5
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 fe8f 	bl	8009de0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2203      	movs	r2, #3
 80080c6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b086      	sub	sp, #24
 80080d6:	af02      	add	r7, sp, #8
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	460b      	mov	r3, r1
 80080dc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	4613      	mov	r3, r2
 80080ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080f0:	2100      	movs	r1, #0
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f864 	bl	80081c0 <USBH_GetDescriptor>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f203 3022 	addw	r0, r3, #802	; 0x322
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	b292      	uxth	r2, r2
 8008112:	4619      	mov	r1, r3
 8008114:	f000 f918 	bl	8008348 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8008122:	b580      	push	{r7, lr}
 8008124:	b086      	sub	sp, #24
 8008126:	af02      	add	r7, sp, #8
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	331c      	adds	r3, #28
 8008132:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8008134:	887b      	ldrh	r3, [r7, #2]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f83d 	bl	80081c0 <USBH_GetDescriptor>
 8008146:	4603      	mov	r3, r0
 8008148:	72fb      	strb	r3, [r7, #11]
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d107      	bne.n	8008160 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8008156:	887a      	ldrh	r2, [r7, #2]
 8008158:	68f9      	ldr	r1, [r7, #12]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f964 	bl	8008428 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8008160:	7afb      	ldrb	r3, [r7, #11]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b088      	sub	sp, #32
 800816e:	af02      	add	r7, sp, #8
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	461a      	mov	r2, r3
 8008176:	460b      	mov	r3, r1
 8008178:	72fb      	strb	r3, [r7, #11]
 800817a:	4613      	mov	r3, r2
 800817c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	b29b      	uxth	r3, r3
 8008182:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008186:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800818e:	893b      	ldrh	r3, [r7, #8]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	460b      	mov	r3, r1
 8008194:	2100      	movs	r1, #0
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f812 	bl	80081c0 <USBH_GetDescriptor>
 800819c:	4603      	mov	r3, r0
 800819e:	75fb      	strb	r3, [r7, #23]
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d107      	bne.n	80081b6 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081ac:	893a      	ldrh	r2, [r7, #8]
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fa37 	bl	8008624 <USBH_ParseStringDesc>
  }
  return status;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	607b      	str	r3, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	72fb      	strb	r3, [r7, #11]
 80081ce:	4613      	mov	r3, r2
 80081d0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	789b      	ldrb	r3, [r3, #2]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d11c      	bne.n	8008214 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80081da:	7afb      	ldrb	r3, [r7, #11]
 80081dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2206      	movs	r2, #6
 80081ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	893a      	ldrh	r2, [r7, #8]
 80081f0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80081f2:	893b      	ldrh	r3, [r7, #8]
 80081f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80081f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081fc:	d104      	bne.n	8008208 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f240 4209 	movw	r2, #1033	; 0x409
 8008204:	829a      	strh	r2, [r3, #20]
 8008206:	e002      	b.n	800820e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8b3a      	ldrh	r2, [r7, #24]
 8008212:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8008214:	8b3b      	ldrh	r3, [r7, #24]
 8008216:	461a      	mov	r2, r3
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fa50 	bl	80086c0 <USBH_CtlReq>
 8008220:	4603      	mov	r3, r0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	789b      	ldrb	r3, [r3, #2]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d10f      	bne.n	800825e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2205      	movs	r2, #5
 8008248:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	b29a      	uxth	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa2c 	bl	80086c0 <USBH_CtlReq>
 8008268:	4603      	mov	r3, r0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	789b      	ldrb	r3, [r3, #2]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d10e      	bne.n	80082a4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2209      	movs	r2, #9
 8008290:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	887a      	ldrh	r2, [r7, #2]
 8008296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80082a4:	2200      	movs	r2, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fa09 	bl	80086c0 <USBH_CtlReq>
 80082ae:	4603      	mov	r3, r0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	789b      	ldrb	r3, [r3, #2]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d10f      	bne.n	80082ec <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2203      	movs	r2, #3
 80082d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082ec:	2200      	movs	r2, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f9e5 	bl	80086c0 <USBH_CtlReq>
 80082f6:	4603      	mov	r3, r0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	789b      	ldrb	r3, [r3, #2]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d10f      	bne.n	8008334 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	b29a      	uxth	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8008334:	2200      	movs	r2, #0
 8008336:	2100      	movs	r1, #0
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f9c1 	bl	80086c0 <USBH_CtlReq>
 800833e:	4603      	mov	r3, r0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	785a      	ldrb	r2, [r3, #1]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	3302      	adds	r3, #2
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	b29a      	uxth	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	3303      	adds	r3, #3
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	b29b      	uxth	r3, r3
 800837a:	4313      	orrs	r3, r2
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	791a      	ldrb	r2, [r3, #4]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	795a      	ldrb	r2, [r3, #5]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	799a      	ldrb	r2, [r3, #6]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	79da      	ldrb	r2, [r3, #7]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d939      	bls.n	800841c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	3308      	adds	r3, #8
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	3309      	adds	r3, #9
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	4313      	orrs	r3, r2
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	330a      	adds	r3, #10
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	330b      	adds	r3, #11
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	4313      	orrs	r3, r2
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	330c      	adds	r3, #12
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	330d      	adds	r3, #13
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	4313      	orrs	r3, r2
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	7b9a      	ldrb	r2, [r3, #14]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	7bda      	ldrb	r2, [r3, #15]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	7c1a      	ldrb	r2, [r3, #16]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	7c5a      	ldrb	r2, [r3, #17]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	745a      	strb	r2, [r3, #17]
  }
}
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08a      	sub	sp, #40	; 0x28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	785a      	ldrb	r2, [r3, #1]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	3302      	adds	r3, #2
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b29a      	uxth	r2, r3
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	3303      	adds	r3, #3
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	b29b      	uxth	r3, r3
 800846e:	4313      	orrs	r3, r2
 8008470:	b29a      	uxth	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	791a      	ldrb	r2, [r3, #4]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	795a      	ldrb	r2, [r3, #5]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	799a      	ldrb	r2, [r3, #6]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	79da      	ldrb	r2, [r3, #7]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	7a1a      	ldrb	r2, [r3, #8]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	2b09      	cmp	r3, #9
 80084a2:	d95f      	bls.n	8008564 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80084a4:	2309      	movs	r3, #9
 80084a6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084ac:	e051      	b.n	8008552 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084ae:	f107 0316 	add.w	r3, r7, #22
 80084b2:	4619      	mov	r1, r3
 80084b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084b6:	f000 f8e8 	bl	800868a <USBH_GetNextDesc>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	785b      	ldrb	r3, [r3, #1]
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d146      	bne.n	8008552 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80084c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084c8:	221a      	movs	r2, #26
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
 80084ce:	3308      	adds	r3, #8
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	3302      	adds	r3, #2
 80084d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80084d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084da:	69f8      	ldr	r0, [r7, #28]
 80084dc:	f000 f846 	bl	800856c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084ea:	e022      	b.n	8008532 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80084ec:	f107 0316 	add.w	r3, r7, #22
 80084f0:	4619      	mov	r1, r3
 80084f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f4:	f000 f8c9 	bl	800868a <USBH_GetNextDesc>
 80084f8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d117      	bne.n	8008532 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008506:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800850a:	3201      	adds	r2, #1
 800850c:	00d2      	lsls	r2, r2, #3
 800850e:	211a      	movs	r1, #26
 8008510:	fb01 f303 	mul.w	r3, r1, r3
 8008514:	4413      	add	r3, r2
 8008516:	3308      	adds	r3, #8
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	3304      	adds	r3, #4
 800851e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8008520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008522:	69b8      	ldr	r0, [r7, #24]
 8008524:	f000 f851 	bl	80085ca <USBH_ParseEPDesc>
            ep_ix++;
 8008528:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800852c:	3301      	adds	r3, #1
 800852e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	791b      	ldrb	r3, [r3, #4]
 8008536:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800853a:	429a      	cmp	r2, r3
 800853c:	d204      	bcs.n	8008548 <USBH_ParseCfgDesc+0x120>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	885a      	ldrh	r2, [r3, #2]
 8008542:	8afb      	ldrh	r3, [r7, #22]
 8008544:	429a      	cmp	r2, r3
 8008546:	d8d1      	bhi.n	80084ec <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800854c:	3301      	adds	r3, #1
 800854e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008556:	2b01      	cmp	r3, #1
 8008558:	d804      	bhi.n	8008564 <USBH_ParseCfgDesc+0x13c>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	885a      	ldrh	r2, [r3, #2]
 800855e:	8afb      	ldrh	r3, [r7, #22]
 8008560:	429a      	cmp	r2, r3
 8008562:	d8a4      	bhi.n	80084ae <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008564:	bf00      	nop
 8008566:	3728      	adds	r7, #40	; 0x28
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781a      	ldrb	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	785a      	ldrb	r2, [r3, #1]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	789a      	ldrb	r2, [r3, #2]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	78da      	ldrb	r2, [r3, #3]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	791a      	ldrb	r2, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	795a      	ldrb	r2, [r3, #5]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	799a      	ldrb	r2, [r3, #6]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	79da      	ldrb	r2, [r3, #7]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	7a1a      	ldrb	r2, [r3, #8]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	721a      	strb	r2, [r3, #8]
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781a      	ldrb	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	785a      	ldrb	r2, [r3, #1]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	789a      	ldrb	r2, [r3, #2]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	78da      	ldrb	r2, [r3, #3]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	3304      	adds	r3, #4
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	3305      	adds	r3, #5
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	b29b      	uxth	r3, r3
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	b29b      	uxth	r3, r3
 8008608:	4313      	orrs	r3, r2
 800860a:	b29a      	uxth	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	799a      	ldrb	r2, [r3, #6]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	719a      	strb	r2, [r3, #6]
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b03      	cmp	r3, #3
 800863a:	d120      	bne.n	800867e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	1e9a      	subs	r2, r3, #2
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	4293      	cmp	r3, r2
 8008646:	bf28      	it	cs
 8008648:	4613      	movcs	r3, r2
 800864a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3302      	adds	r3, #2
 8008650:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008652:	2300      	movs	r3, #0
 8008654:	82fb      	strh	r3, [r7, #22]
 8008656:	e00b      	b.n	8008670 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008658:	8afb      	ldrh	r3, [r7, #22]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4413      	add	r3, r2
 800865e:	781a      	ldrb	r2, [r3, #0]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	3301      	adds	r3, #1
 8008668:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800866a:	8afb      	ldrh	r3, [r7, #22]
 800866c:	3302      	adds	r3, #2
 800866e:	82fb      	strh	r3, [r7, #22]
 8008670:	8afa      	ldrh	r2, [r7, #22]
 8008672:	8abb      	ldrh	r3, [r7, #20]
 8008674:	429a      	cmp	r2, r3
 8008676:	d3ef      	bcc.n	8008658 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2200      	movs	r2, #0
 800867c:	701a      	strb	r2, [r3, #0]
  }
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	881a      	ldrh	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	4413      	add	r3, r2
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4413      	add	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80086b2:	68fb      	ldr	r3, [r7, #12]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086ce:	2301      	movs	r3, #1
 80086d0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	789b      	ldrb	r3, [r3, #2]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d002      	beq.n	80086e0 <USBH_CtlReq+0x20>
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d00f      	beq.n	80086fe <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80086de:	e034      	b.n	800874a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	88fa      	ldrh	r2, [r7, #6]
 80086ea:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2202      	movs	r2, #2
 80086f6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80086f8:	2301      	movs	r3, #1
 80086fa:	75fb      	strb	r3, [r7, #23]
    break;
 80086fc:	e025      	b.n	800874a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f828 	bl	8008754 <USBH_HandleControl>
 8008704:	4603      	mov	r3, r0
 8008706:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d108      	bne.n	8008720 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
    break;
 800871e:	e013      	b.n	8008748 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	2b03      	cmp	r3, #3
 8008724:	d108      	bne.n	8008738 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008732:	2303      	movs	r3, #3
 8008734:	75fb      	strb	r3, [r7, #23]
    break;
 8008736:	e007      	b.n	8008748 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d104      	bne.n	8008748 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008744:	2302      	movs	r3, #2
 8008746:	75fb      	strb	r3, [r7, #23]
    break;
 8008748:	bf00      	nop
  }
  return status;
 800874a:	7dfb      	ldrb	r3, [r7, #23]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af02      	add	r7, sp, #8
 800875a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008760:	2300      	movs	r3, #0
 8008762:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	7e1b      	ldrb	r3, [r3, #24]
 8008768:	3b01      	subs	r3, #1
 800876a:	2b0a      	cmp	r3, #10
 800876c:	f200 814c 	bhi.w	8008a08 <USBH_HandleControl+0x2b4>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <USBH_HandleControl+0x24>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	080087a5 	.word	0x080087a5
 800877c:	080087bf 	.word	0x080087bf
 8008780:	08008829 	.word	0x08008829
 8008784:	0800884f 	.word	0x0800884f
 8008788:	08008887 	.word	0x08008887
 800878c:	080088b3 	.word	0x080088b3
 8008790:	08008905 	.word	0x08008905
 8008794:	08008927 	.word	0x08008927
 8008798:	08008963 	.word	0x08008963
 800879c:	0800898b 	.word	0x0800898b
 80087a0:	080089c9 	.word	0x080089c9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f103 0110 	add.w	r1, r3, #16
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	795b      	ldrb	r3, [r3, #5]
 80087ae:	461a      	mov	r2, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f939 	bl	8008a28 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2202      	movs	r2, #2
 80087ba:	761a      	strb	r2, [r3, #24]
    break;
 80087bc:	e12f      	b.n	8008a1e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	795b      	ldrb	r3, [r3, #5]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 fc13 	bl	8009ff0 <USBH_LL_GetURBState>
 80087ca:	4603      	mov	r3, r0
 80087cc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d11e      	bne.n	8008812 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	7c1b      	ldrb	r3, [r3, #16]
 80087d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087dc:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8adb      	ldrh	r3, [r3, #22]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80087e6:	7b7b      	ldrb	r3, [r7, #13]
 80087e8:	2b80      	cmp	r3, #128	; 0x80
 80087ea:	d103      	bne.n	80087f4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2203      	movs	r2, #3
 80087f0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80087f2:	e10b      	b.n	8008a0c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2205      	movs	r2, #5
 80087f8:	761a      	strb	r2, [r3, #24]
    break;
 80087fa:	e107      	b.n	8008a0c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80087fc:	7b7b      	ldrb	r3, [r7, #13]
 80087fe:	2b80      	cmp	r3, #128	; 0x80
 8008800:	d103      	bne.n	800880a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2209      	movs	r2, #9
 8008806:	761a      	strb	r2, [r3, #24]
    break;
 8008808:	e100      	b.n	8008a0c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2207      	movs	r2, #7
 800880e:	761a      	strb	r2, [r3, #24]
    break;
 8008810:	e0fc      	b.n	8008a0c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b04      	cmp	r3, #4
 8008816:	d003      	beq.n	8008820 <USBH_HandleControl+0xcc>
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b02      	cmp	r3, #2
 800881c:	f040 80f6 	bne.w	8008a0c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	220b      	movs	r2, #11
 8008824:	761a      	strb	r2, [r3, #24]
    break;
 8008826:	e0f1      	b.n	8008a0c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800882e:	b29a      	uxth	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6899      	ldr	r1, [r3, #8]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	899a      	ldrh	r2, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	791b      	ldrb	r3, [r3, #4]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f930 	bl	8008aa6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2204      	movs	r2, #4
 800884a:	761a      	strb	r2, [r3, #24]
    break;
 800884c:	e0e7      	b.n	8008a1e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	791b      	ldrb	r3, [r3, #4]
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 fbcb 	bl	8009ff0 <USBH_LL_GetURBState>
 800885a:	4603      	mov	r3, r0
 800885c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d102      	bne.n	800886a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2209      	movs	r2, #9
 8008868:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b05      	cmp	r3, #5
 800886e:	d102      	bne.n	8008876 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008870:	2303      	movs	r3, #3
 8008872:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008874:	e0cc      	b.n	8008a10 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b04      	cmp	r3, #4
 800887a:	f040 80c9 	bne.w	8008a10 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	220b      	movs	r2, #11
 8008882:	761a      	strb	r2, [r3, #24]
    break;
 8008884:	e0c4      	b.n	8008a10 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6899      	ldr	r1, [r3, #8]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	899a      	ldrh	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7958      	ldrb	r0, [r3, #5]
 8008892:	2301      	movs	r3, #1
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	4603      	mov	r3, r0
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f8df 	bl	8008a5c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2206      	movs	r2, #6
 80088ae:	761a      	strb	r2, [r3, #24]
    break;
 80088b0:	e0b5      	b.n	8008a1e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	795b      	ldrb	r3, [r3, #5]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 fb99 	bl	8009ff0 <USBH_LL_GetURBState>
 80088be:	4603      	mov	r3, r0
 80088c0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d103      	bne.n	80088d0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2207      	movs	r2, #7
 80088cc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80088ce:	e0a1      	b.n	8008a14 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	2b05      	cmp	r3, #5
 80088d4:	d105      	bne.n	80088e2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	220c      	movs	r2, #12
 80088da:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80088dc:	2303      	movs	r3, #3
 80088de:	73fb      	strb	r3, [r7, #15]
    break;
 80088e0:	e098      	b.n	8008a14 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d103      	bne.n	80088f0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2205      	movs	r2, #5
 80088ec:	761a      	strb	r2, [r3, #24]
    break;
 80088ee:	e091      	b.n	8008a14 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	f040 808e 	bne.w	8008a14 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	220b      	movs	r2, #11
 80088fc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	73fb      	strb	r3, [r7, #15]
    break;
 8008902:	e087      	b.n	8008a14 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	791b      	ldrb	r3, [r3, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	2100      	movs	r1, #0
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f8ca 	bl	8008aa6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2208      	movs	r2, #8
 8008922:	761a      	strb	r2, [r3, #24]

    break;
 8008924:	e07b      	b.n	8008a1e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	791b      	ldrb	r3, [r3, #4]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fb5f 	bl	8009ff0 <USBH_LL_GetURBState>
 8008932:	4603      	mov	r3, r0
 8008934:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d105      	bne.n	8008948 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	220d      	movs	r2, #13
 8008940:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008946:	e067      	b.n	8008a18 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	2b04      	cmp	r3, #4
 800894c:	d103      	bne.n	8008956 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	220b      	movs	r2, #11
 8008952:	761a      	strb	r2, [r3, #24]
    break;
 8008954:	e060      	b.n	8008a18 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b05      	cmp	r3, #5
 800895a:	d15d      	bne.n	8008a18 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800895c:	2303      	movs	r3, #3
 800895e:	73fb      	strb	r3, [r7, #15]
    break;
 8008960:	e05a      	b.n	8008a18 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	795a      	ldrb	r2, [r3, #5]
 8008966:	2301      	movs	r3, #1
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	4613      	mov	r3, r2
 800896c:	2200      	movs	r2, #0
 800896e:	2100      	movs	r1, #0
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f873 	bl	8008a5c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	220a      	movs	r2, #10
 8008986:	761a      	strb	r2, [r3, #24]
    break;
 8008988:	e049      	b.n	8008a1e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	795b      	ldrb	r3, [r3, #5]
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 fb2d 	bl	8009ff0 <USBH_LL_GetURBState>
 8008996:	4603      	mov	r3, r0
 8008998:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d105      	bne.n	80089ac <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220d      	movs	r2, #13
 80089a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 80089aa:	e037      	b.n	8008a1c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d103      	bne.n	80089ba <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2209      	movs	r2, #9
 80089b6:	761a      	strb	r2, [r3, #24]
    break;
 80089b8:	e030      	b.n	8008a1c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d12d      	bne.n	8008a1c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	220b      	movs	r2, #11
 80089c4:	761a      	strb	r2, [r3, #24]
    break;
 80089c6:	e029      	b.n	8008a1c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	7e5b      	ldrb	r3, [r3, #25]
 80089cc:	3301      	adds	r3, #1
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	765a      	strb	r2, [r3, #25]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7e5b      	ldrb	r3, [r3, #25]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d809      	bhi.n	80089f0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 fa1a 	bl	8009e16 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80089ee:	e016      	b.n	8008a1e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80089f6:	2106      	movs	r1, #6
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008a02:	2302      	movs	r3, #2
 8008a04:	73fb      	strb	r3, [r7, #15]
    break;
 8008a06:	e00a      	b.n	8008a1e <USBH_HandleControl+0x2ca>

  default:
    break;
 8008a08:	bf00      	nop
 8008a0a:	e008      	b.n	8008a1e <USBH_HandleControl+0x2ca>
    break;
 8008a0c:	bf00      	nop
 8008a0e:	e006      	b.n	8008a1e <USBH_HandleControl+0x2ca>
    break;
 8008a10:	bf00      	nop
 8008a12:	e004      	b.n	8008a1e <USBH_HandleControl+0x2ca>
    break;
 8008a14:	bf00      	nop
 8008a16:	e002      	b.n	8008a1e <USBH_HandleControl+0x2ca>
    break;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <USBH_HandleControl+0x2ca>
    break;
 8008a1c:	bf00      	nop
  }
  return status;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af04      	add	r7, sp, #16
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008a36:	79f9      	ldrb	r1, [r7, #7]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	2300      	movs	r3, #0
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f001 fa9e 	bl	8009f8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af04      	add	r7, sp, #16
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	80fb      	strh	r3, [r7, #6]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008a80:	7979      	ldrb	r1, [r7, #5]
 8008a82:	7e3b      	ldrb	r3, [r7, #24]
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	9302      	str	r3, [sp, #8]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	2200      	movs	r2, #0
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f001 fa79 	bl	8009f8e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b088      	sub	sp, #32
 8008aaa:	af04      	add	r7, sp, #16
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	80fb      	strh	r3, [r7, #6]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008abc:	7979      	ldrb	r1, [r7, #5]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	9302      	str	r3, [sp, #8]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	2301      	movs	r3, #1
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f001 fa5b 	bl	8009f8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ad8:	2300      	movs	r3, #0

}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b088      	sub	sp, #32
 8008ae6:	af04      	add	r7, sp, #16
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	4611      	mov	r1, r2
 8008aee:	461a      	mov	r2, r3
 8008af0:	460b      	mov	r3, r1
 8008af2:	80fb      	strh	r3, [r7, #6]
 8008af4:	4613      	mov	r3, r2
 8008af6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008b06:	7979      	ldrb	r1, [r7, #5]
 8008b08:	7e3b      	ldrb	r3, [r7, #24]
 8008b0a:	9303      	str	r3, [sp, #12]
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	2301      	movs	r3, #1
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	2302      	movs	r3, #2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f001 fa36 	bl	8009f8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af04      	add	r7, sp, #16
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4611      	mov	r1, r2
 8008b38:	461a      	mov	r2, r3
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	80fb      	strh	r3, [r7, #6]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008b42:	7979      	ldrb	r1, [r7, #5]
 8008b44:	2300      	movs	r3, #0
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	9302      	str	r3, [sp, #8]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	2301      	movs	r3, #1
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2302      	movs	r3, #2
 8008b56:	2201      	movs	r2, #1
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f001 fa18 	bl	8009f8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af04      	add	r7, sp, #16
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	4608      	mov	r0, r1
 8008b72:	4611      	mov	r1, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	4603      	mov	r3, r0
 8008b78:	70fb      	strb	r3, [r7, #3]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70bb      	strb	r3, [r7, #2]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008b82:	7878      	ldrb	r0, [r7, #1]
 8008b84:	78ba      	ldrb	r2, [r7, #2]
 8008b86:	78f9      	ldrb	r1, [r7, #3]
 8008b88:	8b3b      	ldrh	r3, [r7, #24]
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	7d3b      	ldrb	r3, [r7, #20]
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	7c3b      	ldrb	r3, [r7, #16]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	4603      	mov	r3, r0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f001 f9ab 	bl	8009ef2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008b9c:	2300      	movs	r3, #0

}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 f9ca 	bl	8009f50 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bbc:	2300      	movs	r3, #0

}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f831 	bl	8008c3a <USBH_GetFreePipe>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bdc:	89fb      	ldrh	r3, [r7, #14]
 8008bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d007      	beq.n	8008bf6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008be6:	89fa      	ldrh	r2, [r7, #14]
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	32e0      	adds	r2, #224	; 0xe0
 8008bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008bf6:	89fb      	ldrh	r3, [r7, #14]
 8008bf8:	b2db      	uxtb	r3, r3
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	2b0a      	cmp	r3, #10
 8008c12:	d80b      	bhi.n	8008c2c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	78f9      	ldrb	r1, [r7, #3]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	31e0      	adds	r1, #224	; 0xe0
 8008c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c20:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	32e0      	adds	r2, #224	; 0xe0
 8008c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]
 8008c4a:	e00e      	b.n	8008c6a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c4c:	7bfa      	ldrb	r2, [r7, #15]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	32e0      	adds	r2, #224	; 0xe0
 8008c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	e007      	b.n	8008c74 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	3301      	adds	r3, #1
 8008c68:	73fb      	strb	r3, [r7, #15]
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	2b0a      	cmp	r3, #10
 8008c6e:	d9ed      	bls.n	8008c4c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08c      	sub	sp, #48	; 0x30
 8008c84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c86:	f107 031c 	add.w	r3, r7, #28
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	605a      	str	r2, [r3, #4]
 8008c90:	609a      	str	r2, [r3, #8]
 8008c92:	60da      	str	r2, [r3, #12]
 8008c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008c96:	4a92      	ldr	r2, [pc, #584]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008c98:	4b91      	ldr	r3, [pc, #580]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9c:	f043 0310 	orr.w	r3, r3, #16
 8008ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ca2:	4b8f      	ldr	r3, [pc, #572]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca6:	f003 0310 	and.w	r3, r3, #16
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cae:	4a8c      	ldr	r2, [pc, #560]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cb0:	4b8b      	ldr	r3, [pc, #556]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb4:	f043 0304 	orr.w	r3, r3, #4
 8008cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cba:	4b89      	ldr	r3, [pc, #548]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008cc6:	4a86      	ldr	r2, [pc, #536]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cc8:	4b85      	ldr	r3, [pc, #532]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cd2:	4b83      	ldr	r3, [pc, #524]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cde:	4a80      	ldr	r2, [pc, #512]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008ce0:	4b7f      	ldr	r3, [pc, #508]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce4:	f043 0301 	orr.w	r3, r3, #1
 8008ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cea:	4b7d      	ldr	r3, [pc, #500]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cf6:	4a7a      	ldr	r2, [pc, #488]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cf8:	4b79      	ldr	r3, [pc, #484]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfc:	f043 0302 	orr.w	r3, r3, #2
 8008d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d02:	4b77      	ldr	r3, [pc, #476]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	60bb      	str	r3, [r7, #8]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d0e:	4a74      	ldr	r2, [pc, #464]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008d10:	4b73      	ldr	r3, [pc, #460]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d14:	f043 0308 	orr.w	r3, r3, #8
 8008d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d1a:	4b71      	ldr	r3, [pc, #452]	; (8008ee0 <MX_GPIO_Init+0x260>)
 8008d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	607b      	str	r3, [r7, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8008d26:	2200      	movs	r2, #0
 8008d28:	f240 1109 	movw	r1, #265	; 0x109
 8008d2c:	486d      	ldr	r0, [pc, #436]	; (8008ee4 <MX_GPIO_Init+0x264>)
 8008d2e:	f7f7 ff03 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8008d32:	2200      	movs	r2, #0
 8008d34:	210c      	movs	r1, #12
 8008d36:	486c      	ldr	r0, [pc, #432]	; (8008ee8 <MX_GPIO_Init+0x268>)
 8008d38:	f7f7 fefe 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d42:	486a      	ldr	r0, [pc, #424]	; (8008eec <MX_GPIO_Init+0x26c>)
 8008d44:	f7f7 fef8 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008d4e:	4867      	ldr	r0, [pc, #412]	; (8008eec <MX_GPIO_Init+0x26c>)
 8008d50:	f7f7 fef2 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8008d54:	2200      	movs	r2, #0
 8008d56:	2180      	movs	r1, #128	; 0x80
 8008d58:	4865      	ldr	r0, [pc, #404]	; (8008ef0 <MX_GPIO_Init+0x270>)
 8008d5a:	f7f7 feed 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8008d5e:	2308      	movs	r3, #8
 8008d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d62:	2301      	movs	r3, #1
 8008d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8008d6e:	f107 031c 	add.w	r3, r7, #28
 8008d72:	4619      	mov	r1, r3
 8008d74:	485b      	ldr	r0, [pc, #364]	; (8008ee4 <MX_GPIO_Init+0x264>)
 8008d76:	f7f7 fd37 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8008d7a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8008d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008d80:	4b5c      	ldr	r3, [pc, #368]	; (8008ef4 <MX_GPIO_Init+0x274>)
 8008d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d84:	2300      	movs	r3, #0
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d88:	f107 031c 	add.w	r3, r7, #28
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4857      	ldr	r0, [pc, #348]	; (8008eec <MX_GPIO_Init+0x26c>)
 8008d90:	f7f7 fd2a 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8008d94:	2307      	movs	r3, #7
 8008d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008da0:	f107 031c 	add.w	r3, r7, #28
 8008da4:	4619      	mov	r1, r3
 8008da6:	4851      	ldr	r0, [pc, #324]	; (8008eec <MX_GPIO_Init+0x26c>)
 8008da8:	f7f7 fd1e 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8008dac:	232f      	movs	r3, #47	; 0x2f
 8008dae:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008db0:	2300      	movs	r3, #0
 8008db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008db4:	2302      	movs	r3, #2
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008db8:	f107 031c 	add.w	r3, r7, #28
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008dc2:	f7f7 fd11 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008dca:	4b4a      	ldr	r3, [pc, #296]	; (8008ef4 <MX_GPIO_Init+0x274>)
 8008dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8008dd2:	f107 031c 	add.w	r3, r7, #28
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ddc:	f7f7 fd04 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8008de0:	2304      	movs	r3, #4
 8008de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008de4:	2301      	movs	r3, #1
 8008de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008de8:	2301      	movs	r3, #1
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dec:	2303      	movs	r3, #3
 8008dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8008df0:	f107 031c 	add.w	r3, r7, #28
 8008df4:	4619      	mov	r1, r3
 8008df6:	483c      	ldr	r0, [pc, #240]	; (8008ee8 <MX_GPIO_Init+0x268>)
 8008df8:	f7f7 fcf6 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8008dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e02:	2301      	movs	r3, #1
 8008e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e06:	2301      	movs	r3, #1
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8008e0e:	f107 031c 	add.w	r3, r7, #28
 8008e12:	4619      	mov	r1, r3
 8008e14:	4833      	ldr	r0, [pc, #204]	; (8008ee4 <MX_GPIO_Init+0x264>)
 8008e16:	f7f7 fce7 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8008e1a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e20:	2301      	movs	r3, #1
 8008e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e2c:	f107 031c 	add.w	r3, r7, #28
 8008e30:	4619      	mov	r1, r3
 8008e32:	482e      	ldr	r0, [pc, #184]	; (8008eec <MX_GPIO_Init+0x26c>)
 8008e34:	f7f7 fcd8 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8008e38:	2305      	movs	r3, #5
 8008e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008e3c:	4b2d      	ldr	r3, [pc, #180]	; (8008ef4 <MX_GPIO_Init+0x274>)
 8008e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e44:	f107 031c 	add.w	r3, r7, #28
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4829      	ldr	r0, [pc, #164]	; (8008ef0 <MX_GPIO_Init+0x270>)
 8008e4c:	f7f7 fccc 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8008e50:	2380      	movs	r3, #128	; 0x80
 8008e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e54:	2301      	movs	r3, #1
 8008e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8008e60:	f107 031c 	add.w	r3, r7, #28
 8008e64:	4619      	mov	r1, r3
 8008e66:	4822      	ldr	r0, [pc, #136]	; (8008ef0 <MX_GPIO_Init+0x270>)
 8008e68:	f7f7 fcbe 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8008e6c:	2308      	movs	r3, #8
 8008e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e70:	2301      	movs	r3, #1
 8008e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8008e7c:	f107 031c 	add.w	r3, r7, #28
 8008e80:	4619      	mov	r1, r3
 8008e82:	4819      	ldr	r0, [pc, #100]	; (8008ee8 <MX_GPIO_Init+0x268>)
 8008e84:	f7f7 fcb0 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8008e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008e8e:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <MX_GPIO_Init+0x274>)
 8008e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8008e96:	f107 031c 	add.w	r3, r7, #28
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4812      	ldr	r0, [pc, #72]	; (8008ee8 <MX_GPIO_Init+0x268>)
 8008e9e:	f7f7 fca3 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8008eb2:	f107 031c 	add.w	r3, r7, #28
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	480a      	ldr	r0, [pc, #40]	; (8008ee4 <MX_GPIO_Init+0x264>)
 8008eba:	f7f7 fc95 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008ec2:	4b0c      	ldr	r3, [pc, #48]	; (8008ef4 <MX_GPIO_Init+0x274>)
 8008ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8008eca:	f107 031c 	add.w	r3, r7, #28
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4804      	ldr	r0, [pc, #16]	; (8008ee4 <MX_GPIO_Init+0x264>)
 8008ed2:	f7f7 fc89 	bl	80007e8 <HAL_GPIO_Init>

}
 8008ed6:	bf00      	nop
 8008ed8:	3730      	adds	r7, #48	; 0x30
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	48001000 	.word	0x48001000
 8008ee8:	48000400 	.word	0x48000400
 8008eec:	48000800 	.word	0x48000800
 8008ef0:	48000c00 	.word	0x48000c00
 8008ef4:	10120000 	.word	0x10120000

08008ef8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008efc:	4b1b      	ldr	r3, [pc, #108]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008efe:	4a1c      	ldr	r2, [pc, #112]	; (8008f70 <MX_I2C1_Init+0x78>)
 8008f00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8008f02:	4b1a      	ldr	r3, [pc, #104]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f04:	4a1b      	ldr	r2, [pc, #108]	; (8008f74 <MX_I2C1_Init+0x7c>)
 8008f06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008f08:	4b18      	ldr	r3, [pc, #96]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008f0e:	4b17      	ldr	r3, [pc, #92]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008f14:	4b15      	ldr	r3, [pc, #84]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008f1a:	4b14      	ldr	r3, [pc, #80]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008f20:	4b12      	ldr	r3, [pc, #72]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008f26:	4b11      	ldr	r3, [pc, #68]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008f32:	480e      	ldr	r0, [pc, #56]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f34:	f7f9 fa7b 	bl	800242e <HAL_I2C_Init>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008f3e:	f000 fadf 	bl	8009500 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008f42:	2100      	movs	r1, #0
 8008f44:	4809      	ldr	r0, [pc, #36]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f46:	f7f9 fb00 	bl	800254a <HAL_I2CEx_ConfigAnalogFilter>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008f50:	f000 fad6 	bl	8009500 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008f54:	2100      	movs	r1, #0
 8008f56:	4805      	ldr	r0, [pc, #20]	; (8008f6c <MX_I2C1_Init+0x74>)
 8008f58:	f7f9 fb42 	bl	80025e0 <HAL_I2CEx_ConfigDigitalFilter>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008f62:	f000 facd 	bl	8009500 <Error_Handler>
  }

}
 8008f66:	bf00      	nop
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	200000c0 	.word	0x200000c0
 8008f70:	40005400 	.word	0x40005400
 8008f74:	00404c74 	.word	0x00404c74

08008f78 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <MX_I2C2_Init+0x74>)
 8008f7e:	4a1c      	ldr	r2, [pc, #112]	; (8008ff0 <MX_I2C2_Init+0x78>)
 8008f80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <MX_I2C2_Init+0x74>)
 8008f84:	4a1b      	ldr	r2, [pc, #108]	; (8008ff4 <MX_I2C2_Init+0x7c>)
 8008f86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008f88:	4b18      	ldr	r3, [pc, #96]	; (8008fec <MX_I2C2_Init+0x74>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008f8e:	4b17      	ldr	r3, [pc, #92]	; (8008fec <MX_I2C2_Init+0x74>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008f94:	4b15      	ldr	r3, [pc, #84]	; (8008fec <MX_I2C2_Init+0x74>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008f9a:	4b14      	ldr	r3, [pc, #80]	; (8008fec <MX_I2C2_Init+0x74>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008fa0:	4b12      	ldr	r3, [pc, #72]	; (8008fec <MX_I2C2_Init+0x74>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008fa6:	4b11      	ldr	r3, [pc, #68]	; (8008fec <MX_I2C2_Init+0x74>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008fac:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <MX_I2C2_Init+0x74>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008fb2:	480e      	ldr	r0, [pc, #56]	; (8008fec <MX_I2C2_Init+0x74>)
 8008fb4:	f7f9 fa3b 	bl	800242e <HAL_I2C_Init>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008fbe:	f000 fa9f 	bl	8009500 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4809      	ldr	r0, [pc, #36]	; (8008fec <MX_I2C2_Init+0x74>)
 8008fc6:	f7f9 fac0 	bl	800254a <HAL_I2CEx_ConfigAnalogFilter>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008fd0:	f000 fa96 	bl	8009500 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4805      	ldr	r0, [pc, #20]	; (8008fec <MX_I2C2_Init+0x74>)
 8008fd8:	f7f9 fb02 	bl	80025e0 <HAL_I2CEx_ConfigDigitalFilter>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008fe2:	f000 fa8d 	bl	8009500 <Error_Handler>
  }

}
 8008fe6:	bf00      	nop
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	2000010c 	.word	0x2000010c
 8008ff0:	40005800 	.word	0x40005800
 8008ff4:	00404c74 	.word	0x00404c74

08008ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08c      	sub	sp, #48	; 0x30
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009000:	f107 031c 	add.w	r3, r7, #28
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	605a      	str	r2, [r3, #4]
 800900a:	609a      	str	r2, [r3, #8]
 800900c:	60da      	str	r2, [r3, #12]
 800900e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a2e      	ldr	r2, [pc, #184]	; (80090d0 <HAL_I2C_MspInit+0xd8>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d128      	bne.n	800906c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800901a:	4a2e      	ldr	r2, [pc, #184]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 800901c:	4b2d      	ldr	r3, [pc, #180]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 800901e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009020:	f043 0302 	orr.w	r3, r3, #2
 8009024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009026:	4b2b      	ldr	r3, [pc, #172]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 8009028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	61bb      	str	r3, [r7, #24]
 8009030:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8009032:	23c0      	movs	r3, #192	; 0xc0
 8009034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009036:	2312      	movs	r3, #18
 8009038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800903a:	2301      	movs	r3, #1
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800903e:	2303      	movs	r3, #3
 8009040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009042:	2304      	movs	r3, #4
 8009044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009046:	f107 031c 	add.w	r3, r7, #28
 800904a:	4619      	mov	r1, r3
 800904c:	4822      	ldr	r0, [pc, #136]	; (80090d8 <HAL_I2C_MspInit+0xe0>)
 800904e:	f7f7 fbcb 	bl	80007e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009052:	4a20      	ldr	r2, [pc, #128]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 8009054:	4b1f      	ldr	r3, [pc, #124]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 8009056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800905c:	6593      	str	r3, [r2, #88]	; 0x58
 800905e:	4b1d      	ldr	r3, [pc, #116]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 8009060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009066:	617b      	str	r3, [r7, #20]
 8009068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800906a:	e02d      	b.n	80090c8 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1a      	ldr	r2, [pc, #104]	; (80090dc <HAL_I2C_MspInit+0xe4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d128      	bne.n	80090c8 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009076:	4a17      	ldr	r2, [pc, #92]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 8009078:	4b16      	ldr	r3, [pc, #88]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 800907a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907c:	f043 0302 	orr.w	r3, r3, #2
 8009080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009082:	4b14      	ldr	r3, [pc, #80]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 8009084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800908e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009094:	2312      	movs	r3, #18
 8009096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009098:	2301      	movs	r3, #1
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800909c:	2303      	movs	r3, #3
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80090a0:	2304      	movs	r3, #4
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090a4:	f107 031c 	add.w	r3, r7, #28
 80090a8:	4619      	mov	r1, r3
 80090aa:	480b      	ldr	r0, [pc, #44]	; (80090d8 <HAL_I2C_MspInit+0xe0>)
 80090ac:	f7f7 fb9c 	bl	80007e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80090b0:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 80090b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090ba:	6593      	str	r3, [r2, #88]	; 0x58
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_I2C_MspInit+0xdc>)
 80090be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	bf00      	nop
 80090ca:	3730      	adds	r7, #48	; 0x30
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	40005400 	.word	0x40005400
 80090d4:	40021000 	.word	0x40021000
 80090d8:	48000400 	.word	0x48000400
 80090dc:	40005800 	.word	0x40005800

080090e0 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 80090e4:	4b18      	ldr	r3, [pc, #96]	; (8009148 <MX_LCD_Init+0x68>)
 80090e6:	4a19      	ldr	r2, [pc, #100]	; (800914c <MX_LCD_Init+0x6c>)
 80090e8:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80090ea:	4b17      	ldr	r3, [pc, #92]	; (8009148 <MX_LCD_Init+0x68>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80090f0:	4b15      	ldr	r3, [pc, #84]	; (8009148 <MX_LCD_Init+0x68>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <MX_LCD_Init+0x68>)
 80090f8:	220c      	movs	r2, #12
 80090fa:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80090fc:	4b12      	ldr	r3, [pc, #72]	; (8009148 <MX_LCD_Init+0x68>)
 80090fe:	2200      	movs	r2, #0
 8009100:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8009102:	4b11      	ldr	r3, [pc, #68]	; (8009148 <MX_LCD_Init+0x68>)
 8009104:	2200      	movs	r2, #0
 8009106:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8009108:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <MX_LCD_Init+0x68>)
 800910a:	2200      	movs	r2, #0
 800910c:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800910e:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <MX_LCD_Init+0x68>)
 8009110:	2200      	movs	r2, #0
 8009112:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <MX_LCD_Init+0x68>)
 8009116:	2200      	movs	r2, #0
 8009118:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800911a:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <MX_LCD_Init+0x68>)
 800911c:	2200      	movs	r2, #0
 800911e:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <MX_LCD_Init+0x68>)
 8009122:	2200      	movs	r2, #0
 8009124:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8009126:	4b08      	ldr	r3, [pc, #32]	; (8009148 <MX_LCD_Init+0x68>)
 8009128:	2200      	movs	r2, #0
 800912a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800912c:	4b06      	ldr	r3, [pc, #24]	; (8009148 <MX_LCD_Init+0x68>)
 800912e:	2200      	movs	r2, #0
 8009130:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8009132:	4805      	ldr	r0, [pc, #20]	; (8009148 <MX_LCD_Init+0x68>)
 8009134:	f7f9 faa0 	bl	8002678 <HAL_LCD_Init>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800913e:	f000 f9df 	bl	8009500 <Error_Handler>
  }

}
 8009142:	bf00      	nop
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20000158 	.word	0x20000158
 800914c:	40002400 	.word	0x40002400

08009150 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08c      	sub	sp, #48	; 0x30
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009158:	f107 031c 	add.w	r3, r7, #28
 800915c:	2200      	movs	r2, #0
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	605a      	str	r2, [r3, #4]
 8009162:	609a      	str	r2, [r3, #8]
 8009164:	60da      	str	r2, [r3, #12]
 8009166:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a44      	ldr	r2, [pc, #272]	; (8009280 <HAL_LCD_MspInit+0x130>)
 800916e:	4293      	cmp	r3, r2
 8009170:	f040 8081 	bne.w	8009276 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8009174:	4a43      	ldr	r2, [pc, #268]	; (8009284 <HAL_LCD_MspInit+0x134>)
 8009176:	4b43      	ldr	r3, [pc, #268]	; (8009284 <HAL_LCD_MspInit+0x134>)
 8009178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800917a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800917e:	6593      	str	r3, [r2, #88]	; 0x58
 8009180:	4b40      	ldr	r3, [pc, #256]	; (8009284 <HAL_LCD_MspInit+0x134>)
 8009182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009188:	61bb      	str	r3, [r7, #24]
 800918a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800918c:	4a3d      	ldr	r2, [pc, #244]	; (8009284 <HAL_LCD_MspInit+0x134>)
 800918e:	4b3d      	ldr	r3, [pc, #244]	; (8009284 <HAL_LCD_MspInit+0x134>)
 8009190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009192:	f043 0304 	orr.w	r3, r3, #4
 8009196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009198:	4b3a      	ldr	r3, [pc, #232]	; (8009284 <HAL_LCD_MspInit+0x134>)
 800919a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	617b      	str	r3, [r7, #20]
 80091a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091a4:	4a37      	ldr	r2, [pc, #220]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091a6:	4b37      	ldr	r3, [pc, #220]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091aa:	f043 0301 	orr.w	r3, r3, #1
 80091ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091b0:	4b34      	ldr	r3, [pc, #208]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091bc:	4a31      	ldr	r2, [pc, #196]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091be:	4b31      	ldr	r3, [pc, #196]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c2:	f043 0302 	orr.w	r3, r3, #2
 80091c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091c8:	4b2e      	ldr	r3, [pc, #184]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80091d4:	4a2b      	ldr	r2, [pc, #172]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091d6:	4b2b      	ldr	r3, [pc, #172]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091da:	f043 0308 	orr.w	r3, r3, #8
 80091de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091e0:	4b28      	ldr	r3, [pc, #160]	; (8009284 <HAL_LCD_MspInit+0x134>)
 80091e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e4:	f003 0308 	and.w	r3, r3, #8
 80091e8:	60bb      	str	r3, [r7, #8]
 80091ea:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 80091ec:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80091f0:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091f2:	2302      	movs	r3, #2
 80091f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091fa:	2300      	movs	r3, #0
 80091fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80091fe:	230b      	movs	r3, #11
 8009200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009202:	f107 031c 	add.w	r3, r7, #28
 8009206:	4619      	mov	r1, r3
 8009208:	481f      	ldr	r0, [pc, #124]	; (8009288 <HAL_LCD_MspInit+0x138>)
 800920a:	f7f7 faed 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800920e:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8009212:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009214:	2302      	movs	r3, #2
 8009216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009218:	2300      	movs	r3, #0
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800921c:	2300      	movs	r3, #0
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8009220:	230b      	movs	r3, #11
 8009222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009224:	f107 031c 	add.w	r3, r7, #28
 8009228:	4619      	mov	r1, r3
 800922a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800922e:	f7f7 fadb 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8009232:	f24f 2333 	movw	r3, #62003	; 0xf233
 8009236:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009238:	2302      	movs	r3, #2
 800923a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800923c:	2300      	movs	r3, #0
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009240:	2300      	movs	r3, #0
 8009242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8009244:	230b      	movs	r3, #11
 8009246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009248:	f107 031c 	add.w	r3, r7, #28
 800924c:	4619      	mov	r1, r3
 800924e:	480f      	ldr	r0, [pc, #60]	; (800928c <HAL_LCD_MspInit+0x13c>)
 8009250:	f7f7 faca 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8009254:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8009258:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800925a:	2302      	movs	r3, #2
 800925c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800925e:	2300      	movs	r3, #0
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009262:	2300      	movs	r3, #0
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8009266:	230b      	movs	r3, #11
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800926a:	f107 031c 	add.w	r3, r7, #28
 800926e:	4619      	mov	r1, r3
 8009270:	4807      	ldr	r0, [pc, #28]	; (8009290 <HAL_LCD_MspInit+0x140>)
 8009272:	f7f7 fab9 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8009276:	bf00      	nop
 8009278:	3730      	adds	r7, #48	; 0x30
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	40002400 	.word	0x40002400
 8009284:	40021000 	.word	0x40021000
 8009288:	48000800 	.word	0x48000800
 800928c:	48000400 	.word	0x48000400
 8009290:	48000c00 	.word	0x48000c00

08009294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009298:	f7f7 f91e 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800929c:	f000 f886 	bl	80093ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80092a0:	f7ff fcee 	bl	8008c80 <MX_GPIO_Init>
  MX_I2C1_Init();
 80092a4:	f7ff fe28 	bl	8008ef8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80092a8:	f7ff fe66 	bl	8008f78 <MX_I2C2_Init>
  MX_LCD_Init();
 80092ac:	f7ff ff18 	bl	80090e0 <MX_LCD_Init>
  MX_QUADSPI_Init();
 80092b0:	f000 f92e 	bl	8009510 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80092b4:	f000 f996 	bl	80095e4 <MX_SAI1_Init>
  MX_SPI2_Init();
 80092b8:	f000 fa92 	bl	80097e0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80092bc:	f000 fbd0 	bl	8009a60 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80092c0:	f000 fc42 	bl	8009b48 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2C_Mem_Write(&hi2c1, LSM303_ACC_ADDRESS, LSM303_ACC_CTRL_REG1_A, 1, &Settings, 1, 100);
  //uint8_t adr = 0x2D;


  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
 80092c4:	2201      	movs	r2, #1
 80092c6:	2180      	movs	r1, #128	; 0x80
 80092c8:	4832      	ldr	r0, [pc, #200]	; (8009394 <main+0x100>)
 80092ca:	f7f7 fc35 	bl	8000b38 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_SET);
 80092ce:	2201      	movs	r2, #1
 80092d0:	2101      	movs	r1, #1
 80092d2:	4831      	ldr	r0, [pc, #196]	; (8009398 <main+0x104>)
 80092d4:	f7f7 fc30 	bl	8000b38 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80092d8:	200a      	movs	r0, #10
 80092da:	f7f7 f95b 	bl	8000594 <HAL_Delay>
  //Wysylanie danych do ACC
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_RESET);
 80092de:	2200      	movs	r2, #0
 80092e0:	2101      	movs	r1, #1
 80092e2:	482d      	ldr	r0, [pc, #180]	; (8009398 <main+0x104>)
 80092e4:	f7f7 fc28 	bl	8000b38 <HAL_GPIO_WritePin>
    spiTxBuf[0] = 0x20; //wlaczenie rejestru numer 1
 80092e8:	4b2c      	ldr	r3, [pc, #176]	; (800939c <main+0x108>)
 80092ea:	2220      	movs	r2, #32
 80092ec:	701a      	strb	r2, [r3, #0]
    spiTxBuf[1] = 0x11; //wlaczenie na czestotliwosci na ACC i odczyt z osi X
 80092ee:	4b2b      	ldr	r3, [pc, #172]	; (800939c <main+0x108>)
 80092f0:	2211      	movs	r2, #17
 80092f2:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi2,spiTxBuf,2,50);
 80092f4:	2332      	movs	r3, #50	; 0x32
 80092f6:	2202      	movs	r2, #2
 80092f8:	4928      	ldr	r1, [pc, #160]	; (800939c <main+0x108>)
 80092fa:	4829      	ldr	r0, [pc, #164]	; (80093a0 <main+0x10c>)
 80092fc:	f7fb fd90 	bl	8004e20 <HAL_SPI_Transmit>
    spiTxBuf23[0] = 0x23;
 8009300:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <main+0x110>)
 8009302:	2223      	movs	r2, #35	; 0x23
 8009304:	701a      	strb	r2, [r3, #0]
    spiTxBuf23[1] = 0x01;
 8009306:	4b27      	ldr	r3, [pc, #156]	; (80093a4 <main+0x110>)
 8009308:	2201      	movs	r2, #1
 800930a:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi2,spiTxBuf23,2,50);
 800930c:	2332      	movs	r3, #50	; 0x32
 800930e:	2202      	movs	r2, #2
 8009310:	4924      	ldr	r1, [pc, #144]	; (80093a4 <main+0x110>)
 8009312:	4823      	ldr	r0, [pc, #140]	; (80093a0 <main+0x10c>)
 8009314:	f7fb fd84 	bl	8004e20 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_SET);
 8009318:	2201      	movs	r2, #1
 800931a:	2101      	movs	r1, #1
 800931c:	481e      	ldr	r0, [pc, #120]	; (8009398 <main+0x104>)
 800931e:	f7f7 fc0b 	bl	8000b38 <HAL_GPIO_WritePin>


   //Odczyt danych z ACC
   HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_RESET);
 8009322:	2200      	movs	r2, #0
 8009324:	2101      	movs	r1, #1
 8009326:	481c      	ldr	r0, [pc, #112]	; (8009398 <main+0x104>)
 8009328:	f7f7 fc06 	bl	8000b38 <HAL_GPIO_WritePin>
   spiTxBuf[0] = 0x20|0x80; //wlaczenie odczytywanie, ustawienie Most Significant Bit to High
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <main+0x108>)
 800932e:	22a0      	movs	r2, #160	; 0xa0
 8009330:	701a      	strb	r2, [r3, #0]
   HAL_SPI_Transmit(&hspi2,spiTxBuf,1,50);
 8009332:	2332      	movs	r3, #50	; 0x32
 8009334:	2201      	movs	r2, #1
 8009336:	4919      	ldr	r1, [pc, #100]	; (800939c <main+0x108>)
 8009338:	4819      	ldr	r0, [pc, #100]	; (80093a0 <main+0x10c>)
 800933a:	f7fb fd71 	bl	8004e20 <HAL_SPI_Transmit>
   HAL_SPI_Receive(&hspi2,spiRxBuf,1,50);
 800933e:	2332      	movs	r3, #50	; 0x32
 8009340:	2201      	movs	r2, #1
 8009342:	4919      	ldr	r1, [pc, #100]	; (80093a8 <main+0x114>)
 8009344:	4816      	ldr	r0, [pc, #88]	; (80093a0 <main+0x10c>)
 8009346:	f7fb fecf 	bl	80050e8 <HAL_SPI_Receive>
   HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_SET);
 800934a:	2201      	movs	r2, #1
 800934c:	2101      	movs	r1, #1
 800934e:	4812      	ldr	r0, [pc, #72]	; (8009398 <main+0x104>)
 8009350:	f7f7 fbf2 	bl	8000b38 <HAL_GPIO_WritePin>
/*	  HAL_I2C_Mem_Read(&hi2c1, LSM303_ACC_ADDRESS, (LSM303_ACC_Z_H_A), 1, &Data, 1, 100);
	  Zaxis = Data << 8;*/
    /* USER CODE END WHILE */
	 /* HAL_SPI_TransmitReceive(&spi, &adr, &Data, 3, HAL_MAX_DELAY);
	  Zaxis = Data << 8;*/
	  MX_USB_HOST_Process();
 8009354:	f000 fc1e 	bl	8009b94 <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */
	  //to_send = 0x8F;
	  //Odczyt danych z ACC


	        HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_RESET);
 8009358:	2200      	movs	r2, #0
 800935a:	2101      	movs	r1, #1
 800935c:	480e      	ldr	r0, [pc, #56]	; (8009398 <main+0x104>)
 800935e:	f7f7 fbeb 	bl	8000b38 <HAL_GPIO_WritePin>
	        spiTxBuf[0] = 0x29|0x80; //wlaczenie odczyt z X na High
 8009362:	4b0e      	ldr	r3, [pc, #56]	; (800939c <main+0x108>)
 8009364:	22a9      	movs	r2, #169	; 0xa9
 8009366:	701a      	strb	r2, [r3, #0]
	       // HAL_SPI_Transmit(&hspi2,&to_send,1,50);
	        HAL_SPI_Transmit(&hspi2,spiTxBuf,1,50);
 8009368:	2332      	movs	r3, #50	; 0x32
 800936a:	2201      	movs	r2, #1
 800936c:	490b      	ldr	r1, [pc, #44]	; (800939c <main+0x108>)
 800936e:	480c      	ldr	r0, [pc, #48]	; (80093a0 <main+0x10c>)
 8009370:	f7fb fd56 	bl	8004e20 <HAL_SPI_Transmit>
	        HAL_SPI_Receive(&hspi2,spiRxBuf,1,50);
 8009374:	2332      	movs	r3, #50	; 0x32
 8009376:	2201      	movs	r2, #1
 8009378:	490b      	ldr	r1, [pc, #44]	; (80093a8 <main+0x114>)
 800937a:	4809      	ldr	r0, [pc, #36]	; (80093a0 <main+0x10c>)
 800937c:	f7fb feb4 	bl	80050e8 <HAL_SPI_Receive>
	        HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_SET);
 8009380:	2201      	movs	r2, #1
 8009382:	2101      	movs	r1, #1
 8009384:	4804      	ldr	r0, [pc, #16]	; (8009398 <main+0x104>)
 8009386:	f7f7 fbd7 	bl	8000b38 <HAL_GPIO_WritePin>

	        HAL_Delay(300);
 800938a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800938e:	f7f7 f901 	bl	8000594 <HAL_Delay>
	  MX_USB_HOST_Process();
 8009392:	e7df      	b.n	8009354 <main+0xc0>
 8009394:	48000c00 	.word	0x48000c00
 8009398:	48001000 	.word	0x48001000
 800939c:	2000019c 	.word	0x2000019c
 80093a0:	200002ec 	.word	0x200002ec
 80093a4:	20000198 	.word	0x20000198
 80093a8:	20000194 	.word	0x20000194

080093ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b0b8      	sub	sp, #224	; 0xe0
 80093b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80093b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80093b6:	2244      	movs	r2, #68	; 0x44
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 ff2c 	bl	800a218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80093c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	605a      	str	r2, [r3, #4]
 80093ca:	609a      	str	r2, [r3, #8]
 80093cc:	60da      	str	r2, [r3, #12]
 80093ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80093d0:	463b      	mov	r3, r7
 80093d2:	2288      	movs	r2, #136	; 0x88
 80093d4:	2100      	movs	r1, #0
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 ff1e 	bl	800a218 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80093dc:	f7f9 fa2c 	bl	8002838 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80093e0:	4a45      	ldr	r2, [pc, #276]	; (80094f8 <SystemClock_Config+0x14c>)
 80093e2:	4b45      	ldr	r3, [pc, #276]	; (80094f8 <SystemClock_Config+0x14c>)
 80093e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e8:	f023 0318 	bic.w	r3, r3, #24
 80093ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80093f0:	231c      	movs	r3, #28
 80093f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009402:	2301      	movs	r3, #1
 8009404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800940e:	2360      	movs	r3, #96	; 0x60
 8009410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009414:	2302      	movs	r3, #2
 8009416:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800941a:	2301      	movs	r3, #1
 800941c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009420:	2301      	movs	r3, #1
 8009422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8009426:	2314      	movs	r3, #20
 8009428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800942c:	2307      	movs	r3, #7
 800942e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009432:	2302      	movs	r3, #2
 8009434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009438:	2302      	movs	r3, #2
 800943a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800943e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009442:	4618      	mov	r0, r3
 8009444:	f7f9 fb44 	bl	8002ad0 <HAL_RCC_OscConfig>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800944e:	f000 f857 	bl	8009500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009452:	230f      	movs	r3, #15
 8009454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009458:	2303      	movs	r3, #3
 800945a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800945e:	2380      	movs	r3, #128	; 0x80
 8009460:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800946a:	2300      	movs	r3, #0
 800946c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8009470:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009474:	2101      	movs	r1, #1
 8009476:	4618      	mov	r0, r3
 8009478:	f7f9 fe8e 	bl	8003198 <HAL_RCC_ClockConfig>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8009482:	f000 f83d 	bl	8009500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8009486:	4b1d      	ldr	r3, [pc, #116]	; (80094fc <SystemClock_Config+0x150>)
 8009488:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800948e:	2300      	movs	r3, #0
 8009490:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009492:	2300      	movs	r3, #0
 8009494:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8009496:	2300      	movs	r3, #0
 8009498:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800949a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800949e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80094a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80094a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80094a8:	2301      	movs	r3, #1
 80094aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80094ac:	2301      	movs	r3, #1
 80094ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80094b0:	2318      	movs	r3, #24
 80094b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80094b4:	2307      	movs	r3, #7
 80094b6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80094b8:	2302      	movs	r3, #2
 80094ba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80094bc:	2302      	movs	r3, #2
 80094be:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 80094c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80094c4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80094c6:	463b      	mov	r3, r7
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fa f877 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80094d4:	f000 f814 	bl	8009500 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80094d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80094dc:	f7f9 f9ca 	bl	8002874 <HAL_PWREx_ControlVoltageScaling>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <SystemClock_Config+0x13e>
  {
    Error_Handler();
 80094e6:	f000 f80b 	bl	8009500 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80094ea:	f7fa ffc5 	bl	8004478 <HAL_RCCEx_EnableMSIPLLMode>
}
 80094ee:	bf00      	nop
 80094f0:	37e0      	adds	r7, #224	; 0xe0
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	40021000 	.word	0x40021000
 80094fc:	000228c2 	.word	0x000228c2

08009500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009500:	b480      	push	{r7}
 8009502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009504:	bf00      	nop
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
	...

08009510 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8009514:	4b0f      	ldr	r3, [pc, #60]	; (8009554 <MX_QUADSPI_Init+0x44>)
 8009516:	4a10      	ldr	r2, [pc, #64]	; (8009558 <MX_QUADSPI_Init+0x48>)
 8009518:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800951a:	4b0e      	ldr	r3, [pc, #56]	; (8009554 <MX_QUADSPI_Init+0x44>)
 800951c:	22ff      	movs	r2, #255	; 0xff
 800951e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8009520:	4b0c      	ldr	r3, [pc, #48]	; (8009554 <MX_QUADSPI_Init+0x44>)
 8009522:	2201      	movs	r2, #1
 8009524:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8009526:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <MX_QUADSPI_Init+0x44>)
 8009528:	2200      	movs	r2, #0
 800952a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <MX_QUADSPI_Init+0x44>)
 800952e:	2201      	movs	r2, #1
 8009530:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8009532:	4b08      	ldr	r3, [pc, #32]	; (8009554 <MX_QUADSPI_Init+0x44>)
 8009534:	2200      	movs	r2, #0
 8009536:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8009538:	4b06      	ldr	r3, [pc, #24]	; (8009554 <MX_QUADSPI_Init+0x44>)
 800953a:	2200      	movs	r2, #0
 800953c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800953e:	4805      	ldr	r0, [pc, #20]	; (8009554 <MX_QUADSPI_Init+0x44>)
 8009540:	f7f9 f9fe 	bl	8002940 <HAL_QSPI_Init>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800954a:	f7ff ffd9 	bl	8009500 <Error_Handler>
  }

}
 800954e:	bf00      	nop
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200001a0 	.word	0x200001a0
 8009558:	a0001000 	.word	0xa0001000

0800955c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	; 0x28
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009564:	f107 0314 	add.w	r3, r7, #20
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	605a      	str	r2, [r3, #4]
 800956e:	609a      	str	r2, [r3, #8]
 8009570:	60da      	str	r2, [r3, #12]
 8009572:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a17      	ldr	r2, [pc, #92]	; (80095d8 <HAL_QSPI_MspInit+0x7c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d128      	bne.n	80095d0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800957e:	4a17      	ldr	r2, [pc, #92]	; (80095dc <HAL_QSPI_MspInit+0x80>)
 8009580:	4b16      	ldr	r3, [pc, #88]	; (80095dc <HAL_QSPI_MspInit+0x80>)
 8009582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009588:	6513      	str	r3, [r2, #80]	; 0x50
 800958a:	4b14      	ldr	r3, [pc, #80]	; (80095dc <HAL_QSPI_MspInit+0x80>)
 800958c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009592:	613b      	str	r3, [r7, #16]
 8009594:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009596:	4a11      	ldr	r2, [pc, #68]	; (80095dc <HAL_QSPI_MspInit+0x80>)
 8009598:	4b10      	ldr	r3, [pc, #64]	; (80095dc <HAL_QSPI_MspInit+0x80>)
 800959a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800959c:	f043 0310 	orr.w	r3, r3, #16
 80095a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80095a2:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <HAL_QSPI_MspInit+0x80>)
 80095a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095a6:	f003 0310 	and.w	r3, r3, #16
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 80095ae:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80095b2:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095b4:	2302      	movs	r3, #2
 80095b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b8:	2300      	movs	r3, #0
 80095ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095bc:	2303      	movs	r3, #3
 80095be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80095c0:	230a      	movs	r3, #10
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	4619      	mov	r1, r3
 80095ca:	4805      	ldr	r0, [pc, #20]	; (80095e0 <HAL_QSPI_MspInit+0x84>)
 80095cc:	f7f7 f90c 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80095d0:	bf00      	nop
 80095d2:	3728      	adds	r7, #40	; 0x28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	a0001000 	.word	0xa0001000
 80095dc:	40021000 	.word	0x40021000
 80095e0:	48001000 	.word	0x48001000

080095e4 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 80095e8:	4b3c      	ldr	r3, [pc, #240]	; (80096dc <MX_SAI1_Init+0xf8>)
 80095ea:	4a3d      	ldr	r2, [pc, #244]	; (80096e0 <MX_SAI1_Init+0xfc>)
 80095ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80095ee:	4b3b      	ldr	r3, [pc, #236]	; (80096dc <MX_SAI1_Init+0xf8>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80095f4:	4b39      	ldr	r3, [pc, #228]	; (80096dc <MX_SAI1_Init+0xf8>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80095fa:	4b38      	ldr	r3, [pc, #224]	; (80096dc <MX_SAI1_Init+0xf8>)
 80095fc:	2240      	movs	r2, #64	; 0x40
 80095fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009600:	4b36      	ldr	r3, [pc, #216]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009602:	2200      	movs	r2, #0
 8009604:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009606:	4b35      	ldr	r3, [pc, #212]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009608:	2200      	movs	r2, #0
 800960a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800960c:	4b33      	ldr	r3, [pc, #204]	; (80096dc <MX_SAI1_Init+0xf8>)
 800960e:	2200      	movs	r2, #0
 8009610:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009612:	4b32      	ldr	r3, [pc, #200]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009614:	2200      	movs	r2, #0
 8009616:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009618:	4b30      	ldr	r3, [pc, #192]	; (80096dc <MX_SAI1_Init+0xf8>)
 800961a:	2200      	movs	r2, #0
 800961c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800961e:	4b2f      	ldr	r3, [pc, #188]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009620:	2200      	movs	r2, #0
 8009622:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8009624:	4b2d      	ldr	r3, [pc, #180]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009626:	4a2f      	ldr	r2, [pc, #188]	; (80096e4 <MX_SAI1_Init+0x100>)
 8009628:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800962a:	4b2c      	ldr	r3, [pc, #176]	; (80096dc <MX_SAI1_Init+0xf8>)
 800962c:	2200      	movs	r2, #0
 800962e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8009630:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009632:	2200      	movs	r2, #0
 8009634:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8009636:	4b29      	ldr	r3, [pc, #164]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009638:	2200      	movs	r2, #0
 800963a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800963c:	4b27      	ldr	r3, [pc, #156]	; (80096dc <MX_SAI1_Init+0xf8>)
 800963e:	2200      	movs	r2, #0
 8009640:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8009642:	4b26      	ldr	r3, [pc, #152]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009644:	2208      	movs	r2, #8
 8009646:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8009648:	4b24      	ldr	r3, [pc, #144]	; (80096dc <MX_SAI1_Init+0xf8>)
 800964a:	2201      	movs	r2, #1
 800964c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800964e:	4b23      	ldr	r3, [pc, #140]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009650:	2200      	movs	r2, #0
 8009652:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009654:	4b21      	ldr	r3, [pc, #132]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009656:	2200      	movs	r2, #0
 8009658:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800965a:	4b20      	ldr	r3, [pc, #128]	; (80096dc <MX_SAI1_Init+0xf8>)
 800965c:	2200      	movs	r2, #0
 800965e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8009660:	4b1e      	ldr	r3, [pc, #120]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009662:	2200      	movs	r2, #0
 8009664:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009666:	4b1d      	ldr	r3, [pc, #116]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009668:	2200      	movs	r2, #0
 800966a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800966c:	4b1b      	ldr	r3, [pc, #108]	; (80096dc <MX_SAI1_Init+0xf8>)
 800966e:	2201      	movs	r2, #1
 8009670:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8009672:	4b1a      	ldr	r3, [pc, #104]	; (80096dc <MX_SAI1_Init+0xf8>)
 8009674:	2200      	movs	r2, #0
 8009676:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8009678:	4818      	ldr	r0, [pc, #96]	; (80096dc <MX_SAI1_Init+0xf8>)
 800967a:	f7fb f9af 	bl	80049dc <HAL_SAI_Init>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8009684:	f7ff ff3c 	bl	8009500 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8009688:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <MX_SAI1_Init+0x104>)
 800968a:	4a18      	ldr	r2, [pc, #96]	; (80096ec <MX_SAI1_Init+0x108>)
 800968c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 800968e:	4b16      	ldr	r3, [pc, #88]	; (80096e8 <MX_SAI1_Init+0x104>)
 8009690:	2204      	movs	r2, #4
 8009692:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8009694:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <MX_SAI1_Init+0x104>)
 8009696:	2200      	movs	r2, #0
 8009698:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800969a:	4b13      	ldr	r3, [pc, #76]	; (80096e8 <MX_SAI1_Init+0x104>)
 800969c:	2200      	movs	r2, #0
 800969e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80096a0:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <MX_SAI1_Init+0x104>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80096a6:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <MX_SAI1_Init+0x104>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80096ac:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <MX_SAI1_Init+0x104>)
 80096ae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80096b2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <MX_SAI1_Init+0x104>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80096ba:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <MX_SAI1_Init+0x104>)
 80096bc:	2200      	movs	r2, #0
 80096be:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80096c0:	4b09      	ldr	r3, [pc, #36]	; (80096e8 <MX_SAI1_Init+0x104>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80096c6:	4808      	ldr	r0, [pc, #32]	; (80096e8 <MX_SAI1_Init+0x104>)
 80096c8:	f7fb f988 	bl	80049dc <HAL_SAI_Init>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <MX_SAI1_Init+0xf2>
  {
    Error_Handler();
 80096d2:	f7ff ff15 	bl	8009500 <Error_Handler>
  }

}
 80096d6:	bf00      	nop
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000268 	.word	0x20000268
 80096e0:	40015404 	.word	0x40015404
 80096e4:	0002ee00 	.word	0x0002ee00
 80096e8:	200001e4 	.word	0x200001e4
 80096ec:	40015424 	.word	0x40015424

080096f0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08a      	sub	sp, #40	; 0x28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a33      	ldr	r2, [pc, #204]	; (80097cc <HAL_SAI_MspInit+0xdc>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d135      	bne.n	800976e <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8009702:	4b33      	ldr	r3, [pc, #204]	; (80097d0 <HAL_SAI_MspInit+0xe0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800970a:	4a32      	ldr	r2, [pc, #200]	; (80097d4 <HAL_SAI_MspInit+0xe4>)
 800970c:	4b31      	ldr	r3, [pc, #196]	; (80097d4 <HAL_SAI_MspInit+0xe4>)
 800970e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009714:	6613      	str	r3, [r2, #96]	; 0x60
 8009716:	4b2f      	ldr	r3, [pc, #188]	; (80097d4 <HAL_SAI_MspInit+0xe4>)
 8009718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800971a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800971e:	613b      	str	r3, [r7, #16]
 8009720:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8009722:	4b2b      	ldr	r3, [pc, #172]	; (80097d0 <HAL_SAI_MspInit+0xe0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3301      	adds	r3, #1
 8009728:	4a29      	ldr	r2, [pc, #164]	; (80097d0 <HAL_SAI_MspInit+0xe0>)
 800972a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 800972c:	2374      	movs	r3, #116	; 0x74
 800972e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009730:	2302      	movs	r3, #2
 8009732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009734:	2300      	movs	r3, #0
 8009736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009738:	2303      	movs	r3, #3
 800973a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800973c:	230d      	movs	r3, #13
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009740:	f107 0314 	add.w	r3, r7, #20
 8009744:	4619      	mov	r1, r3
 8009746:	4824      	ldr	r0, [pc, #144]	; (80097d8 <HAL_SAI_MspInit+0xe8>)
 8009748:	f7f7 f84e 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 800974c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009752:	2302      	movs	r3, #2
 8009754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009756:	2300      	movs	r3, #0
 8009758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800975a:	2300      	movs	r3, #0
 800975c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800975e:	230d      	movs	r3, #13
 8009760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8009762:	f107 0314 	add.w	r3, r7, #20
 8009766:	4619      	mov	r1, r3
 8009768:	481b      	ldr	r0, [pc, #108]	; (80097d8 <HAL_SAI_MspInit+0xe8>)
 800976a:	f7f7 f83d 	bl	80007e8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a1a      	ldr	r2, [pc, #104]	; (80097dc <HAL_SAI_MspInit+0xec>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d124      	bne.n	80097c2 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8009778:	4b15      	ldr	r3, [pc, #84]	; (80097d0 <HAL_SAI_MspInit+0xe0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10b      	bne.n	8009798 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009780:	4a14      	ldr	r2, [pc, #80]	; (80097d4 <HAL_SAI_MspInit+0xe4>)
 8009782:	4b14      	ldr	r3, [pc, #80]	; (80097d4 <HAL_SAI_MspInit+0xe4>)
 8009784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009786:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800978a:	6613      	str	r3, [r2, #96]	; 0x60
 800978c:	4b11      	ldr	r3, [pc, #68]	; (80097d4 <HAL_SAI_MspInit+0xe4>)
 800978e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009794:	60fb      	str	r3, [r7, #12]
 8009796:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8009798:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <HAL_SAI_MspInit+0xe0>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	4a0c      	ldr	r2, [pc, #48]	; (80097d0 <HAL_SAI_MspInit+0xe0>)
 80097a0:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 80097a2:	2380      	movs	r3, #128	; 0x80
 80097a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a6:	2302      	movs	r3, #2
 80097a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097ae:	2303      	movs	r3, #3
 80097b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80097b2:	230d      	movs	r3, #13
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 80097b6:	f107 0314 	add.w	r3, r7, #20
 80097ba:	4619      	mov	r1, r3
 80097bc:	4806      	ldr	r0, [pc, #24]	; (80097d8 <HAL_SAI_MspInit+0xe8>)
 80097be:	f7f7 f813 	bl	80007e8 <HAL_GPIO_Init>

    }
}
 80097c2:	bf00      	nop
 80097c4:	3728      	adds	r7, #40	; 0x28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40015404 	.word	0x40015404
 80097d0:	200000a8 	.word	0x200000a8
 80097d4:	40021000 	.word	0x40021000
 80097d8:	48001000 	.word	0x48001000
 80097dc:	40015424 	.word	0x40015424

080097e0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80097e4:	4b1b      	ldr	r3, [pc, #108]	; (8009854 <MX_SPI2_Init+0x74>)
 80097e6:	4a1c      	ldr	r2, [pc, #112]	; (8009858 <MX_SPI2_Init+0x78>)
 80097e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80097ea:	4b1a      	ldr	r3, [pc, #104]	; (8009854 <MX_SPI2_Init+0x74>)
 80097ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80097f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80097f2:	4b18      	ldr	r3, [pc, #96]	; (8009854 <MX_SPI2_Init+0x74>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80097f8:	4b16      	ldr	r3, [pc, #88]	; (8009854 <MX_SPI2_Init+0x74>)
 80097fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80097fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009800:	4b14      	ldr	r3, [pc, #80]	; (8009854 <MX_SPI2_Init+0x74>)
 8009802:	2200      	movs	r2, #0
 8009804:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009806:	4b13      	ldr	r3, [pc, #76]	; (8009854 <MX_SPI2_Init+0x74>)
 8009808:	2200      	movs	r2, #0
 800980a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800980c:	4b11      	ldr	r3, [pc, #68]	; (8009854 <MX_SPI2_Init+0x74>)
 800980e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009812:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009814:	4b0f      	ldr	r3, [pc, #60]	; (8009854 <MX_SPI2_Init+0x74>)
 8009816:	2200      	movs	r2, #0
 8009818:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800981a:	4b0e      	ldr	r3, [pc, #56]	; (8009854 <MX_SPI2_Init+0x74>)
 800981c:	2200      	movs	r2, #0
 800981e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009820:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <MX_SPI2_Init+0x74>)
 8009822:	2200      	movs	r2, #0
 8009824:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <MX_SPI2_Init+0x74>)
 8009828:	2200      	movs	r2, #0
 800982a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800982c:	4b09      	ldr	r3, [pc, #36]	; (8009854 <MX_SPI2_Init+0x74>)
 800982e:	2207      	movs	r2, #7
 8009830:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009832:	4b08      	ldr	r3, [pc, #32]	; (8009854 <MX_SPI2_Init+0x74>)
 8009834:	2200      	movs	r2, #0
 8009836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009838:	4b06      	ldr	r3, [pc, #24]	; (8009854 <MX_SPI2_Init+0x74>)
 800983a:	2208      	movs	r2, #8
 800983c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800983e:	4805      	ldr	r0, [pc, #20]	; (8009854 <MX_SPI2_Init+0x74>)
 8009840:	f7fb fa66 	bl	8004d10 <HAL_SPI_Init>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800984a:	f7ff fe59 	bl	8009500 <Error_Handler>
  }

}
 800984e:	bf00      	nop
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200002ec 	.word	0x200002ec
 8009858:	40003800 	.word	0x40003800

0800985c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08a      	sub	sp, #40	; 0x28
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009864:	f107 0314 	add.w	r3, r7, #20
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	605a      	str	r2, [r3, #4]
 800986e:	609a      	str	r2, [r3, #8]
 8009870:	60da      	str	r2, [r3, #12]
 8009872:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a17      	ldr	r2, [pc, #92]	; (80098d8 <HAL_SPI_MspInit+0x7c>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d127      	bne.n	80098ce <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800987e:	4a17      	ldr	r2, [pc, #92]	; (80098dc <HAL_SPI_MspInit+0x80>)
 8009880:	4b16      	ldr	r3, [pc, #88]	; (80098dc <HAL_SPI_MspInit+0x80>)
 8009882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009888:	6593      	str	r3, [r2, #88]	; 0x58
 800988a:	4b14      	ldr	r3, [pc, #80]	; (80098dc <HAL_SPI_MspInit+0x80>)
 800988c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800988e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009896:	4a11      	ldr	r2, [pc, #68]	; (80098dc <HAL_SPI_MspInit+0x80>)
 8009898:	4b10      	ldr	r3, [pc, #64]	; (80098dc <HAL_SPI_MspInit+0x80>)
 800989a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800989c:	f043 0308 	orr.w	r3, r3, #8
 80098a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098a2:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <HAL_SPI_MspInit+0x80>)
 80098a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a6:	f003 0308 	and.w	r3, r3, #8
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 80098ae:	231a      	movs	r3, #26
 80098b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098b2:	2302      	movs	r3, #2
 80098b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098ba:	2303      	movs	r3, #3
 80098bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80098be:	2305      	movs	r3, #5
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80098c2:	f107 0314 	add.w	r3, r7, #20
 80098c6:	4619      	mov	r1, r3
 80098c8:	4805      	ldr	r0, [pc, #20]	; (80098e0 <HAL_SPI_MspInit+0x84>)
 80098ca:	f7f6 ff8d 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80098ce:	bf00      	nop
 80098d0:	3728      	adds	r7, #40	; 0x28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	40003800 	.word	0x40003800
 80098dc:	40021000 	.word	0x40021000
 80098e0:	48000c00 	.word	0x48000c00

080098e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098ea:	4a0f      	ldr	r2, [pc, #60]	; (8009928 <HAL_MspInit+0x44>)
 80098ec:	4b0e      	ldr	r3, [pc, #56]	; (8009928 <HAL_MspInit+0x44>)
 80098ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	6613      	str	r3, [r2, #96]	; 0x60
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <HAL_MspInit+0x44>)
 80098f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	607b      	str	r3, [r7, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009902:	4a09      	ldr	r2, [pc, #36]	; (8009928 <HAL_MspInit+0x44>)
 8009904:	4b08      	ldr	r3, [pc, #32]	; (8009928 <HAL_MspInit+0x44>)
 8009906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800990c:	6593      	str	r3, [r2, #88]	; 0x58
 800990e:	4b06      	ldr	r3, [pc, #24]	; (8009928 <HAL_MspInit+0x44>)
 8009910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800991a:	bf00      	nop
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	40021000 	.word	0x40021000

0800992c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009930:	bf00      	nop
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800993a:	b480      	push	{r7}
 800993c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800993e:	e7fe      	b.n	800993e <HardFault_Handler+0x4>

08009940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009940:	b480      	push	{r7}
 8009942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009944:	e7fe      	b.n	8009944 <MemManage_Handler+0x4>

08009946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009946:	b480      	push	{r7}
 8009948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800994a:	e7fe      	b.n	800994a <BusFault_Handler+0x4>

0800994c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800994c:	b480      	push	{r7}
 800994e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009950:	e7fe      	b.n	8009950 <UsageFault_Handler+0x4>

08009952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009952:	b480      	push	{r7}
 8009954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009956:	bf00      	nop
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009964:	bf00      	nop
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800996e:	b480      	push	{r7}
 8009970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009972:	bf00      	nop
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009980:	f7f6 fdee 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009984:	bf00      	nop
 8009986:	bd80      	pop	{r7, pc}

08009988 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800998c:	4802      	ldr	r0, [pc, #8]	; (8009998 <OTG_FS_IRQHandler+0x10>)
 800998e:	f7f7 fb61 	bl	8001054 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009992:	bf00      	nop
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20000794 	.word	0x20000794

0800999c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80099a4:	4b11      	ldr	r3, [pc, #68]	; (80099ec <_sbrk+0x50>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <_sbrk+0x16>
		heap_end = &end;
 80099ac:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <_sbrk+0x50>)
 80099ae:	4a10      	ldr	r2, [pc, #64]	; (80099f0 <_sbrk+0x54>)
 80099b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80099b2:	4b0e      	ldr	r3, [pc, #56]	; (80099ec <_sbrk+0x50>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80099b8:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <_sbrk+0x50>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4413      	add	r3, r2
 80099c0:	466a      	mov	r2, sp
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d907      	bls.n	80099d6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80099c6:	f000 fbed 	bl	800a1a4 <__errno>
 80099ca:	4602      	mov	r2, r0
 80099cc:	230c      	movs	r3, #12
 80099ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80099d0:	f04f 33ff 	mov.w	r3, #4294967295
 80099d4:	e006      	b.n	80099e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <_sbrk+0x50>)
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4413      	add	r3, r2
 80099de:	4a03      	ldr	r2, [pc, #12]	; (80099ec <_sbrk+0x50>)
 80099e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80099e2:	68fb      	ldr	r3, [r7, #12]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	200000ac 	.word	0x200000ac
 80099f0:	20000a5c 	.word	0x20000a5c

080099f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80099f8:	4a17      	ldr	r2, [pc, #92]	; (8009a58 <SystemInit+0x64>)
 80099fa:	4b17      	ldr	r3, [pc, #92]	; (8009a58 <SystemInit+0x64>)
 80099fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8009a08:	4a14      	ldr	r2, [pc, #80]	; (8009a5c <SystemInit+0x68>)
 8009a0a:	4b14      	ldr	r3, [pc, #80]	; (8009a5c <SystemInit+0x68>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f043 0301 	orr.w	r3, r3, #1
 8009a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <SystemInit+0x68>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8009a1a:	4a10      	ldr	r2, [pc, #64]	; (8009a5c <SystemInit+0x68>)
 8009a1c:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <SystemInit+0x68>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009a24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009a28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8009a2a:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <SystemInit+0x68>)
 8009a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009a32:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <SystemInit+0x68>)
 8009a34:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <SystemInit+0x68>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8009a3e:	4b07      	ldr	r3, [pc, #28]	; (8009a5c <SystemInit+0x68>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <SystemInit+0x64>)
 8009a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8009a4c:	bf00      	nop
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	e000ed00 	.word	0xe000ed00
 8009a5c:	40021000 	.word	0x40021000

08009a60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8009a64:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a66:	4a15      	ldr	r2, [pc, #84]	; (8009abc <MX_USART2_UART_Init+0x5c>)
 8009a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009a6a:	4b13      	ldr	r3, [pc, #76]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009a72:	4b11      	ldr	r3, [pc, #68]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009a78:	4b0f      	ldr	r3, [pc, #60]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009a84:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a86:	220c      	movs	r2, #12
 8009a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a90:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009a96:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009a9c:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009aa2:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <MX_USART2_UART_Init+0x58>)
 8009aa4:	f7fb ffca 	bl	8005a3c <HAL_UART_Init>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8009aae:	f7ff fd27 	bl	8009500 <Error_Handler>
  }

}
 8009ab2:	bf00      	nop
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000350 	.word	0x20000350
 8009abc:	40004400 	.word	0x40004400

08009ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08a      	sub	sp, #40	; 0x28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ac8:	f107 0314 	add.w	r3, r7, #20
 8009acc:	2200      	movs	r2, #0
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	605a      	str	r2, [r3, #4]
 8009ad2:	609a      	str	r2, [r3, #8]
 8009ad4:	60da      	str	r2, [r3, #12]
 8009ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a17      	ldr	r2, [pc, #92]	; (8009b3c <HAL_UART_MspInit+0x7c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d127      	bne.n	8009b32 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009ae2:	4a17      	ldr	r2, [pc, #92]	; (8009b40 <HAL_UART_MspInit+0x80>)
 8009ae4:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <HAL_UART_MspInit+0x80>)
 8009ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aec:	6593      	str	r3, [r2, #88]	; 0x58
 8009aee:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <HAL_UART_MspInit+0x80>)
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009afa:	4a11      	ldr	r2, [pc, #68]	; (8009b40 <HAL_UART_MspInit+0x80>)
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <HAL_UART_MspInit+0x80>)
 8009afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b00:	f043 0308 	orr.w	r3, r3, #8
 8009b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b06:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <HAL_UART_MspInit+0x80>)
 8009b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0a:	f003 0308 	and.w	r3, r3, #8
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009b12:	2360      	movs	r3, #96	; 0x60
 8009b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b16:	2302      	movs	r3, #2
 8009b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009b22:	2307      	movs	r3, #7
 8009b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b26:	f107 0314 	add.w	r3, r7, #20
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	4805      	ldr	r0, [pc, #20]	; (8009b44 <HAL_UART_MspInit+0x84>)
 8009b2e:	f7f6 fe5b 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009b32:	bf00      	nop
 8009b34:	3728      	adds	r7, #40	; 0x28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	40004400 	.word	0x40004400
 8009b40:	40021000 	.word	0x40021000
 8009b44:	48000c00 	.word	0x48000c00

08009b48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	490e      	ldr	r1, [pc, #56]	; (8009b88 <MX_USB_HOST_Init+0x40>)
 8009b50:	480e      	ldr	r0, [pc, #56]	; (8009b8c <MX_USB_HOST_Init+0x44>)
 8009b52:	f7fd fe57 	bl	8007804 <USBH_Init>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b5c:	f7ff fcd0 	bl	8009500 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b60:	490b      	ldr	r1, [pc, #44]	; (8009b90 <MX_USB_HOST_Init+0x48>)
 8009b62:	480a      	ldr	r0, [pc, #40]	; (8009b8c <MX_USB_HOST_Init+0x44>)
 8009b64:	f7fd fec1 	bl	80078ea <USBH_RegisterClass>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b6e:	f7ff fcc7 	bl	8009500 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009b72:	4806      	ldr	r0, [pc, #24]	; (8009b8c <MX_USB_HOST_Init+0x44>)
 8009b74:	f7fd ff46 	bl	8007a04 <USBH_Start>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009b7e:	f7ff fcbf 	bl	8009500 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009b82:	bf00      	nop
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	08009ba9 	.word	0x08009ba9
 8009b8c:	200003c8 	.word	0x200003c8
 8009b90:	20000000 	.word	0x20000000

08009b94 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009b98:	4802      	ldr	r0, [pc, #8]	; (8009ba4 <MX_USB_HOST_Process+0x10>)
 8009b9a:	f7fd ff43 	bl	8007a24 <USBH_Process>
}
 8009b9e:	bf00      	nop
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	200003c8 	.word	0x200003c8

08009ba8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d819      	bhi.n	8009bf0 <USBH_UserProcess+0x48>
 8009bbc:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <USBH_UserProcess+0x1c>)
 8009bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc2:	bf00      	nop
 8009bc4:	08009bf1 	.word	0x08009bf1
 8009bc8:	08009be1 	.word	0x08009be1
 8009bcc:	08009bf1 	.word	0x08009bf1
 8009bd0:	08009be9 	.word	0x08009be9
 8009bd4:	08009bd9 	.word	0x08009bd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009bd8:	4b09      	ldr	r3, [pc, #36]	; (8009c00 <USBH_UserProcess+0x58>)
 8009bda:	2203      	movs	r2, #3
 8009bdc:	701a      	strb	r2, [r3, #0]
  break;
 8009bde:	e008      	b.n	8009bf2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <USBH_UserProcess+0x58>)
 8009be2:	2202      	movs	r2, #2
 8009be4:	701a      	strb	r2, [r3, #0]
  break;
 8009be6:	e004      	b.n	8009bf2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009be8:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <USBH_UserProcess+0x58>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	701a      	strb	r2, [r3, #0]
  break;
 8009bee:	e000      	b.n	8009bf2 <USBH_UserProcess+0x4a>

  default:
  break;
 8009bf0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009bf2:	bf00      	nop
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	200000b0 	.word	0x200000b0

08009c04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08a      	sub	sp, #40	; 0x28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c14:	d14e      	bne.n	8009cb4 <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c16:	4a29      	ldr	r2, [pc, #164]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c18:	4b28      	ldr	r3, [pc, #160]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1c:	f043 0301 	orr.w	r3, r3, #1
 8009c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c22:	4b26      	ldr	r3, [pc, #152]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	613b      	str	r3, [r7, #16]
 8009c2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c34:	2302      	movs	r3, #2
 8009c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c40:	230a      	movs	r3, #10
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c44:	f107 0314 	add.w	r3, r7, #20
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c4e:	f7f6 fdcb 	bl	80007e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c52:	4a1a      	ldr	r2, [pc, #104]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c54:	4b19      	ldr	r3, [pc, #100]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c5e:	4b17      	ldr	r3, [pc, #92]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c6a:	4b14      	ldr	r3, [pc, #80]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d114      	bne.n	8009ca0 <HAL_HCD_MspInit+0x9c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c76:	4a11      	ldr	r2, [pc, #68]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c78:	4b10      	ldr	r3, [pc, #64]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c80:	6593      	str	r3, [r2, #88]	; 0x58
 8009c82:	4b0e      	ldr	r3, [pc, #56]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c8a:	60bb      	str	r3, [r7, #8]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009c8e:	f7f8 fe47 	bl	8002920 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c92:	4a0a      	ldr	r2, [pc, #40]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <HAL_HCD_MspInit+0xb8>)
 8009c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8009c9e:	e001      	b.n	8009ca4 <HAL_HCD_MspInit+0xa0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009ca0:	f7f8 fe3e 	bl	8002920 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	2043      	movs	r0, #67	; 0x43
 8009caa:	f7f6 fd66 	bl	800077a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009cae:	2043      	movs	r0, #67	; 0x43
 8009cb0:	f7f6 fd7f 	bl	80007b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	3728      	adds	r7, #40	; 0x28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	40021000 	.word	0x40021000

08009cc0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe f959 	bl	8007f86 <USBH_LL_IncTimer>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe f99e 	bl	800802c <USBH_LL_Connect>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe f9b6 	bl	8008078 <USBH_LL_Disconnect>
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	70fb      	strb	r3, [r7, #3]
 8009d20:	4613      	mov	r3, r2
 8009d22:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe f94b 	bl	8007fda <USBH_LL_PortEnabled>
} 
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe f94b 	bl	8007ff6 <USBH_LL_PortDisabled>
} 
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d12a      	bne.n	8009dd0 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009d7a:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <USBH_LL_Init+0x74>)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a15      	ldr	r2, [pc, #84]	; (8009ddc <USBH_LL_Init+0x74>)
 8009d86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d8a:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <USBH_LL_Init+0x74>)
 8009d8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009d92:	4b12      	ldr	r3, [pc, #72]	; (8009ddc <USBH_LL_Init+0x74>)
 8009d94:	2208      	movs	r2, #8
 8009d96:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d98:	4b10      	ldr	r3, [pc, #64]	; (8009ddc <USBH_LL_Init+0x74>)
 8009d9a:	2203      	movs	r2, #3
 8009d9c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d9e:	4b0f      	ldr	r3, [pc, #60]	; (8009ddc <USBH_LL_Init+0x74>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009da4:	4b0d      	ldr	r3, [pc, #52]	; (8009ddc <USBH_LL_Init+0x74>)
 8009da6:	2202      	movs	r2, #2
 8009da8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <USBH_LL_Init+0x74>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009db0:	480a      	ldr	r0, [pc, #40]	; (8009ddc <USBH_LL_Init+0x74>)
 8009db2:	f7f6 fed9 	bl	8000b68 <HAL_HCD_Init>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009dbc:	f7ff fba0 	bl	8009500 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009dc0:	4806      	ldr	r0, [pc, #24]	; (8009ddc <USBH_LL_Init+0x74>)
 8009dc2:	f7f7 fac6 	bl	8001352 <HAL_HCD_GetCurrentFrame>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7fe f8cc 	bl	8007f68 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000794 	.word	0x20000794

08009de0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7f7 fa33 	bl	8001262 <HAL_HCD_Start>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 f95c 	bl	800a0c0 <USBH_Get_USB_Status>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7f7 fa3b 	bl	80012a8 <HAL_HCD_Stop>
 8009e32:	4603      	mov	r3, r0
 8009e34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 f941 	bl	800a0c0 <USBH_Get_USB_Status>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7f7 fa85 	bl	800136e <HAL_HCD_GetCurrentSpeed>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d007      	beq.n	8009e7a <USBH_LL_GetSpeed+0x2e>
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d302      	bcc.n	8009e74 <USBH_LL_GetSpeed+0x28>
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d006      	beq.n	8009e80 <USBH_LL_GetSpeed+0x34>
 8009e72:	e008      	b.n	8009e86 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
    break;
 8009e78:	e008      	b.n	8009e8c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7e:	e005      	b.n	8009e8c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009e80:	2302      	movs	r3, #2
 8009e82:	73fb      	strb	r3, [r7, #15]
    break;
 8009e84:	e002      	b.n	8009e8c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009e86:	2301      	movs	r3, #1
 8009e88:	73fb      	strb	r3, [r7, #15]
    break;
 8009e8a:	bf00      	nop
  }
  return  speed;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7f7 fa18 	bl	80012e2 <HAL_HCD_ResetPort>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 f901 	bl	800a0c0 <USBH_Get_USB_Status>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ede:	78fa      	ldrb	r2, [r7, #3]
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7f7 fa20 	bl	8001328 <HAL_HCD_HC_GetXferCount>
 8009ee8:	4603      	mov	r3, r0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ef2:	b590      	push	{r4, r7, lr}
 8009ef4:	b089      	sub	sp, #36	; 0x24
 8009ef6:	af04      	add	r7, sp, #16
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	4608      	mov	r0, r1
 8009efc:	4611      	mov	r1, r2
 8009efe:	461a      	mov	r2, r3
 8009f00:	4603      	mov	r3, r0
 8009f02:	70fb      	strb	r3, [r7, #3]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70bb      	strb	r3, [r7, #2]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009f1a:	787c      	ldrb	r4, [r7, #1]
 8009f1c:	78ba      	ldrb	r2, [r7, #2]
 8009f1e:	78f9      	ldrb	r1, [r7, #3]
 8009f20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4623      	mov	r3, r4
 8009f32:	f7f6 fe6f 	bl	8000c14 <HAL_HCD_HC_Init>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 f8bf 	bl	800a0c0 <USBH_Get_USB_Status>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd90      	pop	{r4, r7, pc}

08009f50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f6a:	78fa      	ldrb	r2, [r7, #3]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7f6 fee8 	bl	8000d44 <HAL_HCD_HC_Halt>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 f8a0 	bl	800a0c0 <USBH_Get_USB_Status>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009f8e:	b590      	push	{r4, r7, lr}
 8009f90:	b089      	sub	sp, #36	; 0x24
 8009f92:	af04      	add	r7, sp, #16
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	4608      	mov	r0, r1
 8009f98:	4611      	mov	r1, r2
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	70fb      	strb	r3, [r7, #3]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70bb      	strb	r3, [r7, #2]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009fb6:	787c      	ldrb	r4, [r7, #1]
 8009fb8:	78ba      	ldrb	r2, [r7, #2]
 8009fba:	78f9      	ldrb	r1, [r7, #3]
 8009fbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009fc0:	9303      	str	r3, [sp, #12]
 8009fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009fc4:	9302      	str	r3, [sp, #8]
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	4623      	mov	r3, r4
 8009fd2:	f7f6 fedb 	bl	8000d8c <HAL_HCD_HC_SubmitRequest>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 f86f 	bl	800a0c0 <USBH_Get_USB_Status>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd90      	pop	{r4, r7, pc}

08009ff0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7f7 f979 	bl	80012fe <HAL_HCD_HC_GetURBState>
 800a00c:	4603      	mov	r3, r0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b082      	sub	sp, #8
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	460b      	mov	r3, r1
 800a020:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d103      	bne.n	800a034 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a02c:	78fb      	ldrb	r3, [r7, #3]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f872 	bl	800a118 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a034:	20c8      	movs	r0, #200	; 0xc8
 800a036:	f7f6 faad 	bl	8000594 <HAL_Delay>
  return USBH_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	70fb      	strb	r3, [r7, #3]
 800a050:	4613      	mov	r3, r2
 800a052:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a05a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a05c:	78fa      	ldrb	r2, [r7, #3]
 800a05e:	68f9      	ldr	r1, [r7, #12]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	440b      	add	r3, r1
 800a06a:	333b      	adds	r3, #59	; 0x3b
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a072:	78fa      	ldrb	r2, [r7, #3]
 800a074:	68f9      	ldr	r1, [r7, #12]
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	00db      	lsls	r3, r3, #3
 800a07e:	440b      	add	r3, r1
 800a080:	3350      	adds	r3, #80	; 0x50
 800a082:	78ba      	ldrb	r2, [r7, #2]
 800a084:	701a      	strb	r2, [r3, #0]
 800a086:	e009      	b.n	800a09c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	440b      	add	r3, r1
 800a096:	3351      	adds	r3, #81	; 0x51
 800a098:	78ba      	ldrb	r2, [r7, #2]
 800a09a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7f6 fa6e 	bl	8000594 <HAL_Delay>
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d817      	bhi.n	800a104 <USBH_Get_USB_Status+0x44>
 800a0d4:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <USBH_Get_USB_Status+0x1c>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a0ed 	.word	0x0800a0ed
 800a0e0:	0800a0f3 	.word	0x0800a0f3
 800a0e4:	0800a0f9 	.word	0x0800a0f9
 800a0e8:	0800a0ff 	.word	0x0800a0ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f0:	e00b      	b.n	800a10a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f6:	e008      	b.n	800a10a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fc:	e005      	b.n	800a10a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a0fe:	2302      	movs	r3, #2
 800a100:	73fb      	strb	r3, [r7, #15]
    break;
 800a102:	e002      	b.n	800a10a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a104:	2302      	movs	r3, #2
 800a106:	73fb      	strb	r3, [r7, #15]
    break;
 800a108:	bf00      	nop
  }
  return usb_status;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	4603      	mov	r3, r0
 800a120:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800a122:	79fb      	ldrb	r3, [r7, #7]
 800a124:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a126:	79fb      	ldrb	r3, [r7, #7]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800a12c:	2301      	movs	r3, #1
 800a12e:	73fb      	strb	r3, [r7, #15]
 800a130:	e001      	b.n	800a136 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	461a      	mov	r2, r3
 800a13a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a13e:	4803      	ldr	r0, [pc, #12]	; (800a14c <MX_DriverVbusFS+0x34>)
 800a140:	f7f6 fcfa 	bl	8000b38 <HAL_GPIO_WritePin>
}
 800a144:	bf00      	nop
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	48000800 	.word	0x48000800

0800a150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a150:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a188 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a154:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a156:	e003      	b.n	800a160 <LoopCopyDataInit>

0800a158 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a158:	4b0c      	ldr	r3, [pc, #48]	; (800a18c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a15a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a15c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a15e:	3104      	adds	r1, #4

0800a160 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a160:	480b      	ldr	r0, [pc, #44]	; (800a190 <LoopForever+0xa>)
	ldr	r3, =_edata
 800a162:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <LoopForever+0xe>)
	adds	r2, r0, r1
 800a164:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a166:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a168:	d3f6      	bcc.n	800a158 <CopyDataInit>
	ldr	r2, =_sbss
 800a16a:	4a0b      	ldr	r2, [pc, #44]	; (800a198 <LoopForever+0x12>)
	b	LoopFillZerobss
 800a16c:	e002      	b.n	800a174 <LoopFillZerobss>

0800a16e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a16e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a170:	f842 3b04 	str.w	r3, [r2], #4

0800a174 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a174:	4b09      	ldr	r3, [pc, #36]	; (800a19c <LoopForever+0x16>)
	cmp	r2, r3
 800a176:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a178:	d3f9      	bcc.n	800a16e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a17a:	f7ff fc3b 	bl	80099f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a17e:	f000 f817 	bl	800a1b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a182:	f7ff f887 	bl	8009294 <main>

0800a186 <LoopForever>:

LoopForever:
    b LoopForever
 800a186:	e7fe      	b.n	800a186 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a188:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800a18c:	0800a418 	.word	0x0800a418
	ldr	r0, =_sdata
 800a190:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a194:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 800a198:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 800a19c:	20000a5c 	.word	0x20000a5c

0800a1a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a1a0:	e7fe      	b.n	800a1a0 <ADC1_2_IRQHandler>
	...

0800a1a4 <__errno>:
 800a1a4:	4b01      	ldr	r3, [pc, #4]	; (800a1ac <__errno+0x8>)
 800a1a6:	6818      	ldr	r0, [r3, #0]
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	20000024 	.word	0x20000024

0800a1b0 <__libc_init_array>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	4e0d      	ldr	r6, [pc, #52]	; (800a1e8 <__libc_init_array+0x38>)
 800a1b4:	4c0d      	ldr	r4, [pc, #52]	; (800a1ec <__libc_init_array+0x3c>)
 800a1b6:	1ba4      	subs	r4, r4, r6
 800a1b8:	10a4      	asrs	r4, r4, #2
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	42a5      	cmp	r5, r4
 800a1be:	d109      	bne.n	800a1d4 <__libc_init_array+0x24>
 800a1c0:	4e0b      	ldr	r6, [pc, #44]	; (800a1f0 <__libc_init_array+0x40>)
 800a1c2:	4c0c      	ldr	r4, [pc, #48]	; (800a1f4 <__libc_init_array+0x44>)
 800a1c4:	f000 f8ee 	bl	800a3a4 <_init>
 800a1c8:	1ba4      	subs	r4, r4, r6
 800a1ca:	10a4      	asrs	r4, r4, #2
 800a1cc:	2500      	movs	r5, #0
 800a1ce:	42a5      	cmp	r5, r4
 800a1d0:	d105      	bne.n	800a1de <__libc_init_array+0x2e>
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1d8:	4798      	blx	r3
 800a1da:	3501      	adds	r5, #1
 800a1dc:	e7ee      	b.n	800a1bc <__libc_init_array+0xc>
 800a1de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1e2:	4798      	blx	r3
 800a1e4:	3501      	adds	r5, #1
 800a1e6:	e7f2      	b.n	800a1ce <__libc_init_array+0x1e>
 800a1e8:	0800a410 	.word	0x0800a410
 800a1ec:	0800a410 	.word	0x0800a410
 800a1f0:	0800a410 	.word	0x0800a410
 800a1f4:	0800a414 	.word	0x0800a414

0800a1f8 <malloc>:
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <malloc+0xc>)
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f000 b861 	b.w	800a2c4 <_malloc_r>
 800a202:	bf00      	nop
 800a204:	20000024 	.word	0x20000024

0800a208 <free>:
 800a208:	4b02      	ldr	r3, [pc, #8]	; (800a214 <free+0xc>)
 800a20a:	4601      	mov	r1, r0
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	f000 b80b 	b.w	800a228 <_free_r>
 800a212:	bf00      	nop
 800a214:	20000024 	.word	0x20000024

0800a218 <memset>:
 800a218:	4402      	add	r2, r0
 800a21a:	4603      	mov	r3, r0
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d100      	bne.n	800a222 <memset+0xa>
 800a220:	4770      	bx	lr
 800a222:	f803 1b01 	strb.w	r1, [r3], #1
 800a226:	e7f9      	b.n	800a21c <memset+0x4>

0800a228 <_free_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4605      	mov	r5, r0
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d045      	beq.n	800a2bc <_free_r+0x94>
 800a230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a234:	1f0c      	subs	r4, r1, #4
 800a236:	2b00      	cmp	r3, #0
 800a238:	bfb8      	it	lt
 800a23a:	18e4      	addlt	r4, r4, r3
 800a23c:	f000 f8b0 	bl	800a3a0 <__malloc_lock>
 800a240:	4a1f      	ldr	r2, [pc, #124]	; (800a2c0 <_free_r+0x98>)
 800a242:	6813      	ldr	r3, [r2, #0]
 800a244:	4610      	mov	r0, r2
 800a246:	b933      	cbnz	r3, 800a256 <_free_r+0x2e>
 800a248:	6063      	str	r3, [r4, #4]
 800a24a:	6014      	str	r4, [r2, #0]
 800a24c:	4628      	mov	r0, r5
 800a24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a252:	f000 b8a6 	b.w	800a3a2 <__malloc_unlock>
 800a256:	42a3      	cmp	r3, r4
 800a258:	d90c      	bls.n	800a274 <_free_r+0x4c>
 800a25a:	6821      	ldr	r1, [r4, #0]
 800a25c:	1862      	adds	r2, r4, r1
 800a25e:	4293      	cmp	r3, r2
 800a260:	bf04      	itt	eq
 800a262:	681a      	ldreq	r2, [r3, #0]
 800a264:	685b      	ldreq	r3, [r3, #4]
 800a266:	6063      	str	r3, [r4, #4]
 800a268:	bf04      	itt	eq
 800a26a:	1852      	addeq	r2, r2, r1
 800a26c:	6022      	streq	r2, [r4, #0]
 800a26e:	6004      	str	r4, [r0, #0]
 800a270:	e7ec      	b.n	800a24c <_free_r+0x24>
 800a272:	4613      	mov	r3, r2
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	b10a      	cbz	r2, 800a27c <_free_r+0x54>
 800a278:	42a2      	cmp	r2, r4
 800a27a:	d9fa      	bls.n	800a272 <_free_r+0x4a>
 800a27c:	6819      	ldr	r1, [r3, #0]
 800a27e:	1858      	adds	r0, r3, r1
 800a280:	42a0      	cmp	r0, r4
 800a282:	d10b      	bne.n	800a29c <_free_r+0x74>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	4401      	add	r1, r0
 800a288:	1858      	adds	r0, r3, r1
 800a28a:	4282      	cmp	r2, r0
 800a28c:	6019      	str	r1, [r3, #0]
 800a28e:	d1dd      	bne.n	800a24c <_free_r+0x24>
 800a290:	6810      	ldr	r0, [r2, #0]
 800a292:	6852      	ldr	r2, [r2, #4]
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	4401      	add	r1, r0
 800a298:	6019      	str	r1, [r3, #0]
 800a29a:	e7d7      	b.n	800a24c <_free_r+0x24>
 800a29c:	d902      	bls.n	800a2a4 <_free_r+0x7c>
 800a29e:	230c      	movs	r3, #12
 800a2a0:	602b      	str	r3, [r5, #0]
 800a2a2:	e7d3      	b.n	800a24c <_free_r+0x24>
 800a2a4:	6820      	ldr	r0, [r4, #0]
 800a2a6:	1821      	adds	r1, r4, r0
 800a2a8:	428a      	cmp	r2, r1
 800a2aa:	bf04      	itt	eq
 800a2ac:	6811      	ldreq	r1, [r2, #0]
 800a2ae:	6852      	ldreq	r2, [r2, #4]
 800a2b0:	6062      	str	r2, [r4, #4]
 800a2b2:	bf04      	itt	eq
 800a2b4:	1809      	addeq	r1, r1, r0
 800a2b6:	6021      	streq	r1, [r4, #0]
 800a2b8:	605c      	str	r4, [r3, #4]
 800a2ba:	e7c7      	b.n	800a24c <_free_r+0x24>
 800a2bc:	bd38      	pop	{r3, r4, r5, pc}
 800a2be:	bf00      	nop
 800a2c0:	200000b4 	.word	0x200000b4

0800a2c4 <_malloc_r>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	1ccd      	adds	r5, r1, #3
 800a2c8:	f025 0503 	bic.w	r5, r5, #3
 800a2cc:	3508      	adds	r5, #8
 800a2ce:	2d0c      	cmp	r5, #12
 800a2d0:	bf38      	it	cc
 800a2d2:	250c      	movcc	r5, #12
 800a2d4:	2d00      	cmp	r5, #0
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	db01      	blt.n	800a2de <_malloc_r+0x1a>
 800a2da:	42a9      	cmp	r1, r5
 800a2dc:	d903      	bls.n	800a2e6 <_malloc_r+0x22>
 800a2de:	230c      	movs	r3, #12
 800a2e0:	6033      	str	r3, [r6, #0]
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	bd70      	pop	{r4, r5, r6, pc}
 800a2e6:	f000 f85b 	bl	800a3a0 <__malloc_lock>
 800a2ea:	4a23      	ldr	r2, [pc, #140]	; (800a378 <_malloc_r+0xb4>)
 800a2ec:	6814      	ldr	r4, [r2, #0]
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	b991      	cbnz	r1, 800a318 <_malloc_r+0x54>
 800a2f2:	4c22      	ldr	r4, [pc, #136]	; (800a37c <_malloc_r+0xb8>)
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	b91b      	cbnz	r3, 800a300 <_malloc_r+0x3c>
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f000 f841 	bl	800a380 <_sbrk_r>
 800a2fe:	6020      	str	r0, [r4, #0]
 800a300:	4629      	mov	r1, r5
 800a302:	4630      	mov	r0, r6
 800a304:	f000 f83c 	bl	800a380 <_sbrk_r>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d126      	bne.n	800a35a <_malloc_r+0x96>
 800a30c:	230c      	movs	r3, #12
 800a30e:	6033      	str	r3, [r6, #0]
 800a310:	4630      	mov	r0, r6
 800a312:	f000 f846 	bl	800a3a2 <__malloc_unlock>
 800a316:	e7e4      	b.n	800a2e2 <_malloc_r+0x1e>
 800a318:	680b      	ldr	r3, [r1, #0]
 800a31a:	1b5b      	subs	r3, r3, r5
 800a31c:	d41a      	bmi.n	800a354 <_malloc_r+0x90>
 800a31e:	2b0b      	cmp	r3, #11
 800a320:	d90f      	bls.n	800a342 <_malloc_r+0x7e>
 800a322:	600b      	str	r3, [r1, #0]
 800a324:	50cd      	str	r5, [r1, r3]
 800a326:	18cc      	adds	r4, r1, r3
 800a328:	4630      	mov	r0, r6
 800a32a:	f000 f83a 	bl	800a3a2 <__malloc_unlock>
 800a32e:	f104 000b 	add.w	r0, r4, #11
 800a332:	1d23      	adds	r3, r4, #4
 800a334:	f020 0007 	bic.w	r0, r0, #7
 800a338:	1ac3      	subs	r3, r0, r3
 800a33a:	d01b      	beq.n	800a374 <_malloc_r+0xb0>
 800a33c:	425a      	negs	r2, r3
 800a33e:	50e2      	str	r2, [r4, r3]
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	428c      	cmp	r4, r1
 800a344:	bf0d      	iteet	eq
 800a346:	6863      	ldreq	r3, [r4, #4]
 800a348:	684b      	ldrne	r3, [r1, #4]
 800a34a:	6063      	strne	r3, [r4, #4]
 800a34c:	6013      	streq	r3, [r2, #0]
 800a34e:	bf18      	it	ne
 800a350:	460c      	movne	r4, r1
 800a352:	e7e9      	b.n	800a328 <_malloc_r+0x64>
 800a354:	460c      	mov	r4, r1
 800a356:	6849      	ldr	r1, [r1, #4]
 800a358:	e7ca      	b.n	800a2f0 <_malloc_r+0x2c>
 800a35a:	1cc4      	adds	r4, r0, #3
 800a35c:	f024 0403 	bic.w	r4, r4, #3
 800a360:	42a0      	cmp	r0, r4
 800a362:	d005      	beq.n	800a370 <_malloc_r+0xac>
 800a364:	1a21      	subs	r1, r4, r0
 800a366:	4630      	mov	r0, r6
 800a368:	f000 f80a 	bl	800a380 <_sbrk_r>
 800a36c:	3001      	adds	r0, #1
 800a36e:	d0cd      	beq.n	800a30c <_malloc_r+0x48>
 800a370:	6025      	str	r5, [r4, #0]
 800a372:	e7d9      	b.n	800a328 <_malloc_r+0x64>
 800a374:	bd70      	pop	{r4, r5, r6, pc}
 800a376:	bf00      	nop
 800a378:	200000b4 	.word	0x200000b4
 800a37c:	200000b8 	.word	0x200000b8

0800a380 <_sbrk_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4c06      	ldr	r4, [pc, #24]	; (800a39c <_sbrk_r+0x1c>)
 800a384:	2300      	movs	r3, #0
 800a386:	4605      	mov	r5, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	f7ff fb06 	bl	800999c <_sbrk>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_sbrk_r+0x1a>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	b103      	cbz	r3, 800a39a <_sbrk_r+0x1a>
 800a398:	602b      	str	r3, [r5, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	20000a58 	.word	0x20000a58

0800a3a0 <__malloc_lock>:
 800a3a0:	4770      	bx	lr

0800a3a2 <__malloc_unlock>:
 800a3a2:	4770      	bx	lr

0800a3a4 <_init>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr

0800a3b0 <_fini>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	bf00      	nop
 800a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b6:	bc08      	pop	{r3}
 800a3b8:	469e      	mov	lr, r3
 800a3ba:	4770      	bx	lr
